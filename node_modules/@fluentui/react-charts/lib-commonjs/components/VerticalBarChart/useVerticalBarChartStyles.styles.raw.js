'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    useVerticalBarChartStyles: function() {
        return useVerticalBarChartStyles;
    },
    verticalbarchartClassNames: function() {
        return verticalbarchartClassNames;
    }
});
const _react = require("@griffel/react");
const _reacttheme = require("@fluentui/react-theme");
const _utilities = require("../../utilities/utilities");
const _index = require("../../utilities/index");
const verticalbarchartClassNames = {
    opacityChangeOnHover: 'fui-vbc__opacityChangeOnHover',
    tooltip: 'fui-vbc__tooltip',
    barLabel: 'fui-vbc__barLabel',
    lineBorder: 'fui-vbc_lineBorder',
    root: '',
    xAxis: '',
    yAxis: '',
    legendContainer: '',
    hover: '',
    descriptionMessage: '',
    axisTitle: '',
    chartTitle: '',
    shapeStyles: '',
    chartWrapper: '',
    svgTooltip: '',
    chart: '',
    axisAnnotation: ''
};
const useStyles = (0, _react.makeStyles)({
    opacityChangeOnHover: {},
    tooltip: (0, _index.getTooltipStyle)(),
    barLabel: (0, _index.getBarLabelStyle)(),
    lineBorder: {
        stroke: _reacttheme.tokens.colorNeutralBackground1,
        [_utilities.HighContrastSelector]: {
            stroke: 'Canvas'
        }
    }
});
const useVerticalBarChartStyles = (props)=>{
    const baseStyles = useStyles();
    return {
        opacityChangeOnHover: (0, _react.mergeClasses)(verticalbarchartClassNames.opacityChangeOnHover, baseStyles.opacityChangeOnHover /*props.styles?.opacityChangeOnHover*/ ),
        tooltip: (0, _react.mergeClasses)(verticalbarchartClassNames.tooltip, baseStyles.tooltip /*props.styles?.tooltip*/ ),
        barLabel: (0, _react.mergeClasses)(verticalbarchartClassNames.barLabel, baseStyles.barLabel /*props.styles?.barLabel*/ ),
        lineBorder: (0, _react.mergeClasses)(verticalbarchartClassNames.lineBorder, baseStyles.lineBorder /*props.styles?.lineBorder*/ )
    };
};
