{"version":3,"sources":["../src/components/GroupedVerticalBarChart/GroupedVerticalBarChart.tsx"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { useGroupedVerticalBarChartStyles_unstable } from './useGroupedVerticalBarChartStyles.styles';\nimport { select as d3Select, pointer as d3Pointer } from 'd3-selection';\nimport { max as d3Max, min as d3Min } from 'd3-array';\nimport { ScaleBand, ScaleLinear, scaleBand as d3ScaleBand } from 'd3-scale';\n\nimport { useId, JSXElement } from '@fluentui/react-utilities';\nimport {\n  ChartTypes,\n  IAxisData,\n  getAccessibleDataObject,\n  tooltipOfAxislabels,\n  XAxisTypes,\n  getTypeOfAxis,\n  formatScientificLimitWidth,\n  getScalePadding,\n  getBarWidth,\n  isScalePaddingDefined,\n  createNumericYAxis,\n  IDomainNRange,\n  domainRangeOfXStringAxis,\n  createStringYAxis,\n  getNextColor,\n  areArraysEqual,\n  calculateLongestLabelWidth,\n  useRtl,\n  YAxisType,\n  calcRequiredWidth,\n  calcTotalWidth,\n  calcBandwidth,\n  calcTotalBandUnits,\n  sortAxisCategories,\n} from '../../utilities/index';\n\nimport {\n  AccessibilityProps,\n  CartesianChart,\n  Margins,\n  Legend,\n  GroupedVerticalBarChartProps,\n  GroupedVerticalBarChartData,\n  GVBarChartSeriesPoint,\n  Legends,\n  YValueHover,\n  ChartPopoverProps,\n  Chart,\n  ImageExportOptions,\n  LegendContainer,\n  LineSeries,\n  getColorFromToken,\n  BarSeries,\n  ChildProps,\n} from '../../index';\nimport { toImage } from '../../utilities/image-export-utils';\nimport { tokens } from '@fluentui/react-theme';\n\ntype NumericScale = ScaleLinear<number, number>;\ntype StringScale = ScaleBand<string>;\n\nconst MIN_DOMAIN_MARGIN = 8;\nconst X1_INNER_PADDING = 0.1;\nconst VERTICAL_BAR_GAP = 1;\nconst MIN_BAR_HEIGHT = 1;\n\n// This interface used for - While forming datapoints from given prop \"data\" in code\ninterface GVDataPoint {\n  [key: string]: number | string;\n}\n\n// While forming datapoints from given prop \"data\" in code. These datapoints are used for to draw graph easily.\ninterface GVSingleDataPoint {\n  [key: string]: GVDataPoint;\n}\n\ntype GVBCLineSeries = LineSeries<string, number>;\n\nexport const GroupedVerticalBarChart: React.FC<GroupedVerticalBarChartProps> = React.forwardRef<\n  HTMLDivElement,\n  GroupedVerticalBarChartProps\n>((_props, forwardedRef) => {\n  const props: GroupedVerticalBarChartProps = {\n    xAxisCategoryOrder: 'default',\n    maxBarWidth: 24,\n    ..._props,\n  };\n  const _tooltipId: string = useId('GVBCTooltipId_');\n  const _emptyChartId: string = useId('_GVBC_empty');\n  const _useRtl: boolean = useRtl();\n  let _domainMargin: number = MIN_DOMAIN_MARGIN;\n  let _xAxisLabels: string[] = [];\n  let _datasetForBars: any[] = [];\n  let _margins: Margins = { top: 0, right: 0, bottom: 0, left: 0 };\n  let _groupedVerticalBarGraph: JSXElement[] = [];\n  let _yMax: number = 0;\n  let _calloutAnchorPoint: GVBarChartSeriesPoint | null = null;\n  let _barWidth: number = 0;\n  let _groupWidth: number = 0;\n  let _xAxisInnerPadding: number = 0;\n  let _xAxisOuterPadding: number = 0;\n  let _barLegends: string[] = [];\n  let _lineLegends: string[] = [];\n  let _legendColorMap: Record<string, [string, string]> = {};\n  const cartesianChartRef = React.useRef<Chart>(null);\n  const Y_ORIGIN: number = 0;\n  const _legendsRef = React.useRef<LegendContainer>(null);\n  const _rectRef = React.useRef<SVGRectElement>(null);\n  const _uniqDotId = useId('gvbc_dot_');\n\n  const [color, setColor] = React.useState<string | undefined>('');\n  const [dataForHoverCard, setDataForHoverCard] = React.useState<number>(0);\n  const [selectedLegends, setSelectedLegends] = React.useState<string[]>(props.legendProps?.selectedLegends || []);\n  const [xCalloutValue, setXCalloutValue] = React.useState<string>('');\n  const [yCalloutValue, setYCalloutValue] = React.useState<string | undefined>('');\n  const [yValueHover, setYValueHover] = React.useState<YValueHover[]>([]);\n  const [hoverXValue, setHoverXValue] = React.useState<string>('');\n  const [calloutLegend, setCalloutLegend] = React.useState<string>('');\n  const [activeLegend, setActiveLegend] = React.useState<string>('');\n  const [callOutAccessibilityData, setCallOutAccessibilityData] = React.useState<AccessibilityProps | undefined>(\n    undefined,\n  );\n  const [popoverTarget, setPopoverTarget] = React.useState<SVGElement | null>(null);\n  const [isPopoverOpen, setPopoverOpen] = React.useState<boolean>(false);\n  const [activeLinePoint, setActiveLinePoint] = React.useState<string>('');\n  const classes = useGroupedVerticalBarChartStyles_unstable(props);\n\n  React.useEffect(() => {\n    if (!areArraysEqual(props.legendProps?.selectedLegends, selectedLegends)) {\n      setSelectedLegends(props.legendProps?.selectedLegends || []);\n    }\n  }, [props.legendProps?.selectedLegends]);\n\n  React.useImperativeHandle(\n    props.componentRef,\n    () => ({\n      chartContainer: cartesianChartRef.current?.chartContainer ?? null,\n      toImage: (opts?: ImageExportOptions): Promise<string> => {\n        return toImage(cartesianChartRef.current?.chartContainer, _legendsRef.current?.toSVG, _useRtl, opts);\n      },\n    }),\n    [],\n  );\n\n  const _adjustProps = () => {\n    _barWidth = getBarWidth(props.barWidth, props.maxBarWidth);\n    // x0_inner_padding = space_between_groups / (space_between_groups + group_width)\n    // space_between_groups = 2 * bar_width\n    // group_width = _barLegends.length * bar_width + (_barLegends.length - 1) * space_between_bars\n    _xAxisInnerPadding = getScalePadding(\n      props.xAxisInnerPadding,\n      undefined,\n      2 / (2 + calcTotalBandUnits(_barLegends.length, X1_INNER_PADDING)),\n    );\n    _xAxisOuterPadding = getScalePadding(props.xAxisOuterPadding);\n  };\n\n  const _createDataset = (barData: GroupedVerticalBarChartData[], lineData: GVBCLineSeries[]) => {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const datasetForBars: any = [];\n\n    const linePointsByX: Record<string, YValueHover[]> = {};\n    const visitedX = new Set<string>();\n    lineData.forEach(series => {\n      series.data.forEach(point => {\n        if (!linePointsByX[point.x]) {\n          linePointsByX[point.x] = [];\n        }\n        linePointsByX[point.x].push({\n          ...point,\n          legend: series.legend,\n          color: series.color,\n          data: point.y,\n          useSecondaryYScale: series.useSecondaryYScale,\n        } as YValueHover);\n      });\n    });\n\n    barData.forEach((point: GroupedVerticalBarChartData, index: number) => {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const singleDatasetPointForBars: any = {};\n      const legendToBarPoint: Record<string, GVBarChartSeriesPoint> = {};\n\n      point.series.forEach((seriesPoint: GVBarChartSeriesPoint) => {\n        if (!singleDatasetPointForBars[seriesPoint.legend]) {\n          singleDatasetPointForBars[seriesPoint.legend] = [{ ...seriesPoint }];\n          legendToBarPoint[seriesPoint.legend] = { ...seriesPoint };\n        } else {\n          singleDatasetPointForBars[seriesPoint.legend].push({ ...seriesPoint });\n          legendToBarPoint[seriesPoint.legend].data += seriesPoint.data;\n        }\n      });\n\n      singleDatasetPointForBars.xAxisPoint = point.name;\n      singleDatasetPointForBars.indexNum = index;\n      singleDatasetPointForBars.groupSeries = [\n        ...Object.values(legendToBarPoint),\n        ...(linePointsByX[point.name] ?? []),\n      ];\n      singleDatasetPointForBars.stackCallOutAccessibilityData = point.stackCallOutAccessibilityData;\n      datasetForBars.push(singleDatasetPointForBars);\n      visitedX.add(point.name);\n    });\n\n    Object.keys(linePointsByX).forEach(xPoint => {\n      if (!visitedX.has(xPoint)) {\n        datasetForBars.push({\n          xAxisPoint: xPoint,\n          groupSeries: linePointsByX[xPoint],\n        });\n      }\n    });\n\n    return datasetForBars;\n  };\n\n  const _createDataSetOfGVBC = (barData: GroupedVerticalBarChartData[], lineData: GVBCLineSeries[]) => {\n    const barLegends = new Set<string>();\n    barData.forEach((point: GroupedVerticalBarChartData) => {\n      point.series.forEach((seriesPoint: GVBarChartSeriesPoint) => {\n        barLegends.add(seriesPoint.legend);\n      });\n    });\n    const lineLegends = new Set<string>(lineData.map(series => series.legend));\n    const xAxisLabels: string[] = _getOrderedXAxisLabels(barData, lineData);\n    const datasetForBars = _createDataset(barData, lineData);\n    return {\n      barLegends: Array.from(barLegends),\n      lineLegends: Array.from(lineLegends),\n      xAxisLabels,\n      datasetForBars,\n    };\n  };\n\n  const onLegendSelectionChange = (\n    selectedLegends: string[],\n    event: React.MouseEvent<HTMLButtonElement>,\n    currentLegend?: Legend,\n  ): void => {\n    if (props.legendProps?.canSelectMultipleLegends) {\n      setSelectedLegends(selectedLegends);\n    } else {\n      setSelectedLegends(selectedLegends.slice(-1));\n    }\n    if (props.legendProps?.onChange) {\n      props.legendProps.onChange(selectedLegends, event, currentLegend);\n    }\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-deprecated\n  const _getLegendData = (): JSXElement => {\n    const actions: Legend[] = [];\n\n    const addLegendButton = (legendTitle: string, isLineLegendInBarChart?: boolean) => {\n      const legend: Legend = {\n        title: legendTitle,\n        color: _legendColorMap[legendTitle][0],\n        isLineLegendInBarChart,\n        hoverAction: () => {\n          _handleChartMouseLeave();\n          _onLegendHover(legendTitle);\n        },\n        onMouseOutAction: () => {\n          _onLegendLeave();\n        },\n      };\n\n      actions.push(legend);\n    };\n\n    _lineLegends.forEach(legendTitle => addLegendButton(legendTitle, true));\n    _barLegends.forEach(legendTitle => addLegendButton(legendTitle));\n\n    return (\n      <Legends\n        legends={actions}\n        enabledWrapLines={props.enabledLegendsWrapLines}\n        overflowText={props.legendsOverflowText}\n        {...props.legendProps}\n        onChange={onLegendSelectionChange}\n        legendRef={_legendsRef}\n      />\n    );\n  };\n\n  const _processDataV2 = (dataV2: (BarSeries<string, number> | LineSeries<string, number>)[]) => {\n    const barPointsByX: Record<string, GroupedVerticalBarChartData> = {};\n    const lineData: GVBCLineSeries[] = [];\n\n    dataV2.forEach(series => {\n      if (series.type === 'bar') {\n        series.data.forEach(point => {\n          if (!barPointsByX[point.x]) {\n            barPointsByX[point.x] = { name: point.x, series: [] };\n          }\n\n          barPointsByX[point.x].series.push({\n            key: series.key ?? series.legend,\n            data: point.y,\n            color: point.color ?? series.color,\n            // gradient: series.gradient,\n            legend: series.legend,\n            xAxisCalloutData: point.xAxisCalloutData,\n            yAxisCalloutData: point.yAxisCalloutData,\n            onClick: point.onClick,\n            useSecondaryYScale: series.useSecondaryYScale,\n          });\n        });\n      } else if (series.type === 'line') {\n        lineData!.push(series);\n      }\n    });\n\n    return { barData: Object.values(barPointsByX), lineData };\n  };\n\n  const _prepareChartData = () => {\n    let barData = props.data;\n    let lineData: GVBCLineSeries[] | undefined;\n\n    if (Array.isArray(props.dataV2) && props.dataV2.length > 0) {\n      ({ barData, lineData } = _processDataV2(props.dataV2));\n    }\n\n    _legendColorMap = {};\n    let colorIndex = 0;\n\n    return {\n      barData:\n        barData?.map(point => {\n          return {\n            ...point,\n            series:\n              point.series?.map(seriesPoint => {\n                // TODO: Add support for gradient colors\n                let startColor = seriesPoint.color ? seriesPoint.color : getNextColor(colorIndex, 0);\n                let endColor = startColor;\n                if (!_legendColorMap[seriesPoint.legend]) {\n                  _legendColorMap[seriesPoint.legend] = [startColor, endColor];\n                }\n                colorIndex += 1;\n\n                return {\n                  ...seriesPoint,\n                  color: seriesPoint.color ?? _legendColorMap[seriesPoint.legend][0],\n                };\n              }) ?? [],\n          };\n        }) ?? [],\n\n      lineData:\n        lineData?.map(series => {\n          let lineColor: string;\n          if (typeof series.color === 'undefined') {\n            lineColor = getNextColor(colorIndex, 0);\n          } else {\n            lineColor = getColorFromToken(series.color);\n          }\n\n          if (!_legendColorMap[series.legend]) {\n            _legendColorMap[series.legend] = [lineColor, lineColor];\n          }\n          colorIndex += 1;\n\n          return {\n            ...series,\n            color: _legendColorMap[series.legend][0],\n          };\n        }) ?? [],\n    };\n  };\n\n  const _getOrderedXAxisLabels = (barData: GroupedVerticalBarChartData[], lineData: GVBCLineSeries[]) => {\n    if (_xAxisType !== XAxisTypes.StringAxis) {\n      return [];\n    }\n\n    return sortAxisCategories(_mapCategoryToValues(barData, lineData), props.xAxisCategoryOrder);\n  };\n\n  const _mapCategoryToValues = (barData: GroupedVerticalBarChartData[], lineData: GVBCLineSeries[]) => {\n    const categoryToValues: Record<string, number[]> = {};\n    barData.forEach(point => {\n      if (!categoryToValues[point.name]) {\n        categoryToValues[point.name] = [];\n      }\n      point.series.forEach(seriesPoint => {\n        categoryToValues[point.name].push(seriesPoint.data);\n      });\n    });\n    lineData.forEach(series => {\n      series.data.forEach(point => {\n        if (!categoryToValues[point.x]) {\n          categoryToValues[point.x] = [];\n        }\n        categoryToValues[point.x].push(point.y);\n      });\n    });\n    return categoryToValues;\n  };\n\n  const { barData, lineData } = _prepareChartData();\n  const _xAxisType: XAxisTypes = getTypeOfAxis(barData[0].name, true) as XAxisTypes;\n  const { barLegends, lineLegends, xAxisLabels, datasetForBars } = _createDataSetOfGVBC(barData, lineData);\n  _barLegends = barLegends;\n  _lineLegends = lineLegends;\n  _xAxisLabels = xAxisLabels;\n  _datasetForBars = datasetForBars;\n  const legendBars: JSXElement = _getLegendData();\n  _adjustProps();\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any -- Add commentMore actions\n  function _getMinMaxOfYAxis(datasetForBars: any, yAxisType?: YAxisType, useSecondaryYScale?: boolean) {\n    const values: number[] = [];\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    datasetForBars.forEach((data: any) => {\n      data.groupSeries.forEach((point: GVBarChartSeriesPoint) => {\n        if (!useSecondaryYScale === !point.useSecondaryYScale) {\n          values.push(point.data);\n        }\n      });\n    });\n\n    return { startValue: d3Min(values)!, endValue: d3Max(values)! };\n  }\n\n  function _getDomainNRangeValues(\n    points: GroupedVerticalBarChartData[],\n    margins: Margins,\n    width: number,\n    chartType: ChartTypes,\n    isRTL: boolean,\n    xAxisType: XAxisTypes,\n    barWidth: number,\n    tickValues: Date[] | number[] | undefined,\n    shiftX: number,\n  ) {\n    let domainNRangeValue: IDomainNRange;\n    if (xAxisType === XAxisTypes.NumericAxis || xAxisType === XAxisTypes.DateAxis) {\n      domainNRangeValue = { dStartValue: 0, dEndValue: 0, rStartValue: 0, rEndValue: 0 };\n    } else {\n      domainNRangeValue = domainRangeOfXStringAxis(margins, width, isRTL);\n    }\n    return domainNRangeValue;\n  }\n\n  // The maxOfYVal prop is only required for the primary y-axis, so yMax should be calculated\n  // using only the data points associated with the primary y-axis.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const yMax = _getMinMaxOfYAxis(_datasetForBars).endValue;\n  _yMax = Math.max(yMax, props.yMaxValue || 0);\n\n  const calloutProps: ChartPopoverProps = {\n    positioning: { target: popoverTarget },\n    isPopoverOpen,\n    color,\n    legend: calloutLegend,\n    XValue: xCalloutValue,\n    YValue: yCalloutValue ? yCalloutValue : dataForHoverCard,\n    YValueHover: yValueHover,\n    hoverXValue,\n    culture: props.culture,\n    isCartesian: true,\n    isCalloutForStack: props.isCalloutForStack,\n    ...props.calloutProps,\n    ...getAccessibleDataObject(callOutAccessibilityData, 'text', false),\n  };\n  const tickParams = {\n    tickValues: props.tickValues!,\n    tickFormat: props.tickFormat!,\n  };\n\n  const _getGraphData = (\n    xScale: StringScale | NumericScale,\n    yScalePrimary: ScaleLinear<number, number>,\n    containerHeight: number,\n    containerWidth: number,\n    xElement?: SVGElement | null,\n    yAxisElement?: SVGElement | null,\n    yScaleSecondary?: ScaleLinear<number, number>,\n  ) => {\n    const xScale0 = _createX0Scale(containerWidth);\n\n    // Setting the bar width here is safe because there are no dependencies earlier in the code\n    // that rely on the width of bars in vertical bar charts with string x-axis.\n    _barWidth = getBarWidth(\n      props.barWidth,\n      props.maxBarWidth,\n      calcBandwidth(xScale0.bandwidth(), _barLegends.length, X1_INNER_PADDING),\n    );\n    _groupWidth = calcRequiredWidth(_barWidth, _barLegends.length, X1_INNER_PADDING);\n\n    const xScale1 = _createX1Scale();\n    const allGroupsBars: JSXElement[] = [];\n    _datasetForBars.forEach((singleSet: GVSingleDataPoint) => {\n      allGroupsBars.push(\n        _buildGraph(singleSet, xScale0, xScale1, yScalePrimary, yScaleSecondary, containerHeight, xElement!),\n      );\n    });\n    _groupedVerticalBarGraph = allGroupsBars;\n  };\n\n  const _getMargins = (margins: Margins) => {\n    _margins = margins;\n  };\n\n  const onBarHover = (\n    pointData: GVBarChartSeriesPoint,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    groupData: any,\n    mouseEvent: React.MouseEvent<SVGElement>,\n  ): void => {\n    mouseEvent.persist();\n    if (_calloutAnchorPoint !== pointData) {\n      _calloutAnchorPoint = pointData;\n      _showCallout(mouseEvent.currentTarget, pointData, groupData);\n    }\n  };\n\n  const _onBarLeave = (): void => {\n    /**/\n  };\n\n  const _handleChartMouseLeave = (): void => {\n    _calloutAnchorPoint = null;\n    setPopoverOpen(false);\n  };\n\n  const onBarFocus = (\n    focusEvent: React.FocusEvent<SVGRectElement, Element>,\n    pointData: GVBarChartSeriesPoint,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    groupData: any,\n  ): void => {\n    _showCallout(focusEvent.currentTarget, pointData, groupData);\n  };\n\n  const _buildGraph = (\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    singleSet: any,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    xScale0: any,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    xScale1: any,\n    yScalePrimary: ScaleLinear<number, number>,\n    yScaleSecondary: ScaleLinear<number, number> | undefined,\n    containerHeight: number,\n    xElement: SVGElement,\n    // eslint-disable-next-line @typescript-eslint/no-deprecated\n  ): JSXElement => {\n    // eslint-disable-next-line @typescript-eslint/no-deprecated\n    const singleGroup: JSXElement[] = [];\n    // eslint-disable-next-line @typescript-eslint/no-deprecated\n    const barLabelsForGroup: JSXElement[] = [];\n\n    // Get the actual legends present at this x-axis point\n    const presentLegends = _barLegends.filter(key => key in singleSet);\n    const effectiveGroupWidth = calcRequiredWidth(_barWidth, presentLegends.length, X1_INNER_PADDING);\n\n    // For stacked bars, center the single bar group in the available space\n    // Instead of using the global legend position, use the local position within present legends\n    const localScale = d3ScaleBand()\n      .domain(presentLegends)\n      .range(_useRtl ? [effectiveGroupWidth, 0] : [0, effectiveGroupWidth])\n      .paddingInner(X1_INNER_PADDING);\n    _barLegends.forEach((legendTitle: string, legendIndex: number) => {\n      const barPoints = singleSet[legendTitle];\n      if (barPoints) {\n        const yBarScale = barPoints[0].useSecondaryYScale && yScaleSecondary ? yScaleSecondary : yScalePrimary;\n\n        const xPoint = (localScale(legendTitle) ?? 0) + (localScale.bandwidth() - _barWidth) / 2;\n        const isLegendActive = _legendHighlighted(legendTitle) || _noLegendHighlighted();\n        const barOpacity = isLegendActive ? '' : '0.1';\n\n        let barTotalValue = 0;\n        const yBaseline = yBarScale(Y_ORIGIN);\n        let yPositiveStart = yBaseline;\n        let yNegativeStart = yBaseline;\n        let yPoint = Y_ORIGIN;\n\n        barPoints.forEach((pointData: GVBarChartSeriesPoint, pointIndex: number) => {\n          if (!pointData.data) {\n            // Not rendering data with 0.\n            return;\n          }\n          const barGap = (VERTICAL_BAR_GAP / 2) * (pointIndex > 0 ? 2 : 0);\n          const height = Math.max(yBarScale(Y_ORIGIN) - yBarScale(Math.abs(pointData.data)), MIN_BAR_HEIGHT);\n          const pointColor = pointData.color; // Use the color of the current point\n\n          if (pointData.data >= Y_ORIGIN) {\n            yPositiveStart -= height + barGap;\n            yPoint = yPositiveStart;\n          } else {\n            yPoint = yNegativeStart + barGap;\n            yNegativeStart = yPoint + height;\n          }\n\n          singleGroup.push(\n            <rect\n              key={`${singleSet.indexNum}-${legendIndex}-${pointIndex}`}\n              className={classes.opacityChangeOnHover}\n              height={height}\n              width={_barWidth}\n              x={xPoint}\n              y={yPoint}\n              opacity={barOpacity}\n              fill={pointColor}\n              rx={props.roundCorners ? 3 : 0}\n              onMouseOver={event => onBarHover(pointData, singleSet, event)}\n              onMouseMove={event => onBarHover(pointData, singleSet, event)}\n              onMouseOut={_onBarLeave}\n              onFocus={event => onBarFocus(event, pointData, singleSet)}\n              onBlur={_onBarLeave}\n              onClick={pointData.onClick}\n              aria-label={getAriaLabel(pointData, singleSet.xAxisPoint)}\n              tabIndex={_legendHighlighted(pointData.legend) || _noLegendHighlighted() ? 0 : undefined}\n              role=\"img\"\n            />,\n          );\n\n          barTotalValue += pointData.data;\n        });\n        if (barTotalValue !== null && !props.hideLabels && Math.ceil(_barWidth) >= 16 && isLegendActive) {\n          barLabelsForGroup.push(\n            <text\n              key={`${singleSet.indexNum}-${legendIndex}`}\n              x={xPoint + _barWidth / 2}\n              y={barTotalValue >= Y_ORIGIN ? yPositiveStart - 6 : yNegativeStart + 12}\n              textAnchor=\"middle\"\n              className={classes.barLabel}\n              aria-hidden={true}\n              style={{ direction: 'ltr', unicodeBidi: 'isolate' }}\n            >\n              {typeof props.yAxisTickFormat === 'function'\n                ? props.yAxisTickFormat(barTotalValue)\n                : formatScientificLimitWidth(barTotalValue)}\n            </text>,\n          );\n        }\n      }\n    });\n    // Used to display tooltip at x axis labels.\n    if (!props.wrapXAxisLables && props.showXAxisLablesTooltip) {\n      const xAxisElement = d3Select(xElement).call(xScale0);\n      try {\n        document.getElementById(_tooltipId) && document.getElementById(_tooltipId)!.remove();\n        // eslint-disable-next-line no-empty\n      } catch (e) {}\n      const tooltipProps = {\n        tooltipCls: classes.tooltip!,\n        id: _tooltipId,\n        axis: xAxisElement,\n      };\n      xAxisElement && tooltipOfAxislabels(tooltipProps);\n    }\n    return (\n      <g\n        key={singleSet.indexNum}\n        transform={`translate(${xScale0(singleSet.xAxisPoint) + (xScale0.bandwidth() - effectiveGroupWidth) / 2}, 0)`}\n      >\n        {singleGroup}\n        {barLabelsForGroup}\n      </g>\n    );\n  };\n\n  // For grouped vertical bar chart, First need to define total scale (from start to end)\n  // From that need to define scale for single group of bars - done by createX1Scale\n  const _createX0Scale = (containerWidth: number) => {\n    const x0Axis = d3ScaleBand()\n      .domain(xAxisLabels)\n      .range(\n        _useRtl\n          ? [containerWidth! - _margins.right! - _domainMargin, _margins.left! + _domainMargin]\n          : [_margins.left! + _domainMargin, containerWidth! - _margins.right! - _domainMargin],\n      )\n      .paddingInner(_xAxisInnerPadding)\n      .paddingOuter(_xAxisOuterPadding);\n    return x0Axis;\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const _createX1Scale = (): any => {\n    return (\n      d3ScaleBand()\n        .domain(_barLegends)\n        // When there is only one group, xScale0 adds padding around it,\n        // causing the bandwidth to become smaller than the actual group width.\n        // So to render bars in the group correctly, use groupWidth instead of the generated scale bandwidth.\n        .range(_useRtl ? [_groupWidth, 0] : [0, _groupWidth])\n        .paddingInner(X1_INNER_PADDING)\n    );\n  };\n\n  const _onLegendHover = (legendTitle: string): void => {\n    setActiveLegend(legendTitle);\n  };\n\n  const _onLegendLeave = (): void => {\n    setActiveLegend('');\n  };\n\n  const _getAxisData = React.useCallback(\n    (yAxisData: IAxisData) => {\n      if (yAxisData && yAxisData.yAxisDomainValues.length) {\n        const { yAxisDomainValues: domainValue } = yAxisData;\n        _yMax = Math.max(domainValue[domainValue.length - 1], props.yMaxValue || 0);\n      }\n    },\n    [props.yMaxValue],\n  );\n\n  /**\n   * This function checks if the given legend is highlighted or not.\n   * A legend can be highlighted in 2 ways:\n   * 1. selection: if the user clicks on it\n   * 2. hovering: if there is no selected legend and the user hovers over it\n   */\n  const _legendHighlighted = (legendTitle: string) => {\n    return _getHighlightedLegend().includes(legendTitle!);\n  };\n\n  /**\n   * This function checks if none of the legends is selected or hovered.\n   */\n  const _noLegendHighlighted = () => {\n    return _getHighlightedLegend().length === 0;\n  };\n\n  const _getHighlightedLegend = () => {\n    return selectedLegends.length > 0 ? selectedLegends : activeLegend ? [activeLegend] : [];\n  };\n\n  const getAriaLabel = (point: GVBarChartSeriesPoint, xAxisPoint: string): string => {\n    const xValue = point.xAxisCalloutData || xAxisPoint;\n    const legend = point.legend;\n    const yValue = point.yAxisCalloutData || point.data;\n    return point.callOutAccessibilityData?.ariaLabel || `${xValue}. ${legend}, ${yValue}.`;\n  };\n\n  const _getDomainMargins = (containerWidth: number): Margins => {\n    /** Total width available to render the bars */\n    const totalWidth = calcTotalWidth(containerWidth, _margins, MIN_DOMAIN_MARGIN);\n\n    if (_xAxisType === XAxisTypes.StringAxis) {\n      if (isScalePaddingDefined(props.xAxisOuterPadding)) {\n        // Setting the domain margin for string x-axis to 0 because the xAxisOuterPadding prop is now available\n        // to adjust the space before the first group and after the last group.\n        _domainMargin = 0;\n      } else if (props.barWidth !== 'auto') {\n        // Update the bar width so that when CartesianChart rerenders,\n        // the following calculations don't use the previous bar width.\n        _barWidth = getBarWidth(props.barWidth, props.maxBarWidth);\n        const groupWidth = calcRequiredWidth(_barWidth, _barLegends.length, X1_INNER_PADDING);\n        /** Total width required to render the groups. Directly proportional to group width */\n        const reqWidth = calcRequiredWidth(groupWidth, _xAxisLabels.length, _xAxisInnerPadding);\n\n        if (totalWidth >= reqWidth) {\n          // Center align the chart by setting equal left and right margins for domain\n          _domainMargin = MIN_DOMAIN_MARGIN + (totalWidth - reqWidth) / 2;\n        }\n      } else if (props.mode === 'plotly' && xAxisLabels.length > 1) {\n        // Calculate the remaining width after rendering groups at their maximum allowable width\n        const groupBandwidth = calcBandwidth(totalWidth, _xAxisLabels.length, _xAxisInnerPadding);\n        const barBandwidth = calcBandwidth(groupBandwidth, _barLegends.length, X1_INNER_PADDING);\n        const barWidth = getBarWidth(props.barWidth, props.maxBarWidth, barBandwidth);\n        const groupWidth = calcRequiredWidth(barWidth, _barLegends.length, X1_INNER_PADDING);\n        let reqWidth = calcRequiredWidth(groupWidth, _xAxisLabels.length, _xAxisInnerPadding);\n        const margin1 = (totalWidth - reqWidth) / 2;\n\n        let margin2 = Number.POSITIVE_INFINITY;\n        if (!props.hideTickOverlap) {\n          // Calculate the remaining width after accounting for the space required to render x-axis labels\n          const step = calculateLongestLabelWidth(_xAxisLabels) + 20;\n          reqWidth = (_xAxisLabels.length - _xAxisInnerPadding) * step;\n          margin2 = (totalWidth - reqWidth) / 2;\n        }\n\n        _domainMargin = MIN_DOMAIN_MARGIN + Math.max(0, Math.min(margin1, margin2));\n      }\n    }\n\n    return {\n      ..._margins,\n      left: _margins.left! + _domainMargin,\n      right: _margins.right! + _domainMargin,\n    };\n  };\n\n  const _isChartEmpty = (_barData: GroupedVerticalBarChartData[], _lineData: GVBCLineSeries[]): boolean => {\n    return !(\n      (_barData &&\n        _barData.length > 0 &&\n        _barData.filter((item: GroupedVerticalBarChartData) => item.series.length).length > 0) ||\n      (_lineData && _lineData.length > 0 && _lineData.some(series => series.data.length > 0))\n    );\n  };\n\n  const _getChartTitle = (): string => {\n    return (\n      (props.chartTitle ? `${props.chartTitle}. ` : '') +\n      `Vertical bar chart with ${_barLegends.length} grouped bar series` +\n      (_lineLegends.length > 0 ? ` and ${_lineLegends.length} line series. ` : '. ')\n    );\n  };\n\n  const _createLines = (\n    _lineData: GVBCLineSeries[],\n    xScale: StringScale,\n    yScalePrimary: NumericScale,\n    yScaleSecondary?: NumericScale,\n  ): React.ReactNode => {\n    const lineBorders: React.ReactNode[] = [];\n    const lines: React.ReactNode[] = [];\n    const dots: React.ReactNode[] = [];\n\n    const scaleLineX = (x: string) => xScale(x)! + xScale.bandwidth() / 2;\n\n    _lineData.forEach((series, seriesIdx) => {\n      const lineBorderGroup: React.ReactNode[] = [];\n      const lineGroup: React.ReactNode[] = [];\n      const dotGroup: React.ReactNode[] = [];\n      const lineBorderWidth = series.lineOptions?.lineBorderWidth\n        ? Number.parseFloat(series.lineOptions.lineBorderWidth.toString())\n        : 0;\n      const yScale = series.useSecondaryYScale && yScaleSecondary ? yScaleSecondary : yScalePrimary;\n      const shouldHighlight = _legendHighlighted(series.legend) || _noLegendHighlighted();\n\n      series.data.forEach((point, pointIdx) => {\n        const x2 = scaleLineX(point.x);\n        const y2 = yScale(point.y);\n\n        if (pointIdx > 0) {\n          const x1 = scaleLineX(series.data[pointIdx - 1].x);\n          const y1 = yScale(series.data[pointIdx - 1].y);\n\n          if (lineBorderWidth > 0) {\n            lineBorderGroup.push(\n              <line\n                key={`lineBorder-${seriesIdx}-${pointIdx}`}\n                x1={x1}\n                y1={y1}\n                x2={x2}\n                y2={y2}\n                fill=\"transparent\"\n                stroke={series.lineOptions?.lineBorderColor ?? tokens.colorNeutralBackground1}\n                strokeWidth={3 + lineBorderWidth * 2}\n                strokeLinecap=\"round\"\n                opacity={shouldHighlight ? 1 : 0.1}\n              />,\n            );\n          }\n\n          lineGroup.push(\n            <line\n              key={`line-${seriesIdx}-${pointIdx}`}\n              x1={x1}\n              y1={y1}\n              x2={x2}\n              y2={y2}\n              stroke={series.color}\n              strokeWidth={series.lineOptions?.strokeWidth ?? 3}\n              strokeLinecap={series.lineOptions?.strokeLinecap ?? 'round'}\n              strokeDasharray={series.lineOptions?.strokeDasharray}\n              opacity={shouldHighlight ? 1 : 0.1}\n              onMouseOver={e => _onLineHover(e, series, seriesIdx, pointIdx, scaleLineX)}\n              onMouseLeave={_onBarLeave}\n            />,\n          );\n        }\n\n        const dotId = _getDotId(seriesIdx, pointIdx);\n        const isLinePointActive = activeLinePoint === point.x || activeLinePoint === dotId;\n\n        dotGroup.push(\n          <circle\n            key={dotId}\n            id={dotId}\n            cx={x2}\n            cy={y2}\n            r={shouldHighlight && isLinePointActive ? 8 : 0.3}\n            fill={tokens.colorNeutralBackground1}\n            stroke={series.color}\n            strokeWidth={3}\n            opacity={shouldHighlight ? 1 : 0.1}\n            onMouseOver={e => _onLineHover(e, series, seriesIdx, pointIdx, scaleLineX)}\n            onMouseLeave={_onBarLeave}\n            data-is-focusable={shouldHighlight}\n            onFocus={e => _onLineFocus(e, series, seriesIdx, pointIdx)}\n            onBlur={_onBarLeave}\n            role=\"img\"\n            aria-label={getAriaLabel(\n              {\n                xAxisCalloutData: point.xAxisCalloutData,\n                legend: series.legend,\n                yAxisCalloutData: point.yAxisCalloutData,\n                data: point.y,\n                callOutAccessibilityData: point.callOutAccessibilityData,\n              } as GVBarChartSeriesPoint,\n              point.x,\n            )}\n          />,\n        );\n      });\n\n      lineBorders.push(<g key={`lineBorderGroup-${seriesIdx}`}>{lineBorderGroup}</g>);\n      lines.push(<g key={`lineGroup-${seriesIdx}`}>{lineGroup}</g>);\n      dots.push(<g key={`dotGroup-${seriesIdx}`}>{dotGroup}</g>);\n    });\n\n    return dots.length > 0 ? (\n      <g>\n        {lineBorders.length > 0 ? <g>{lineBorders}</g> : null}\n        {lines.length > 0 ? <g>{lines}</g> : null}\n        <g>{dots}</g>\n      </g>\n    ) : null;\n  };\n\n  const _onLineHover = (\n    event: React.MouseEvent<SVGElement>,\n    series: GVBCLineSeries,\n    seriesIdx: number,\n    pointIdx: number,\n    scaleLineX: (x: string) => number,\n  ) => {\n    const pointerX = d3Pointer(event, _rectRef.current)[0];\n\n    let closestPointIdx = pointIdx;\n    if (pointIdx > 0) {\n      const currPointPos = scaleLineX(series.data[pointIdx].x);\n      const prevPointPos = scaleLineX(series.data[pointIdx - 1].x);\n\n      if (Math.abs(prevPointPos - pointerX) < Math.abs(currPointPos - pointerX)) {\n        closestPointIdx = pointIdx - 1;\n      }\n    }\n\n    event.persist();\n    _showCalloutForLines(event.currentTarget, series, seriesIdx, closestPointIdx);\n  };\n\n  const _onLineFocus = (\n    event: React.FocusEvent<SVGElement>,\n    series: GVBCLineSeries,\n    seriesIdx: number,\n    pointIdx: number,\n  ) => {\n    _showCalloutForLines(event.currentTarget, series, seriesIdx, pointIdx);\n  };\n\n  const _showCalloutForLines = (target: SVGElement, series: GVBCLineSeries, seriesIdx: number, pointIdx: number) => {\n    const point = series.data[pointIdx];\n    const pointData = {\n      ...point,\n      legend: series.legend,\n      color: series.color!,\n      key: series.legend,\n      data: point.y,\n      yAxisCalloutData: point.yAxisCalloutData as string | undefined,\n    };\n    const groupData = _datasetForBars.find((singleSet: { xAxisPoint: string }) => singleSet.xAxisPoint === point.x);\n\n    _showCallout(target, pointData, groupData, _getDotId(seriesIdx, pointIdx));\n  };\n\n  const _showCallout = (\n    target: SVGElement,\n    pointData: GVBarChartSeriesPoint,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    groupData: any,\n    _activeLinePoint = '',\n  ) => {\n    setPopoverTarget(target);\n    setPopoverOpen(_noLegendHighlighted() || _legendHighlighted(pointData.legend));\n    setCalloutLegend(pointData.legend);\n    setDataForHoverCard(pointData.data);\n    setColor(pointData.color);\n    setXCalloutValue(pointData.xAxisCalloutData ?? groupData.xAxisPoint);\n    setYCalloutValue(pointData.yAxisCalloutData);\n    setCallOutAccessibilityData(\n      props.isCalloutForStack ? groupData.stackCallOutAccessibilityData : pointData.callOutAccessibilityData,\n    );\n    setYValueHover(\n      groupData.groupSeries.filter((item: YValueHover) => _noLegendHighlighted() || _legendHighlighted(item.legend!)),\n    );\n    setHoverXValue(pointData.xAxisCalloutData ?? groupData.xAxisPoint);\n    setActiveLinePoint(props.isCalloutForStack ? groupData.xAxisPoint : _activeLinePoint);\n  };\n\n  const _getDotId = (seriesIdx: number, pointIdx: number) => {\n    return _uniqDotId + `-${seriesIdx}-${pointIdx}`;\n  };\n\n  return !_isChartEmpty(barData, lineData) ? (\n    <CartesianChart\n      {...props}\n      chartTitle={_getChartTitle()}\n      points={_datasetForBars}\n      chartType={ChartTypes.GroupedVerticalBarChart}\n      getDomainNRangeValues={_getDomainNRangeValues}\n      getMinMaxOfYAxis={_getMinMaxOfYAxis}\n      createStringYAxis={createStringYAxis}\n      calloutProps={calloutProps}\n      legendBars={legendBars}\n      xAxisType={_xAxisType}\n      createYAxis={createNumericYAxis}\n      datasetForXAxisDomain={_xAxisLabels}\n      tickParams={tickParams}\n      tickPadding={props.tickPadding || 5}\n      maxOfYVal={_yMax}\n      getmargins={_getMargins}\n      getGraphData={_getGraphData}\n      getAxisData={_getAxisData}\n      onChartMouseLeave={_handleChartMouseLeave}\n      getDomainMargins={_getDomainMargins}\n      {...(_xAxisType === XAxisTypes.StringAxis && {\n        xAxisInnerPadding: _xAxisInnerPadding,\n        xAxisOuterPadding: _xAxisOuterPadding,\n      })}\n      barwidth={_barWidth}\n      componentRef={cartesianChartRef}\n      /* eslint-disable react/jsx-no-bind */\n      children={(childProps: ChildProps) => {\n        return (\n          <>\n            <rect ref={_rectRef} width=\"100%\" height=\"100%\" fill=\"transparent\" style={{ pointerEvents: 'none' }} />\n            <g>{_groupedVerticalBarGraph}</g>\n            {_createLines(lineData, childProps.xScale, childProps.yScalePrimary, childProps.yScaleSecondary)}\n          </>\n        );\n      }}\n    />\n  ) : (\n    <div id={_emptyChartId} role={'alert'} style={{ opacity: '0' }} aria-label={'Graph has no data to display'} />\n  );\n});\nGroupedVerticalBarChart.displayName = 'GroupedVerticalBarChart';\n"],"names":["React","useGroupedVerticalBarChartStyles_unstable","select","d3Select","pointer","d3Pointer","max","d3Max","min","d3Min","scaleBand","d3ScaleBand","useId","ChartTypes","getAccessibleDataObject","tooltipOfAxislabels","XAxisTypes","getTypeOfAxis","formatScientificLimitWidth","getScalePadding","getBarWidth","isScalePaddingDefined","createNumericYAxis","domainRangeOfXStringAxis","createStringYAxis","getNextColor","areArraysEqual","calculateLongestLabelWidth","useRtl","calcRequiredWidth","calcTotalWidth","calcBandwidth","calcTotalBandUnits","sortAxisCategories","CartesianChart","Legends","getColorFromToken","toImage","tokens","MIN_DOMAIN_MARGIN","X1_INNER_PADDING","VERTICAL_BAR_GAP","MIN_BAR_HEIGHT","GroupedVerticalBarChart","forwardRef","_props","forwardedRef","props","xAxisCategoryOrder","maxBarWidth","_tooltipId","_emptyChartId","_useRtl","_domainMargin","_xAxisLabels","_datasetForBars","_margins","top","right","bottom","left","_groupedVerticalBarGraph","_yMax","_calloutAnchorPoint","_barWidth","_groupWidth","_xAxisInnerPadding","_xAxisOuterPadding","_barLegends","_lineLegends","_legendColorMap","cartesianChartRef","useRef","Y_ORIGIN","_legendsRef","_rectRef","_uniqDotId","color","setColor","useState","dataForHoverCard","setDataForHoverCard","selectedLegends","setSelectedLegends","legendProps","xCalloutValue","setXCalloutValue","yCalloutValue","setYCalloutValue","yValueHover","setYValueHover","hoverXValue","setHoverXValue","calloutLegend","setCalloutLegend","activeLegend","setActiveLegend","callOutAccessibilityData","setCallOutAccessibilityData","undefined","popoverTarget","setPopoverTarget","isPopoverOpen","setPopoverOpen","activeLinePoint","setActiveLinePoint","classes","useEffect","useImperativeHandle","componentRef","chartContainer","current","opts","toSVG","_adjustProps","barWidth","xAxisInnerPadding","length","xAxisOuterPadding","_createDataset","barData","lineData","datasetForBars","linePointsByX","visitedX","Set","forEach","series","data","point","x","push","legend","y","useSecondaryYScale","index","singleDatasetPointForBars","legendToBarPoint","seriesPoint","xAxisPoint","name","indexNum","groupSeries","Object","values","stackCallOutAccessibilityData","add","keys","xPoint","has","_createDataSetOfGVBC","barLegends","lineLegends","map","xAxisLabels","_getOrderedXAxisLabels","Array","from","onLegendSelectionChange","event","currentLegend","canSelectMultipleLegends","slice","onChange","_getLegendData","actions","addLegendButton","legendTitle","isLineLegendInBarChart","title","hoverAction","_handleChartMouseLeave","_onLegendHover","onMouseOutAction","_onLegendLeave","legends","enabledWrapLines","enabledLegendsWrapLines","overflowText","legendsOverflowText","legendRef","_processDataV2","dataV2","barPointsByX","type","key","xAxisCalloutData","yAxisCalloutData","onClick","_prepareChartData","isArray","colorIndex","startColor","endColor","lineColor","_xAxisType","StringAxis","_mapCategoryToValues","categoryToValues","legendBars","_getMinMaxOfYAxis","yAxisType","startValue","endValue","_getDomainNRangeValues","points","margins","width","chartType","isRTL","xAxisType","tickValues","shiftX","domainNRangeValue","NumericAxis","DateAxis","dStartValue","dEndValue","rStartValue","rEndValue","yMax","Math","yMaxValue","calloutProps","positioning","target","XValue","YValue","YValueHover","culture","isCartesian","isCalloutForStack","tickParams","tickFormat","_getGraphData","xScale","yScalePrimary","containerHeight","containerWidth","xElement","yAxisElement","yScaleSecondary","xScale0","_createX0Scale","bandwidth","xScale1","_createX1Scale","allGroupsBars","singleSet","_buildGraph","_getMargins","onBarHover","pointData","groupData","mouseEvent","persist","_showCallout","currentTarget","_onBarLeave","onBarFocus","focusEvent","singleGroup","barLabelsForGroup","presentLegends","filter","effectiveGroupWidth","localScale","domain","range","paddingInner","legendIndex","barPoints","yBarScale","isLegendActive","_legendHighlighted","_noLegendHighlighted","barOpacity","barTotalValue","yBaseline","yPositiveStart","yNegativeStart","yPoint","pointIndex","barGap","height","abs","pointColor","rect","className","opacityChangeOnHover","opacity","fill","rx","roundCorners","onMouseOver","onMouseMove","onMouseOut","onFocus","onBlur","aria-label","getAriaLabel","tabIndex","role","hideLabels","ceil","text","textAnchor","barLabel","aria-hidden","style","direction","unicodeBidi","yAxisTickFormat","wrapXAxisLables","showXAxisLablesTooltip","xAxisElement","call","document","getElementById","remove","e","tooltipProps","tooltipCls","tooltip","id","axis","g","transform","x0Axis","paddingOuter","_getAxisData","useCallback","yAxisData","yAxisDomainValues","domainValue","_getHighlightedLegend","includes","xValue","yValue","ariaLabel","_getDomainMargins","totalWidth","groupWidth","reqWidth","mode","groupBandwidth","barBandwidth","margin1","margin2","Number","POSITIVE_INFINITY","hideTickOverlap","step","_isChartEmpty","_barData","_lineData","item","some","_getChartTitle","chartTitle","_createLines","lineBorders","lines","dots","scaleLineX","seriesIdx","lineBorderGroup","lineGroup","dotGroup","lineBorderWidth","lineOptions","parseFloat","toString","yScale","shouldHighlight","pointIdx","x2","y2","x1","y1","line","stroke","lineBorderColor","colorNeutralBackground1","strokeWidth","strokeLinecap","strokeDasharray","_onLineHover","onMouseLeave","dotId","_getDotId","isLinePointActive","circle","cx","cy","r","data-is-focusable","_onLineFocus","pointerX","closestPointIdx","currPointPos","prevPointPos","_showCalloutForLines","find","_activeLinePoint","getDomainNRangeValues","getMinMaxOfYAxis","createYAxis","datasetForXAxisDomain","tickPadding","maxOfYVal","getmargins","getGraphData","getAxisData","onChartMouseLeave","getDomainMargins","barwidth","children","childProps","ref","pointerEvents","div","displayName"],"mappings":"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"}