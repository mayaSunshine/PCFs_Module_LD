'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "LabelLink", {
    enumerable: true,
    get: function() {
        return LabelLink;
    }
});
const _interop_require_wildcard = require("@swc/helpers/_/_interop_require_wildcard");
const _react = /*#__PURE__*/ _interop_require_wildcard._(require("react"));
const _Textbox = require("./Textbox");
const _colors = require("../../../utilities/colors");
const _reacttheme = require("@fluentui/react-theme");
const LabelLink = (props)=>{
    const gRef = _react.useRef(null);
    const [showCard, setShowCard] = _react.useState(false);
    const onClick = ()=>setShowCard(true);
    let callout = null;
    if (showCard) {
        const cards = props.labelDef.aggregatedIdx.map((i)=>props.lineDefs[i].onRenderCard).filter((c)=>!!c);
        if (cards.length > 0) {
            callout = null;
        // TODO - need to replace callout with popover
        /*callout = {
        /* <Callout
          target={gRef.current}
          // eslint-disable-next-line react/jsx-no-bind
          onDismiss={onDismiss}
          setInitialFocus={true}
          role="dialog"
        >
          <FocusZone isCircularNavigation={true} direction={FocusZoneDirection.vertical}>
            <List<() => React.ReactNode>
              items={cards}
              // eslint-disable-next-line react/jsx-no-bind
              onRenderCell={onRenderCell}
            />
          </FocusZone>
        </Callout>
      };*/ }
    }
    let text;
    const fill = props.textColor ? (0, _colors.getColorFromToken)(props.textColor, false) : _reacttheme.tokens.colorNeutralForeground1;
    if (props.labelDef.aggregatedIdx.length === 1) {
        text = props.lineDefs[props.labelDef.aggregatedIdx[0]].event;
    } else {
        text = props.mergedLabel(props.labelDef.aggregatedIdx.length);
    }
    return /*#__PURE__*/ _react.createElement(_react.Fragment, null, /*#__PURE__*/ _react.createElement("g", {
        ref: gRef,
        onClick: onClick,
        "data-is-focusable": false,
        style: {
            cursor: 'pointer'
        },
        role: "button"
    }, /*#__PURE__*/ _react.createElement(_Textbox.Textbox, {
        text: text,
        x: props.labelDef.x,
        y: props.textY,
        width: props.textWidth,
        lineHeight: props.textLineHeight,
        textAnchor: props.labelDef.anchor,
        fontSize: props.textFontSize,
        fill: fill
    })), callout);
};
