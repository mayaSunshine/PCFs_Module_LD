'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    heatmapChartClassNames: function() {
        return heatmapChartClassNames;
    },
    useHeatMapChartStyles: function() {
        return useHeatMapChartStyles;
    }
});
const _react = require("@griffel/react");
const _reacttheme = require("@fluentui/react-theme");
const heatmapChartClassNames = {
    root: 'fui-hmc__root',
    text: 'fui-hmc__text',
    calloutContentRoot: 'fui-hmc__calloutContentRoot',
    xAxis: '',
    yAxis: '',
    legendContainer: '',
    hover: '',
    descriptionMessage: '',
    tooltip: '',
    axisTitle: '',
    chartTitle: '',
    opacityChangeOnHover: '',
    shapeStyles: '',
    chartWrapper: '',
    svgTooltip: '',
    chart: '',
    axisAnnotation: ''
};
const useStyles = (0, _react.makeStyles)({
    root: {},
    text: {
        ..._reacttheme.typographyStyles.body1Strong,
        pointerEvents: 'none'
    },
    calloutContentRoot: {
        maxWidth: '238px'
    }
});
const useHeatMapChartStyles = (props)=>{
    const baseStyles = useStyles();
    return {
        root: (0, _react.mergeClasses)(heatmapChartClassNames.root, baseStyles.root /*, props.styles?.root*/ ),
        text: (0, _react.mergeClasses)(heatmapChartClassNames.text, baseStyles.text /*, props.styles?.text*/ ),
        calloutContentRoot: (0, _react.mergeClasses)(heatmapChartClassNames.calloutContentRoot, baseStyles.calloutContentRoot /*, props.styles?.calloutContentRoot*/ )
    };
};
