'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "Arc", {
    enumerable: true,
    get: function() {
        return Arc;
    }
});
const _interop_require_wildcard = require("@swc/helpers/_/_interop_require_wildcard");
const _react = /*#__PURE__*/ _interop_require_wildcard._(require("react"));
const _d3shape = require("d3-shape");
const _useArcStylesstyles = require("./useArcStyles.styles");
const _d3format = require("d3-format");
const _index = require("../../../utilities/index");
const Arc = /*#__PURE__*/ _react.forwardRef((props, forwardedRef)=>{
    var _props_data, _props_activeArc, _props_data1;
    const arc = (0, _d3shape.arc)();
    const currentRef = /*#__PURE__*/ _react.createRef();
    const _isRTL = (0, _index.useRtl)();
    const classes = (0, _useArcStylesstyles.useArcStyles)(props);
    _react.useEffect(()=>{
        _updateChart(props);
    }, [
        props
    ]);
    function _onFocus(data, id, event, targetElement) {
        props.onFocusCallback(data, id, event, currentRef.current, targetElement);
    }
    function _hoverOn(data, mouseEvent, targetElement) {
        mouseEvent.persist();
        props.hoverOnCallback(data, mouseEvent, targetElement);
    }
    function _hoverOff() {
        props.hoverLeaveCallback();
    }
    function _onBlur() {
        props.onBlurCallback();
    }
    function _getAriaLabel() {
        var _point_callOutAccessibilityData;
        const point = props.data.data;
        const legend = point.xAxisCalloutData || point.legend;
        const yValue = point.yAxisCalloutData || point.data || 0;
        return ((_point_callOutAccessibilityData = point.callOutAccessibilityData) === null || _point_callOutAccessibilityData === void 0 ? void 0 : _point_callOutAccessibilityData.ariaLabel) || (legend ? `${legend}, ` : '') + `${yValue}.`;
    }
    function _shouldHighlightArc(legend) {
        const { activeArc } = props;
        // If no activeArc is provided, highlight all arcs. Otherwise, only highlight the arcs that are active.
        return !activeArc || activeArc.length === 0 || legend === undefined || activeArc.includes(legend);
    }
    function _renderArcLabel(className) {
        const { data, innerRadius, outerRadius, showLabelsInPercent, totalValue, hideLabels } = props;
        if (hideLabels || Math.abs(data.endAngle - data.startAngle) < Math.PI / 12 || !_shouldHighlightArc(data.data.legend)) {
            return null;
        }
        const [base, perp] = arc.centroid({
            ...data,
            innerRadius,
            outerRadius
        });
        const hyp = Math.sqrt(base * base + perp * perp);
        const labelRadius = Math.max(innerRadius, outerRadius) + 2;
        const angle = (data.startAngle + data.endAngle) / 2;
        const arcValue = data.value;
        return /*#__PURE__*/ _react.createElement("text", {
            x: (hyp === 0 ? 0 : base / hyp) * labelRadius,
            y: (hyp === 0 ? 0 : perp / hyp) * labelRadius,
            textAnchor: angle > Math.PI !== _isRTL ? 'end' : 'start',
            dominantBaseline: angle > Math.PI / 2 && angle < 3 * Math.PI / 2 ? 'hanging' : 'auto',
            className: className,
            "aria-hidden": true
        }, showLabelsInPercent ? (0, _d3format.format)('.0%')(totalValue === 0 ? 0 : arcValue / totalValue) : (0, _index.formatScientificLimitWidth)(arcValue));
    }
    function _updateChart(newProps) {
        if (newProps.arc && newProps.innerRadius && newProps.outerRadius) {
            newProps.arc.innerRadius(newProps.innerRadius);
            newProps.arc.outerRadius(newProps.outerRadius);
        }
    }
    const { href, focusedArcId, activeArc } = props;
    //TO DO 'replace' is throwing error
    const id = props.uniqText + (typeof props.data.data.legend === 'string' ? props.data.data.legend.replace(/\s+/g, '') : '') + props.data.data.data;
    const opacity = activeArc && activeArc.length > 0 ? activeArc.includes((_props_data = props.data) === null || _props_data === void 0 ? void 0 : _props_data.data.legend) ? 1 : 0.1 : 1;
    const cornerRadius = props.roundCorners ? 3 : 0;
    const targetElement = document.getElementById(id);
    return /*#__PURE__*/ _react.createElement("g", {
        ref: currentRef
    }, !!focusedArcId && focusedArcId === id && // TODO innerradius and outerradius were absent
    /*#__PURE__*/ _react.createElement("path", {
        id: id + 'focusRing',
        d: arc.cornerRadius(cornerRadius)({
            ...props.data,
            innerRadius: props.innerRadius,
            outerRadius: props.outerRadius
        }),
        className: classes.focusRing
    }), /*#__PURE__*/ _react.createElement("path", {
        // TODO innerradius and outerradius were absent
        id: id,
        d: arc.cornerRadius(cornerRadius)({
            ...props.data,
            innerRadius: props.innerRadius,
            outerRadius: props.outerRadius
        }),
        className: classes.root,
        style: {
            fill: props.color,
            cursor: href ? 'pointer' : 'default'
        },
        onFocus: (event)=>_onFocus(props.data.data, id, event, targetElement),
        onMouseOver: (event)=>_hoverOn(props.data.data, event, targetElement),
        onMouseMove: (event)=>_hoverOn(props.data.data, event, targetElement),
        onMouseLeave: _hoverOff,
        tabIndex: _shouldHighlightArc(props.data.data.legend) || ((_props_activeArc = props.activeArc) === null || _props_activeArc === void 0 ? void 0 : _props_activeArc.length) === 0 ? 0 : undefined,
        onBlur: _onBlur,
        opacity: opacity,
        onClick: (_props_data1 = props.data) === null || _props_data1 === void 0 ? void 0 : _props_data1.data.onClick,
        "aria-label": _getAriaLabel(),
        role: "img"
    }), _renderArcLabel(classes.arcLabel));
});
Arc.displayName = 'Arc';
