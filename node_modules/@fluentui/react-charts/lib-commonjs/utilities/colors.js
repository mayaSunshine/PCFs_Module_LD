"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    DataVizPalette: function() {
        return DataVizPalette;
    },
    getColorContrast: function() {
        return getColorContrast;
    },
    getColorFromToken: function() {
        return getColorFromToken;
    },
    getContrastTextColor: function() {
        return getContrastTextColor;
    },
    getInvertedTextColor: function() {
        return getInvertedTextColor;
    },
    getNextColor: function() {
        return getNextColor;
    }
});
const _reacttheme = require("@fluentui/react-theme");
const _d3color = require("d3-color");
const DataVizPalette = {
    color1: 'qualitative.1',
    color2: 'qualitative.2',
    color3: 'qualitative.3',
    color4: 'qualitative.4',
    color5: 'qualitative.5',
    color6: 'qualitative.6',
    color7: 'qualitative.7',
    color8: 'qualitative.8',
    color9: 'qualitative.9',
    color10: 'qualitative.10',
    color11: 'qualitative.11',
    color12: 'qualitative.12',
    color13: 'qualitative.13',
    color14: 'qualitative.14',
    color15: 'qualitative.15',
    color16: 'qualitative.16',
    color17: 'qualitative.17',
    color18: 'qualitative.18',
    color19: 'qualitative.19',
    color20: 'qualitative.20',
    color21: 'qualitative.21',
    color22: 'qualitative.22',
    color23: 'qualitative.23',
    color24: 'qualitative.24',
    color25: 'qualitative.25',
    color26: 'qualitative.26',
    color27: 'qualitative.27',
    color28: 'qualitative.28',
    color29: 'qualitative.29',
    color30: 'qualitative.30',
    color31: 'qualitative.31',
    color32: 'qualitative.32',
    color33: 'qualitative.33',
    color34: 'qualitative.34',
    color35: 'qualitative.35',
    color36: 'qualitative.36',
    color37: 'qualitative.37',
    color38: 'qualitative.38',
    color39: 'qualitative.39',
    color40: 'qualitative.40',
    info: 'semantic.info',
    disabled: 'semantic.disabled',
    highError: 'semantic.highError',
    error: 'semantic.error',
    warning: 'semantic.warning',
    success: 'semantic.success',
    highSuccess: 'semantic.highSuccess'
};
const QualitativePalette = {
    '1': [
        '#637cef'
    ],
    '2': [
        '#e3008c'
    ],
    '3': [
        '#2aa0a4'
    ],
    '4': [
        '#9373c0'
    ],
    '5': [
        '#13a10e'
    ],
    '6': [
        '#3a96dd'
    ],
    '7': [
        '#ca5010'
    ],
    '8': [
        '#57811b'
    ],
    '9': [
        '#b146c2'
    ],
    '10': [
        '#ae8c00'
    ],
    '11': [
        '#3c51b4',
        '#93a4f4'
    ],
    '12': [
        '#ad006a',
        '#ee5fb7'
    ],
    '13': [
        '#026467',
        '#4cb4b7'
    ],
    '14': [
        '#674c8c',
        '#a083c9'
    ],
    '15': [
        '#0e7a0b',
        '#27ac22'
    ],
    '16': [
        '#2c72a8',
        '#4fa1e1'
    ],
    '17': [
        '#9a3d0c',
        '#d77440'
    ],
    '18': [
        '#405f14',
        '#73aa24'
    ],
    '19': [
        '#863593',
        '#c36bd1'
    ],
    '20': [
        '#6d5700',
        '#d0b232'
    ],
    '21': [
        '#4f6bed'
    ],
    '22': [
        '#ea38a6'
    ],
    '23': [
        '#038387'
    ],
    '24': [
        '#8764b8'
    ],
    '25': [
        '#11910d'
    ],
    '26': [
        '#3487c7'
    ],
    '27': [
        '#d06228'
    ],
    '28': [
        '#689920'
    ],
    '29': [
        '#ba58c9'
    ],
    '30': [
        '#937700',
        '#c19c00'
    ],
    '31': [
        '#2c3c85',
        '#c8d1fa'
    ],
    '32': [
        '#7f004e',
        '#f7adda'
    ],
    '33': [
        '#02494c',
        '#9bd9db'
    ],
    '34': [
        '#4c3867',
        '#b29ad4'
    ],
    '35': [
        '#0b5a08',
        '#a7e3a5'
    ],
    '36': [
        '#20547c',
        '#83bdeb'
    ],
    '37': [
        '#712d09',
        '#df8e64'
    ],
    '38': [
        '#23330b',
        '#a4cc6c'
    ],
    '39': [
        '#63276d',
        '#cf87da'
    ],
    '40': [
        '#3a2f00',
        '#dac157'
    ]
};
const SemanticPalette = {
    info: [
        '#015cda'
    ],
    disabled: [
        '#dbdbdb',
        '#4d4d4d'
    ],
    highError: [
        '#6e0811',
        '#cc2635'
    ],
    error: [
        '#c50f1f',
        '#dc626d'
    ],
    warning: [
        '#f7630c',
        '#f87528'
    ],
    success: [
        '#107c10',
        '#54b054'
    ],
    highSuccess: [
        '#094509',
        '#218c21'
    ]
};
const Colors = {
    qualitative: QualitativePalette,
    semantic: SemanticPalette
};
const QUALITATIVE_COLORS = Object.values(QualitativePalette);
const TOKENS = Object.values(DataVizPalette);
const getThemeSpecificColor = (colors, isDarkTheme)=>{
    if (colors.length === 0) {
        return '';
    }
    const colorIdx = Number(isDarkTheme);
    if (colorIdx < colors.length) {
        return colors[colorIdx];
    }
    return colors[0];
};
const getNextColor = (index, offset = 0, isDarkTheme = false)=>{
    const colors = QUALITATIVE_COLORS[(index + offset) % QUALITATIVE_COLORS.length];
    return getThemeSpecificColor(colors, isDarkTheme);
};
const getColorFromToken = (token, isDarkTheme = false)=>{
    if (TOKENS.indexOf(token) >= 0) {
        const [paletteName, colorCode] = token.split('.');
        const colors = Colors[paletteName][colorCode];
        return getThemeSpecificColor(colors, isDarkTheme);
    }
    return token;
};
//For reference to how these numbers are calculated, refer https://www.w3.org/TR/WCAG/#dfn-contrast-ratio
const rgbLrgb1 = (v)=>{
    return v <= 0.04045 ? v / 12.92 : ((v + 0.055) / 1.055) ** 2.4;
};
const rgbLrgb = ({ r, g, b })=>{
    return {
        r: rgbLrgb1(r / 255),
        g: rgbLrgb1(g / 255),
        b: rgbLrgb1(b / 255)
    };
};
const lrgbLuminance = ({ r, g, b })=>{
    return 0.2126 * r + 0.7152 * g + 0.0722 * b;
};
const getColorContrast = (c1, c2)=>{
    const l1 = lrgbLuminance(rgbLrgb((0, _d3color.rgb)(c1)));
    const l2 = lrgbLuminance(rgbLrgb((0, _d3color.rgb)(c2)));
    return (Math.max(l1, l2) + 0.05) / (Math.min(l1, l2) + 0.05);
};
const getInvertedTextColor = (color, isDarkTheme = false)=>{
    return color === _reacttheme.tokens.colorNeutralForeground1 ? _reacttheme.tokens.colorNeutralBackground1 : _reacttheme.tokens.colorNeutralForeground1;
};
function getContrastTextColor(backgroundColor, isDarkTheme = false) {
    let textColor = _reacttheme.tokens.colorNeutralForeground1;
    const contrastRatio = getColorContrast(textColor, backgroundColor);
    if (contrastRatio < 3) {
        textColor = getInvertedTextColor(textColor, isDarkTheme);
    }
    return textColor;
}
