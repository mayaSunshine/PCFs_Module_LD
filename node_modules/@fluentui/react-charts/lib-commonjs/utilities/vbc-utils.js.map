{"version":3,"sources":["../src/utilities/vbc-utils.ts"],"sourcesContent":["import { Margins } from '../index';\n\nexport const getClosestPairDiffAndRange = (data: number[] | Date[]): [number, number] | undefined => {\n  if (data.length < 2) {\n    return;\n  }\n  data = data.sort((a, b) =>\n    a instanceof Date ? (a as Date).getTime() - (b as Date).getTime() : (a as number) - (b as number),\n  );\n  let minDiff = Number.MAX_VALUE;\n  for (let i = 1; i < data.length; i++) {\n    const diff =\n      data[i] instanceof Date\n        ? (data[i] as Date).getTime() - (data[i - 1] as Date).getTime()\n        : (data[i] as number) - (data[i - 1] as number);\n    minDiff = Math.min(minDiff, diff);\n  }\n  const range =\n    data[0] instanceof Date\n      ? (data[data.length - 1] as Date).getTime() - (data[0] as Date).getTime()\n      : (data[data.length - 1] as number) - (data[0] as number);\n  return [minDiff, range];\n};\n\nexport const calculateAppropriateBarWidth = (\n  data: number[] | Date[],\n  totalWidth: number,\n  innerPadding: number,\n): number => {\n  const result = getClosestPairDiffAndRange(data);\n  if (!result || result[1] === 0) {\n    return 16;\n  }\n  const [closestPairDiff, range] = result;\n  // Refer to https://microsoft.github.io/fluentui-charting-contrib/docs/rfcs/fix-overlapping-bars-on-continuous-axes\n  // for the derivation of the following formula.\n  const barWidth = Math.floor(\n    (totalWidth * closestPairDiff * (1 - innerPadding)) / (range + closestPairDiff * (1 - innerPadding)),\n  );\n  return barWidth;\n};\n\n/**\n * Calculates the total width available for rendering bars.\n */\nexport const calcTotalWidth = (containerWidth: number, margins: Margins, extraMargin = 0): number => {\n  return containerWidth - (margins.left || 0) - (margins.right || 0) - extraMargin * 2;\n};\n\n/**\n * Calculates the combined size of all bands and the gaps between them, in units relative to the bandwidth.\n */\nexport const calcTotalBandUnits = (numBands: number, innerPadding: number): number => {\n  // inner_padding = space_between_bands / (space_between_bands + bandwidth)\n  // => space_between_bands = (inner_padding / (1 - inner_padding)) * bandwidth\n  const gapToBandRatio = innerPadding / (1 - innerPadding);\n  return numBands + (numBands - 1) * gapToBandRatio;\n};\n\n/**\n * Calculates the total width required to render all bands including the gaps between them.\n */\nexport const calcRequiredWidth = (bandwidth: number, numBands: number, innerPadding: number): number => {\n  return bandwidth * calcTotalBandUnits(numBands, innerPadding);\n};\n\n/**\n * Calculates the maximum possible bandwidth such that the combined widths of all bands\n * and the gaps between them exactly fill the total available width.\n */\nexport const calcBandwidth = (totalWidth: number, numBands: number, innerPadding: number): number => {\n  return totalWidth / calcTotalBandUnits(numBands, innerPadding);\n};\n"],"names":["getClosestPairDiffAndRange","data","length","sort","a","b","Date","getTime","minDiff","Number","MAX_VALUE","i","diff","Math","min","range","calculateAppropriateBarWidth","totalWidth","innerPadding","result","closestPairDiff","barWidth","floor","calcTotalWidth","containerWidth","margins","extraMargin","left","right","calcTotalBandUnits","numBands","gapToBandRatio","calcRequiredWidth","bandwidth","calcBandwidth"],"mappings":";;;;;;;;;;;iBAsEakC;;;qBARAF;;;sBAVAH;;;kBAPAN;;;gCArBAP;;;IAtBAhB,0BAAAA;;;;AAAN,mCAAmC,CAACC;IACzC,IAAIA,KAAKC,MAAM,GAAG,GAAG;QACnB;IACF;IACAD,OAAOA,KAAKE,IAAI,CAAC,CAACC,GAAGC,IACnBD,aAAaE,OAAQF,EAAWG,OAAO,KAAMF,EAAWE,OAAO,KAAMH,IAAgBC;IAEvF,IAAIG,UAAUC,OAAOC,SAAS;IAC9B,IAAK,IAAIC,IAAI,GAAGA,IAAIV,KAAKC,MAAM,EAAES,IAAK;QACpC,MAAMC,OACJX,IAAI,CAACU,EAAE,YAAYL,OACdL,IAAI,CAACU,EAAE,CAAUJ,OAAO,KAAMN,IAAI,CAACU,IAAI,EAAE,CAAUJ,OAAO,KAC1DN,IAAI,CAACU,EAAE,GAAeV,IAAI,CAACU,IAAI,EAAE;QACxCH,UAAUK,KAAKC,GAAG,CAACN,SAASI;IAC9B;IACA,MAAMG,QACJd,IAAI,CAAC,EAAE,YAAYK,OACdL,IAAI,CAACA,KAAKC,MAAM,GAAG,EAAE,CAAUK,OAAO,KAAMN,IAAI,CAAC,EAAE,CAAUM,OAAO,KACpEN,IAAI,CAACA,KAAKC,MAAM,GAAG,EAAE,GAAeD,IAAI,CAAC,EAAE;IAClD,OAAO;QAACO;QAASO;KAAM;AACzB,EAAE;AAEK,MAAMC,+BAA+B,CAC1Cf,MACAgB,YACAC;IAEA,MAAMC,SAASnB,2BAA2BC;IAC1C,IAAI,CAACkB,UAAUA,MAAM,CAAC,EAAE,KAAK,GAAG;QAC9B,OAAO;IACT;IACA,MAAM,CAACC,iBAAiBL,MAAM,GAAGI;IACjC,mHAAmH;IACnH,+CAA+C;IAC/C,MAAME,WAAWR,KAAKS,KAAK,CACxBL,aAAaG,kBAAmB,CAAA,IAAIF,YAAAA,CAAW,GAAOH,CAAAA,QAAQK,kBAAmB,CAAA,IAAIF,YAAAA,CAAW,CAAC;IAEpG,OAAOG;AACT,EAAE;AAKK,MAAME,iBAAiB,CAACC,gBAAwBC,SAAkBC,cAAc,CAAC;IACtF,OAAOF,iBAAkBC,CAAAA,QAAQE,IAAI,KAAI,CAAA,IAAMF,QAAQG,KAAK,KAAI,CAAA,GAAKF,cAAc;AACrF,EAAE;AAKK,MAAMG,qBAAqB,CAACC,UAAkBZ;IACnD,0EAA0E;IAC1E,6EAA6E;IAC7E,MAAMa,iBAAiBb,eAAgB,CAAA,IAAIA,YAAAA,CAAW;IACtD,OAAOY,WAAYA,CAAAA,YAAW,CAAA,GAAKC;AACrC,EAAE;AAKK,MAAMC,oBAAoB,CAACC,WAAmBH,UAAkBZ;IACrE,OAAOe,YAAYJ,mBAAmBC,UAAUZ;AAClD,EAAE;AAMK,MAAMgB,gBAAgB,CAACjB,YAAoBa,UAAkBZ;IAClE,OAAOD,aAAaY,mBAAmBC,UAAUZ;AACnD,EAAE"}