"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    extractMaybeLineOptions: function() {
        return extractMaybeLineOptions;
    },
    renderScatterPolarCategoryLabels: function() {
        return renderScatterPolarCategoryLabels;
    }
});
const _interop_require_wildcard = require("@swc/helpers/_/_interop_require_wildcard");
const _react = /*#__PURE__*/ _interop_require_wildcard._(require("react"));
function renderScatterPolarCategoryLabels({ xAxisScale, yAxisScale, className, lineOptions, minPixelGap = 40 }) {
    const maybeLineOptions = extractMaybeLineOptions(lineOptions);
    var _maybeLineOptions_axisLabel;
    // Always use axisLabel from lineOptions to display the labels
    const uniqueTexts = (_maybeLineOptions_axisLabel = maybeLineOptions === null || maybeLineOptions === void 0 ? void 0 : maybeLineOptions.axisLabel) !== null && _maybeLineOptions_axisLabel !== void 0 ? _maybeLineOptions_axisLabel : [];
    // Place labels at equal angles
    const renderedLabels = [];
    const placedPositions = [];
    const labelRadius = 0.7; // You can adjust this value for more/less offset
    const numLabels = uniqueTexts.length;
    // Respect schema or prop rotation and direction (default ccw, 0Â°)
    const dirMultiplier = (maybeLineOptions === null || maybeLineOptions === void 0 ? void 0 : maybeLineOptions.direction) === 'clockwise' ? -1 : 1;
    var _maybeLineOptions_rotation;
    const rotationRad = ((_maybeLineOptions_rotation = maybeLineOptions === null || maybeLineOptions === void 0 ? void 0 : maybeLineOptions.rotation) !== null && _maybeLineOptions_rotation !== void 0 ? _maybeLineOptions_rotation : 0) * Math.PI / 180;
    uniqueTexts.forEach((text, i)=>{
        const angle = rotationRad + dirMultiplier * (2 * Math.PI / numLabels) * i;
        const originXOffset = (maybeLineOptions === null || maybeLineOptions === void 0 ? void 0 : maybeLineOptions.originXOffset) || 0;
        const x = xAxisScale(labelRadius * Math.cos(angle) - originXOffset / 2);
        const y = yAxisScale(labelRadius * Math.sin(angle));
        // Check distance from all previously placed labels
        const isFarEnough = placedPositions.every((pos)=>Math.sqrt((x - pos.x) ** 2 + (y - pos.y) ** 2) >= minPixelGap);
        if (renderedLabels.length === 0 || isFarEnough) {
            renderedLabels.push(/*#__PURE__*/ _react.createElement("text", {
                key: `scatterpolar-label-${text}`,
                x: x,
                y: y,
                className: className,
                textAnchor: "middle",
                alignmentBaseline: "middle",
                opacity: 1
            }, text));
            placedPositions.push({
                x,
                y
            });
        }
    });
    return renderedLabels;
}
function extractMaybeLineOptions(lineOptions) {
    return lineOptions ? {
        originXOffset: lineOptions.originXOffset,
        direction: lineOptions.direction === 'clockwise' || lineOptions.direction === 'counterclockwise' ? lineOptions.direction : undefined,
        rotation: lineOptions.rotation,
        axisLabel: Array.isArray(lineOptions.axisLabel) ? lineOptions.axisLabel : undefined
    } : undefined;
}
