"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    calcBandwidth: function() {
        return calcBandwidth;
    },
    calcRequiredWidth: function() {
        return calcRequiredWidth;
    },
    calcTotalBandUnits: function() {
        return calcTotalBandUnits;
    },
    calcTotalWidth: function() {
        return calcTotalWidth;
    },
    calculateAppropriateBarWidth: function() {
        return calculateAppropriateBarWidth;
    },
    getClosestPairDiffAndRange: function() {
        return getClosestPairDiffAndRange;
    }
});
const getClosestPairDiffAndRange = (data)=>{
    if (data.length < 2) {
        return;
    }
    data = data.sort((a, b)=>a instanceof Date ? a.getTime() - b.getTime() : a - b);
    let minDiff = Number.MAX_VALUE;
    for(let i = 1; i < data.length; i++){
        const diff = data[i] instanceof Date ? data[i].getTime() - data[i - 1].getTime() : data[i] - data[i - 1];
        minDiff = Math.min(minDiff, diff);
    }
    const range = data[0] instanceof Date ? data[data.length - 1].getTime() - data[0].getTime() : data[data.length - 1] - data[0];
    return [
        minDiff,
        range
    ];
};
const calculateAppropriateBarWidth = (data, totalWidth, innerPadding)=>{
    const result = getClosestPairDiffAndRange(data);
    if (!result || result[1] === 0) {
        return 16;
    }
    const [closestPairDiff, range] = result;
    // Refer to https://microsoft.github.io/fluentui-charting-contrib/docs/rfcs/fix-overlapping-bars-on-continuous-axes
    // for the derivation of the following formula.
    const barWidth = Math.floor(totalWidth * closestPairDiff * (1 - innerPadding) / (range + closestPairDiff * (1 - innerPadding)));
    return barWidth;
};
const calcTotalWidth = (containerWidth, margins, extraMargin = 0)=>{
    return containerWidth - (margins.left || 0) - (margins.right || 0) - extraMargin * 2;
};
const calcTotalBandUnits = (numBands, innerPadding)=>{
    // inner_padding = space_between_bands / (space_between_bands + bandwidth)
    // => space_between_bands = (inner_padding / (1 - inner_padding)) * bandwidth
    const gapToBandRatio = innerPadding / (1 - innerPadding);
    return numBands + (numBands - 1) * gapToBandRatio;
};
const calcRequiredWidth = (bandwidth, numBands, innerPadding)=>{
    return bandwidth * calcTotalBandUnits(numBands, innerPadding);
};
const calcBandwidth = (totalWidth, numBands, innerPadding)=>{
    return totalWidth / calcTotalBandUnits(numBands, innerPadding);
};
