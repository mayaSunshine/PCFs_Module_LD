{"version":3,"sources":["../src/utilities/image-export-utils.ts"],"sourcesContent":["'use client';\n\nimport { create as d3Create, select as d3Select, Selection } from 'd3-selection';\nimport { copyStyle, createMeasurementSpan, resolveCSSVariables } from './index';\nimport { ImageExportOptions } from '../types/index';\nimport { Legend, LegendContainer } from '../Legends';\nimport {\n  LEGEND_CONTAINER_MARGIN_TOP,\n  LEGEND_CONTAINER_MARGIN_START,\n  LEGEND_PADDING,\n  LEGEND_HEIGHT,\n  LEGEND_SHAPE_BORDER,\n  LEGEND_SHAPE_SIZE,\n  LEGEND_SHAPE_MARGIN_END,\n  INACTIVE_LEGEND_TEXT_OPACITY,\n} from '../components/Legends/useLegendsStyles.styles';\n\nexport function toImage(\n  chartContainer: HTMLElement | null | undefined,\n  legendsToSvgCallback?: LegendContainer['toSVG'],\n  isRTL: boolean = false,\n  opts: ImageExportOptions = {},\n): Promise<string> {\n  return new Promise((resolve, reject) => {\n    if (!chartContainer) {\n      return reject(new Error('Chart container is not defined'));\n    }\n\n    try {\n      const background =\n        typeof opts.background === 'string' ? resolveCSSVariables(chartContainer, opts.background) : 'transparent';\n\n      const svg = toSVG(chartContainer, legendsToSvgCallback, isRTL, background);\n      if (!svg.node) {\n        return reject(new Error('SVG node is null'));\n      }\n\n      let svgData = new XMLSerializer().serializeToString(svg.node);\n      // This node is already detached from the DOM, so there's no need to call remove() on it.\n      // Just clear the reference.\n      svg.node = null;\n\n      let svgDataUrl = 'data:image/svg+xml;base64,' + btoa(unescapePonyfill(encodeURIComponent(svgData)));\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      svgData = null as any;\n\n      svgToPng(svgDataUrl, {\n        width: opts.width || svg.width,\n        height: opts.height || svg.height,\n        scale: opts.scale,\n      })\n        .then(resolve)\n        .catch(reject);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      svgDataUrl = null as any;\n    } catch (err) {\n      return reject(err);\n    }\n  });\n}\n\nconst SVG_STYLE_PROPERTIES = [\n  'display',\n  'fill',\n  'fill-opacity',\n  'opacity',\n  'stroke',\n  'stroke-width',\n  'transform',\n  'border-collapse',\n];\nconst SVG_TEXT_STYLE_PROPERTIES = [\n  'font-family',\n  'font-size',\n  'font-weight',\n  'text-anchor',\n  'background-color',\n  'color',\n  'padding',\n  'text-align',\n  'border',\n];\n\nfunction toSVG(\n  chartContainer: HTMLElement,\n  legendsToSvgCallback: LegendContainer['toSVG'] | undefined,\n  isRTL: boolean,\n  background: string,\n) {\n  const svg = chartContainer.querySelector<SVGSVGElement>('svg');\n  if (!svg) {\n    throw new Error('SVG not found');\n  }\n\n  let clonedSvg = d3Select(svg.cloneNode(true) as SVGSVGElement)\n    .attr('width', null)\n    .attr('height', null)\n    .attr('viewBox', null);\n  let svgElements = svg.getElementsByTagName('*');\n  let clonedSvgElements = clonedSvg.node()!.getElementsByTagName('*');\n\n  const TEXT_ELEMENTS = ['text'];\n  const TABLE_ELEMENTS = ['table', 'thead', 'tbody', 'tr', 'th', 'td'];\n\n  for (let i = 0; i < svgElements.length; i++) {\n    const tag = svgElements[i].tagName.toLowerCase();\n\n    if (TEXT_ELEMENTS.includes(tag) || TABLE_ELEMENTS.includes(tag)) {\n      copyStyle([...SVG_STYLE_PROPERTIES, ...SVG_TEXT_STYLE_PROPERTIES], svgElements[i], clonedSvgElements[i]);\n    } else {\n      copyStyle(SVG_STYLE_PROPERTIES, svgElements[i], clonedSvgElements[i]);\n    }\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  svgElements = null as any;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  clonedSvgElements = null as any;\n\n  const { width: svgWidth, height: svgHeight } = svg.getBoundingClientRect();\n  const legendGroup =\n    typeof legendsToSvgCallback === 'function'\n      ? legendsToSvgCallback(svgWidth, isRTL)\n      : { node: null, width: 0, height: 0 };\n  const w1 = Math.max(svgWidth, legendGroup.width);\n  const h1 = svgHeight + legendGroup.height;\n\n  if (legendGroup.node) {\n    d3Select(legendGroup.node).attr('transform', `translate(0, ${svgHeight})`);\n    clonedSvg.append(() => legendGroup.node);\n  }\n  clonedSvg\n    .insert('rect', ':first-child')\n    .attr('x', 0)\n    .attr('y', 0)\n    .attr('width', w1)\n    .attr('height', h1)\n    .attr('fill', background);\n  clonedSvg\n    .attr('width', w1)\n    .attr('height', h1)\n    .attr('viewBox', `0 0 ${w1} ${h1}`)\n    .attr('direction', isRTL ? 'rtl' : 'ltr');\n\n  const result = {\n    node: clonedSvg.node(),\n    width: w1,\n    height: h1,\n  };\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  clonedSvg = null as any;\n\n  return result;\n}\n\nconst LEGEND_TEXT_STYLE_PROPERTIES_MAP = {\n  color: 'fill',\n  'font-family': 'font-family',\n  'font-size': 'font-size',\n  'font-weight': 'font-weight',\n};\n\nexport function cloneLegendsToSVG(\n  legends: Legend[],\n  svgWidth: number,\n  config: {\n    selectedLegends: Record<string, boolean>;\n    centerLegends: boolean;\n    textClassName: string;\n    isRTL: boolean;\n  },\n  legendContainer?: HTMLElement | null,\n): {\n  node: SVGGElement | null;\n  width: number;\n  height: number;\n} {\n  if (legends.length === 0) {\n    return {\n      node: null,\n      width: 0,\n      height: 0,\n    };\n  }\n\n  const { selectedLegends, centerLegends, textClassName, isRTL } = config;\n  const legendGroup = d3Create<SVGGElement>('svg:g');\n  let legendX = centerLegends ? 0 : LEGEND_CONTAINER_MARGIN_START;\n  let legendY = LEGEND_CONTAINER_MARGIN_TOP;\n  let legendLine: { elem: Selection<SVGGElement, unknown, null, undefined>; width: number }[] = [];\n  const legendLines: (typeof legendLine)[] = [];\n  const legendLineWidths: number[] = [];\n  const noLegendsSelected = Object.keys(selectedLegends).length === 0;\n\n  for (let i = 0; i < legends.length; i++) {\n    const textOffset = LEGEND_PADDING + LEGEND_SHAPE_SIZE + LEGEND_SHAPE_MARGIN_END;\n    const legendText = createMeasurementSpan(legends[i].title, textClassName, legendContainer);\n    const legendWidth = textOffset + legendText.getBoundingClientRect().width + LEGEND_PADDING;\n    const legendItem = legendGroup.append('g');\n\n    legendLine.push({ elem: legendItem, width: legendWidth });\n    if (legendX + legendWidth > svgWidth && legendLine.length > 1) {\n      legendLine.pop();\n      legendLines.push(legendLine);\n      legendLineWidths.push(legendX);\n\n      legendLine = [{ elem: legendItem, width: legendWidth }];\n      legendX = centerLegends ? 0 : LEGEND_CONTAINER_MARGIN_START;\n      legendY += LEGEND_HEIGHT;\n    }\n\n    const isLegendActive = selectedLegends[legends[i].title] || noLegendsSelected;\n\n    legendItem\n      .append('rect')\n      .attr('x', legendX + (isRTL ? legendWidth - LEGEND_PADDING - LEGEND_SHAPE_SIZE : LEGEND_PADDING))\n      .attr('y', legendY + LEGEND_PADDING)\n      .attr('width', LEGEND_SHAPE_SIZE)\n      .attr('height', LEGEND_SHAPE_SIZE)\n      .style('fill', isLegendActive ? legends[i].color : 'transparent')\n      .style('stroke-width', LEGEND_SHAPE_BORDER)\n      .style('stroke', legends[i].color);\n\n    legendItem\n      .append('text')\n      .attr('x', legendX + (isRTL ? legendWidth - textOffset : textOffset))\n      .attr('y', legendY + LEGEND_PADDING)\n      .attr('dominant-baseline', 'hanging')\n      .style('opacity', isLegendActive ? 1 : INACTIVE_LEGEND_TEXT_OPACITY)\n      .text(legends[i].title)\n      .call(selection => copyStyle(LEGEND_TEXT_STYLE_PROPERTIES_MAP, legendText, selection.node()!));\n\n    legendX += legendWidth;\n  }\n\n  legendLines.push(legendLine);\n  legendLineWidths.push(legendX);\n  legendY += LEGEND_HEIGHT;\n\n  if (centerLegends) {\n    legendLines.forEach((ln, idx) => {\n      const lineOffsetX = Math.max((svgWidth - legendLineWidths[idx]) / 2, 0);\n      let remLineWidth = legendLineWidths[idx];\n      let itemOffsetX = 0;\n      ln.forEach(item => {\n        const newOffsetX = lineOffsetX + (isRTL ? remLineWidth - item.width - itemOffsetX : 0);\n        item.elem.attr('transform', `translate(${newOffsetX}, 0)`);\n        remLineWidth -= item.width;\n        itemOffsetX += item.width;\n      });\n    });\n  } else if (isRTL) {\n    const w1 = Math.max(svgWidth, ...legendLineWidths);\n    legendLines.forEach(ln => {\n      let remLineWidth = w1 - LEGEND_CONTAINER_MARGIN_START;\n      let itemOffsetX = LEGEND_CONTAINER_MARGIN_START;\n      ln.forEach(item => {\n        const newOffsetX = remLineWidth - item.width - itemOffsetX;\n        item.elem.attr('transform', `translate(${newOffsetX}, 0)`);\n        remLineWidth -= item.width;\n        itemOffsetX += item.width;\n      });\n    });\n  }\n\n  return {\n    node: legendGroup.node(),\n    width: Math.max(...legendLineWidths),\n    height: legendY,\n  };\n}\n\nfunction svgToPng(svgDataUrl: string, opts: ImageExportOptions = {}): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const scale = opts.scale || 1;\n    const w0 = opts.width || 300;\n    const h0 = opts.height || 150;\n    const w1 = scale * w0;\n    const h1 = scale * h0;\n\n    const canvas = document.createElement('canvas');\n    const img = new Image();\n\n    canvas.width = w1;\n    canvas.height = h1;\n\n    img.onload = function () {\n      const ctx = canvas.getContext('2d');\n      if (!ctx) {\n        return reject(new Error('Canvas context is null'));\n      }\n\n      ctx.clearRect(0, 0, w1, h1);\n      ctx.drawImage(img, 0, 0, w1, h1);\n\n      const imgData = canvas.toDataURL('image/png');\n      resolve(imgData);\n    };\n\n    img.onerror = function (err) {\n      reject(err);\n    };\n\n    img.src = svgDataUrl;\n  });\n}\n\nconst hex2 = /^[\\da-f]{2}$/i;\nconst hex4 = /^[\\da-f]{4}$/i;\n\n/**\n * A ponyfill for the deprecated `unescape` method, taken from the `core-js` library.\n *\n * Source: {@link https://github.com/zloirock/core-js/blob/167136f479d3b8519953f2e4c534ecdd1031d3cf/packages/core-js/modules/es.unescape.js core-js/packages/core-js/modules/es.unescape.js}\n */\nfunction unescapePonyfill(str: string) {\n  let result = '';\n  const length = str.length;\n  let index = 0;\n  let chr;\n  let part;\n  while (index < length) {\n    chr = str.charAt(index++);\n    if (chr === '%') {\n      if (str.charAt(index) === 'u') {\n        part = str.slice(index + 1, index + 5);\n        if (hex4.exec(part)) {\n          result += String.fromCharCode(parseInt(part, 16));\n          index += 5;\n          continue;\n        }\n      } else {\n        part = str.slice(index, index + 2);\n        if (hex2.exec(part)) {\n          result += String.fromCharCode(parseInt(part, 16));\n          index += 2;\n          continue;\n        }\n      }\n    }\n    result += chr;\n  }\n  return result;\n}\n"],"names":["create","d3Create","select","d3Select","copyStyle","createMeasurementSpan","resolveCSSVariables","LEGEND_CONTAINER_MARGIN_TOP","LEGEND_CONTAINER_MARGIN_START","LEGEND_PADDING","LEGEND_HEIGHT","LEGEND_SHAPE_BORDER","LEGEND_SHAPE_SIZE","LEGEND_SHAPE_MARGIN_END","INACTIVE_LEGEND_TEXT_OPACITY","toImage","chartContainer","legendsToSvgCallback","isRTL","opts","Promise","resolve","reject","Error","background","svg","toSVG","node","svgData","XMLSerializer","serializeToString","svgDataUrl","btoa","unescapePonyfill","encodeURIComponent","svgToPng","width","height","scale","then","catch","err","SVG_STYLE_PROPERTIES","SVG_TEXT_STYLE_PROPERTIES","querySelector","clonedSvg","cloneNode","attr","svgElements","getElementsByTagName","clonedSvgElements","TEXT_ELEMENTS","TABLE_ELEMENTS","i","length","tag","tagName","toLowerCase","includes","svgWidth","svgHeight","getBoundingClientRect","legendGroup","w1","Math","max","h1","append","insert","result","LEGEND_TEXT_STYLE_PROPERTIES_MAP","color","cloneLegendsToSVG","legends","config","legendContainer","selectedLegends","centerLegends","textClassName","legendX","legendY","legendLine","legendLines","legendLineWidths","noLegendsSelected","Object","keys","textOffset","legendText","title","legendWidth","legendItem","push","elem","pop","isLegendActive","style","text","call","selection","forEach","ln","idx","lineOffsetX","remLineWidth","itemOffsetX","item","newOffsetX","w0","h0","canvas","document","createElement","img","Image","onload","ctx","getContext","clearRect","drawImage","imgData","toDataURL","onerror","src","hex2","hex4","str","index","chr","part","charAt","slice","exec","String","fromCharCode","parseInt"],"mappings":"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"}