{"version":3,"sources":["../src/components/SankeyChart/SankeyChart.types.ts"],"sourcesContent":["import { RefObject } from 'react';\nimport { ChartPopoverProps } from '../CommonComponents/ChartPopover.types';\nimport { Chart, ChartProps } from '../../types/DataPoint';\n\nexport type { ChartProps, DataPoint, SankeyChartData } from '../../types/DataPoint';\n\n/**\n * Sankey Chart properties\n * {@docCategory SankeyChart}\n */\nexport interface SankeyChartProps {\n  /**\n   * Data to render in the chart.\n   */\n  data: ChartProps;\n\n  /**\n   * Width of the chart.\n   */\n  width?: number;\n\n  /**\n   * Height of the chart.\n   */\n  height?: number;\n\n  /**\n   * Additional CSS class(es) to apply to the SankeyChart.\n   */\n  className?: string;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: SankeyChartStyles;\n\n  /**\n   * this prop takes its parent as a HTML element to define the width and height of the Sankey chart\n   */\n  parentRef?: HTMLElement | null;\n\n  /**\n   * should chart resize when parent resize.\n   */\n  shouldResize?: number;\n\n  /**\n   * Color for path\n   */\n  pathColor?: string;\n\n  /**\n   * Colors for nodes\n   */\n  colorsForNodes?: string[];\n\n  /**\n   * Colors for nodes border\n   */\n  borderColorsForNodes?: string[];\n\n  /**\n   * Localized strings to show in the UX.\n   */\n  strings?: SankeyChartStrings;\n\n  /**\n   * Localized strings to use for the chart's accessibility features.\n   */\n  accessibility?: SankeyChartAccessibilityProps;\n\n  /**\n   * Format node and link values.\n   */\n  formatNumberOptions?: Intl.NumberFormatOptions;\n\n  /**\n   * Prop to disable shrinking of the chart beyond a certain limit and enable scrolling when the chart overflows\n   * @deprecated Use `reflowProps` instead.\n   */\n  enableReflow?: boolean;\n\n  /**\n   * Optional callback to access the Chart interface. Use this instead of ref for accessing\n   * the public methods and properties of the component.\n   */\n  componentRef?: RefObject<Chart>;\n\n  /**\n   * props for the callout in the chart\n   */\n  calloutProps?: ChartPopoverProps;\n\n  /**\n   * The prop used to define the culture to localize the numbers and date\n   */\n  culture?: string;\n\n  /**\n   * Props related to reflow behavior of the chart\n   */\n  reflowProps?: {\n    /**\n     * Determines the reflow behavior of the chart.\n     * When set to `'min-width'`, the chart will not shrink below a certain width and will enable scrolling if it overflows.\n     * @default 'none'\n     */\n    mode: 'none' | 'min-width';\n  };\n}\n\n/**\n * Sankey Chart styles\n * {@docCategory SankeyChart}\n */\nexport interface SankeyChartStyles {\n  /**\n   *  Style for the root element.\n   */\n  root?: string;\n\n  /**\n   *  Style for the nodes.\n   */\n  nodes?: string;\n\n  /**\n   *  Style for the links.\n   */\n  links?: string;\n\n  /**\n   *  Style for the text inside node.\n   */\n  nodeTextContainer?: string;\n\n  /**\n   *  Style for the tooltip ,when user hover over the truncated node detail.\n   */\n  toolTip?: string;\n\n  /**\n   * Styles for the chart wrapper div\n   */\n  chartWrapper?: string;\n\n  /**\n   * Styles for the chart svg element\n   */\n  chart?: string;\n}\n\n/**\n * Set of strings which are used when rendering the chart.\n */\nexport interface SankeyChartStrings {\n  /**\n   * A value similar to \"from \\{0\\}\" where \\{0\\} is the name of the source node for a link.\n   * This is shown in the `ChartHoverCard` when the user hovers the mouse over a link.\n   */\n  linkFrom?: string;\n}\n\n/**\n * Set of strings which are used when rendering accessibility information within the chart.\n */\nexport interface SankeyChartAccessibilityProps {\n  /**\n   * Aria label for when the chart is empty.\n   */\n  emptyAriaLabel?: string;\n  /**\n   * A value similar to \"node \\{0\\} with weight \\{1\\}\".\n   * \\{0\\} is the name of the node.\n   * \\{1\\} is the weight of the node (as computed by the sankey layout engine via the links to or from this node).\n   */\n  nodeAriaLabel?: string;\n  /**\n   * A value similar to \"link from \\{0\\} to $\\{1\\} with weight $\\{2\\}\".\n   * \\{0\\} is the source node, \\{1\\} is the target node, and \\{2\\} is the value of the link.\n   */\n  linkAriaLabel?: string;\n}\n"],"names":[],"mappings":"AAmKA;;CAEC,GACD,WAgBC"}