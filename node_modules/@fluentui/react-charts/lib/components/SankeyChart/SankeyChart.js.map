{"version":3,"sources":["../src/components/SankeyChart/SankeyChart.tsx"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { useFluent_unstable as useFluent } from '@fluentui/react-shared-contexts';\nimport { tokens } from '@fluentui/react-theme';\nimport { useId } from '@fluentui/react-utilities';\nimport { sum as d3Sum } from 'd3-array';\nimport { SankeyGraph, SankeyLayout, sankey as d3Sankey, sankeyJustify, sankeyRight } from 'd3-sankey';\nimport { Selection as D3Selection, select, selectAll } from 'd3-selection';\nimport { area as d3Area, curveBumpX as d3CurveBasis } from 'd3-shape';\nimport { Margins, SLink, SNode, ImageExportOptions } from '../../types/DataPoint';\nimport { SankeyChartData, SankeyChartProps } from './SankeyChart.types';\nimport { useSankeyChartStyles } from './useSankeyChartStyles.styles';\nimport { ChartPopover, ChartPopoverProps } from '../CommonComponents/index';\nimport { useArrowNavigationGroup } from '@fluentui/react-tabster';\nimport { format } from '../../utilities/string';\nimport { toImage } from '../../utilities/image-export-utils';\n\nconst PADDING_PERCENTAGE = 0.3;\n\ntype NodeId = number | string;\ntype ItemValues<T> = { [key: NodeId]: T };\ntype NodeValues = ItemValues<number>;\ntype LinkItemValues<T> = { [key: NodeId]: ItemValues<T> };\ntype LinkValues = LinkItemValues<number>;\n\ntype NodesInColumns = { [key: number]: SNode[] };\ntype NormalizedData = SankeyChartData & {\n  width: number;\n  height: number;\n};\n\ntype NodeColors = { fillColor: string; borderColor: string };\ntype SankeyLayoutGenerator = SankeyLayout<SankeyGraph<{}, {}>, {}, {}>;\n\nconst NON_SELECTED_NODE_AND_STREAM_COLOR: string = '#757575';\nconst DEFAULT_NODE_COLORS: NodeColors[] = [\n  { fillColor: '#00758F', borderColor: '#002E39' },\n  { fillColor: '#77004D', borderColor: '#43002C' },\n  { fillColor: '#4F6BED', borderColor: '#3B52B4' },\n  { fillColor: '#937600', borderColor: '#6D5700' },\n  { fillColor: '#286EA8', borderColor: '#00457E' },\n  { fillColor: '#A43FB1', borderColor: '#7C158A' },\n  { fillColor: '#CC3595', borderColor: '#7F215D' },\n  { fillColor: '#0E7878', borderColor: '#004E4E' },\n  { fillColor: '#8764B8', borderColor: '#4B3867' },\n  { fillColor: '#9C663F', borderColor: '#6D4123' },\n];\n\nconst MIN_HEIGHT_FOR_DOUBLINE_TYPE = 36;\nconst MIN_HEIGHT_FOR_TYPE = 24;\nconst REST_STREAM_OPACITY: number = 1;\nconst NON_SELECTED_OPACITY: number = 1;\nconst SELECTED_STREAM_OPACITY: number = 0.3;\nconst NON_SELECTED_STREAM_BORDER_OPACITY: number = 0.5;\nconst DEFAULT_TEXT_COLOR: string = '#323130';\nconst NON_SELECTED_TEXT_COLOR: string = '#FFFFFF';\nconst NODE_WIDTH = 124;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getSelectedNodes(selectedLinks: Set<SLink>): any[] {\n  const nodes: SNode[] = [];\n  selectedLinks.forEach(link => {\n    nodes.push(link.target as SNode);\n\n    if (nodes.indexOf(link.source as SNode) === -1) {\n      nodes.push(link.source as SNode);\n    }\n  });\n  return nodes;\n}\n\nfunction getSelectedLinks(singleNode: SNode): Set<SLink> {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, no-array-constructor\n  const q: any = new Array<any>();\n  const finalLinks: Set<SLink> = new Set<SLink>();\n\n  singleNode.sourceLinks!.forEach((link: SLink) => {\n    q.push(link);\n    finalLinks.add(link);\n  });\n\n  while (q.length > 0) {\n    const poppedLink: SLink = q.shift();\n    const node: SNode = poppedLink.target as SNode;\n    if (node && node.sourceLinks) {\n      node.sourceLinks.forEach((link: SLink) => {\n        finalLinks.add(link);\n        q.push(link);\n      });\n    }\n  }\n\n  if (singleNode.targetLinks) {\n    singleNode.targetLinks.forEach((link: SLink) => {\n      q.push(link);\n      finalLinks.add(link);\n    });\n  }\n\n  while (q.length > 0) {\n    const poppedLink: SLink = q.shift();\n    const node: SNode = poppedLink.source as SNode;\n    if (node && node.targetLinks) {\n      node.targetLinks.forEach((link: SLink) => {\n        finalLinks.add(link);\n        q.push(link);\n      });\n    }\n  }\n\n  return finalLinks;\n}\n\nfunction getSelectedLinksforStreamHover(singleLink: SLink): {\n  selectedLinks: Set<SLink>;\n  selectedNodes: Set<SNode>;\n} {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, no-array-constructor\n  const q: any = new Array<any>();\n  const finalLinks: Set<SLink> = new Set<SLink>();\n  const finalNodes: Set<SNode> = new Set<SNode>();\n\n  q.push(singleLink.source);\n  finalLinks.add(singleLink);\n  while (q.length > 0) {\n    const poppedNode: SNode = q.shift();\n    finalNodes.add(poppedNode);\n    if (poppedNode.targetLinks && poppedNode.targetLinks.length > 0) {\n      poppedNode.targetLinks.forEach((link: SLink) => {\n        q.push(link.source);\n        finalLinks.add(link);\n      });\n    }\n  }\n\n  q.push(singleLink.target);\n\n  while (q.length > 0) {\n    const poppedNode: SNode = q.shift();\n    finalNodes.add(poppedNode);\n    if (poppedNode.sourceLinks && poppedNode.sourceLinks.length > 0) {\n      poppedNode.sourceLinks.forEach((link: SLink) => {\n        q.push(link.target);\n        finalLinks.add(link);\n      });\n    }\n  }\n\n  return {\n    selectedLinks: finalLinks,\n    selectedNodes: finalNodes,\n  };\n}\n\n/**\n * This is used to group nodes by column index.\n */\n// This is exported for unit tests.\nexport function groupNodesByColumn(graph: SankeyChartData): NodesInColumns {\n  const nodesInColumn: NodesInColumns = {};\n  graph.nodes.forEach((node: SNode) => {\n    const columnId = node.layer!;\n    if (nodesInColumn[columnId]) {\n      nodesInColumn[columnId].push(node);\n    } else {\n      nodesInColumn[columnId] = [node];\n    }\n  });\n  return nodesInColumn;\n}\n\n/**\n * This is used to normalize the nodes value whose value is less than 1% of the total column value.\n */\nfunction adjustOnePercentHeightNodes(\n  nodesInColumn: NodesInColumns,\n  computedNodes: NodeValues,\n  originalLinks: LinkValues,\n): void {\n  const totalColumnValue = Object.values(nodesInColumn).map((column: SNode[]) => {\n    return d3Sum(column, (node: SNode) => node.value);\n  });\n  totalColumnValue.forEach((columnValue: number, index: number) => {\n    let totalPercentage = 0;\n    const onePercent = 0.01 * columnValue;\n    const columnNodes = nodesInColumn[index];\n    columnNodes.forEach((node: SNode) => {\n      const value = computedNodes[node.nodeId];\n      const nodePercentage = (value / columnValue) * 100;\n      node.actualValue = value;\n      //if the value is less than 1% then we are making it as 1% of total .\n      if (nodePercentage < 1) {\n        node.value = onePercent;\n        totalPercentage = totalPercentage + 1;\n      } else {\n        totalPercentage = totalPercentage + nodePercentage;\n      }\n    });\n    //since we have adjusted the value to be 1% but we need to keep the sum of the percentage value under 100.\n    const scalingRatio = totalPercentage !== 0 ? totalPercentage / 100 : 1;\n    if (scalingRatio > 1) {\n      // Loop through each node in that column and scale that node--and its incoming and outgoing links--by the\n      // scaling ratio. We need the sankey diagram to re-layout the nodes and links after we do this.\n      columnNodes.forEach((node: SNode) => {\n        const normalized = (node.value = node.value! / scalingRatio);\n        // Which Original Value? and Which Normalized Value is needed, here? The Node? The Link? Both?\n        changeColumnValue(node, computedNodes[node.nodeId], normalized, originalLinks);\n      });\n    }\n  });\n}\n\n/**\n * This is used for normalizing each link's value to reflect the normalized node value.\n */\nfunction changeColumnValue(\n  node: SNode,\n  originalNodeValue: number,\n  normalizedNodeValue: number,\n  linkValues: LinkValues,\n) {\n  // For each link in the source and target, compute the proportion that this link contributes to the total\n  // then adjust the link's value to reflect its proportion of the normalized node value.\n  const updateLinkValue = (link: SLink) => {\n    const value = linkValue(linkValues, link);\n    link.unnormalizedValue = value;\n    const linkRatio = value / originalNodeValue;\n    link.value = Math.max(normalizedNodeValue * linkRatio, link.value);\n  };\n  node.sourceLinks!.forEach(updateLinkValue);\n  node.targetLinks!.forEach(updateLinkValue);\n}\n\n/**\n * This is used for calculating the node non normalized value based on link non normalized value.\n * The links have the original weights. Computed nodes have the total weight of all incoming and outgoing links.\n */\nfunction populateNodeActualValue(data: SankeyChartData, computedNodes: NodeValues, originalLinks: LinkValues) {\n  data.links.forEach((link: SLink) => {\n    if (!link.unnormalizedValue) {\n      link.unnormalizedValue = linkValue(originalLinks, link);\n    }\n  });\n  data.nodes.forEach((node: SNode) => {\n    node.actualValue = computedNodes[node.nodeId as NodeId];\n  });\n}\n\n/**\n * This is used to introduce dynamic padding for cases where the number of nodes in a column is huge\n * so that we maintain a node to space ratio for such columns as if we fail to do so the\n * chart is devoid of nodes and only shows links.\n */\n// This is exported for unit tests\nexport function adjustPadding(sankey: SankeyLayoutGenerator, height: number, nodesInColumn: NodesInColumns): void {\n  let padding = sankey.nodePadding();\n  const minPadding = PADDING_PERCENTAGE * height;\n  Object.values(nodesInColumn).forEach((column: SNode[]) => {\n    const totalPaddingInColumn = height - d3Sum(column, (node: SNode) => node.y1! - node.y0!);\n    if (minPadding < totalPaddingInColumn) {\n      // Here we are calculating the min of default and calculated padding, we will not increase the padding\n      // in any scenario.\n      padding = Math.min(padding, minPadding / (column.length - 1));\n    }\n  });\n  sankey.nodePadding(padding);\n}\n\nfunction idFromNumberOrSNode(node: SNode | number): NodeId {\n  if (typeof node === 'number') {\n    return node;\n  }\n  return node.nodeId as NodeId;\n}\n\n/**\n * Duplicates the supplied chart data so that we do not alter the original.\n * @param data The data to duplicate.\n * @returns The duplicated data.\n */\nfunction duplicateData(data: SankeyChartData): SankeyChartData {\n  return {\n    nodes: data.nodes.map(\n      (node: SNode): SNode => ({\n        ...node,\n      }),\n    ),\n    links: data.links.map(\n      (link: SLink): SLink => ({\n        ...link,\n      }),\n    ),\n  };\n}\n\nfunction valuesOfNodes(nodes: SNode[]): NodeValues {\n  const result: NodeValues = {};\n  nodes.forEach((node: SNode) => {\n    result[node.nodeId as NodeId] = node.value!;\n  });\n  return result;\n}\n\nfunction valuesOfLinks(links: SLink[]): LinkValues {\n  const result: LinkValues = {};\n  links.forEach((link: SLink) => {\n    const sourceId = idFromNumberOrSNode(link.source);\n    let sourceToTarget = result[sourceId];\n    if (!sourceToTarget) {\n      sourceToTarget = {};\n      result[sourceId] = sourceToTarget;\n    }\n    sourceToTarget[idFromNumberOrSNode(link.target)] = link.value;\n  });\n  return result;\n}\n\nfunction linkValue<T>(originalLinks: LinkItemValues<T>, link: SLink): T {\n  return originalLinks[idFromNumberOrSNode(link.source)][idFromNumberOrSNode(link.target)];\n}\n\n// This is exported for unit tests.\nexport function preRenderLayout(\n  margins: Margins,\n  containerWidth: number,\n  containerHeight: number,\n  isRtl: boolean,\n): { sankey: SankeyLayoutGenerator; height: number; width: number } {\n  const { left, right, top, bottom } = margins;\n\n  const sankey = d3Sankey()\n    .nodeWidth(NODE_WIDTH)\n    .extent([\n      [left!, top!],\n      [containerWidth - right!, containerHeight - bottom!],\n    ])\n    .nodeAlign(isRtl ? sankeyRight : sankeyJustify);\n\n  return { sankey, height: containerHeight, width: containerWidth };\n}\n\nconst elipsis = '...';\n\n/**\n * This is used to assign node fillcolors and borderColor cyclically when the user doesnt\n * provide color to  individual node.\n */\nfunction assignNodeColors(\n  nodes: SNode[],\n  colorsForNodes: string[] | undefined,\n  borderColorsForNodes: string[] | undefined,\n) {\n  let colors: string[];\n  let borders: string[];\n  if (colorsForNodes && borderColorsForNodes) {\n    colors = colorsForNodes;\n    borders = borderColorsForNodes;\n  } else {\n    colors = DEFAULT_NODE_COLORS.map(color => color.fillColor);\n    borders = DEFAULT_NODE_COLORS.map(color => color.borderColor);\n  }\n  let currentIndex = 0;\n  nodes.forEach((node: SNode) => {\n    if (!node.color && !node.borderColor) {\n      node.color = colors[currentIndex];\n      node.borderColor = borders[currentIndex];\n    } else if (node.color && !node.borderColor) {\n      node.borderColor = '#757575';\n    } else if (node.borderColor && !node.color) {\n      node.color = '#F5F5F5';\n    }\n    currentIndex = (currentIndex + 1) % colors.length;\n  });\n}\n\n/**\n * Takes in the display name for the node and potentially returns a trimmed version of the name.\n * @param tspan the `tspan` element to use for text visual length measurement\n * @param text is the text which we will potentially truncate\n * @param rectangleWidth is the width of the rectangle which will contain the text\n * @param padding is the space we need to leave between the rect lines and other text\n * @returns the name to show on the node which might be the truncated `text` if the `text` is too long\n */\nfunction truncateText(tspan: TSpanForTextMeasuring, text: string, rectangleWidth: number, padding: number) {\n  // NOTE: This method is the most-expensive in terms of rerendering components.\n  const textLengthForNodeName = rectangleWidth - padding; // This can likely be computed once and passed in.\n  // The following `select` statement injects a `tempText` element into the DOM. This injection\n  // (and subsequent removal) is causing a layout recalculation. This is a performance issue.\n  // Note that this code will always inject a `tempText` element, but doesn't always remove it. This is a bug.\n  if (fitsWithinNode(tspan, text, textLengthForNodeName)) {\n    return text;\n  }\n  // Computing the size of elipsis is performed with each node. This should be computed once and used everywhere.\n  // TODO: Compute the size of the elipsis once and use it everywhere.\n  const elipsisLength = computeElipsisLength(tspan);\n  let line: string = '';\n  // Calculate how much of the original text to show.\n  // TODO: The folllowing is O(n). We could use a binary search to make this faster: O(log(n)).\n  for (let i = 0; i < text.length; i++) {\n    line += text[i];\n    tspan.text(line);\n    const currentNode = tspan.node();\n    if (currentNode !== null) {\n      const w = currentNode!.getComputedTextLength();\n      if (w >= textLengthForNodeName - elipsisLength) {\n        line = line.slice(0, -1);\n        line += elipsis;\n        break;\n      }\n    }\n  }\n  tspan.text(null);\n  return line;\n}\n\ntype RenderedNodeAttributes = {\n  readonly reactId: string;\n  readonly gElementId: string;\n  readonly name: string;\n  readonly aria: string;\n  readonly trimmed: boolean;\n  readonly height: number;\n  readonly weightOffset: number;\n};\n\ntype RenderedLinkAttributes = {\n  readonly reactId: string;\n  readonly aria: string;\n  readonly from: string;\n};\n\ntype TSpanForTextMeasuring = D3Selection<SVGTSpanElement, unknown, HTMLElement, unknown>;\n\nfunction fitsWithinNode(tspan: TSpanForTextMeasuring, text: string, textLengthForNodeName: number): boolean {\n  const measurement = measureText(tspan, text);\n  if (measurement === undefined) {\n    return false;\n  }\n  return measurement <= textLengthForNodeName;\n}\n\nfunction measureText(tspan: TSpanForTextMeasuring, text: string | number): number | undefined {\n  try {\n    tspan.text(text);\n    return tspan.node()?.getComputedTextLength();\n  } finally {\n    tspan.text(null);\n  }\n}\n\nfunction computeElipsisLength(tspan: TSpanForTextMeasuring): number {\n  const measurement = measureText(tspan, elipsis);\n  return measurement === undefined ? 0 : measurement;\n}\n\nfunction computeLinkAttributes(\n  links: SLink[],\n  linkFrom: (node: SNode) => string,\n  linkAriaLabel: (link: SLink) => string,\n  linkId: string,\n): LinkItemValues<RenderedLinkAttributes> {\n  const result: LinkItemValues<RenderedLinkAttributes> = {};\n  links.forEach((link: SLink, index: number) => {\n    const sourceId = idFromNumberOrSNode(link.source);\n    let sourceToTarget = result[sourceId];\n    if (!sourceToTarget) {\n      sourceToTarget = {};\n      result[sourceId] = sourceToTarget;\n    }\n    sourceToTarget[idFromNumberOrSNode(link.target)] = {\n      reactId: `${linkId}-${index}`,\n      from: linkFrom(link.source as SNode),\n      aria: linkAriaLabel(link),\n    };\n  });\n\n  return result;\n}\n\ntype ItemPositions = {\n  readonly x0: number;\n  readonly y0: number;\n  readonly x1: number;\n  readonly y1: number;\n};\n\ntype SankeyLinkWithPositions = ItemPositions & {\n  readonly source: ItemPositions;\n  readonly target: ItemPositions;\n  readonly width: number;\n};\n\ntype AreaDataPoint = {\n  readonly x: number;\n  readonly y0: number;\n  readonly y1: number;\n};\n\nconst linkToDataPoints = (d: SankeyLinkWithPositions): [AreaDataPoint, AreaDataPoint] => {\n  const halfWidth = d.width * 0.5;\n  const y0 = d.y0;\n  const y1 = d.y1;\n  return [\n    { x: d.source.x1, y0: y0 + halfWidth, y1: y0 - halfWidth },\n    { x: d.target.x0, y0: y1 + halfWidth, y1: y1 - halfWidth },\n  ];\n};\n\nconst linkArea = d3Area<AreaDataPoint>()\n  .x((p: AreaDataPoint) => p.x)\n  .y0((p: AreaDataPoint) => p.y0)\n  .y1((p: AreaDataPoint) => p.y1)\n  .curve(d3CurveBasis);\n\nfunction nodeTextColor(\n  state: { selectedState: boolean; selectedNodes: Set<number>; selectedNode: SNode | undefined },\n  singleNode: SNode,\n): string {\n  return !(\n    !state.selectedState ||\n    (state.selectedNodes.has(singleNode.index!) && state.selectedNode) ||\n    !state.selectedNode\n  )\n    ? DEFAULT_TEXT_COLOR\n    : NON_SELECTED_TEXT_COLOR;\n}\n\ntype StringRenderer = {\n  linkFrom: (node: SNode) => string;\n};\n\ntype AccessibilityRenderer = {\n  emptyAriaLabel: string;\n  nodeAriaLabel: (node: SNode, weight: number) => string;\n  linkAriaLabel: (link: SLink) => string;\n};\n\nexport const SankeyChart: React.FunctionComponent<SankeyChartProps> = React.forwardRef<\n  HTMLDivElement,\n  SankeyChartProps\n>((props, forwardedRef) => {\n  const classes = useSankeyChartStyles(props);\n  const chartContainer = React.useRef<HTMLDivElement>(null);\n  const _reqID = React.useRef<number>();\n  const _linkId = useId('link');\n  const _chartId = useId('sankeyChart');\n  const _emptyChartId = useId('_SankeyChart_empty');\n  const _labelTooltipId = useId('tooltip');\n  const _margins = React.useRef<Margins>({ top: 36, right: 48, bottom: 32, left: 48 });\n  const { targetDocument, dir } = useFluent();\n  const _window = targetDocument?.defaultView;\n  const _isRtl: boolean = dir === 'rtl';\n  const _numColumns = React.useRef<number>(0);\n  const _nodeBarId = useId('nodeBar');\n  const _nodeGElementId = useId('nodeGElement');\n  const _arrowNavigationAttributes = useArrowNavigationGroup({ axis: 'vertical' });\n  const _tooltip = React.useRef<HTMLDivElement>(null);\n\n  const [containerHeight, setContainerHeight] = React.useState<number>(468);\n  const [containerWidth, setContainerWidth] = React.useState<number>(912);\n  const [selectedState, setSelectedState] = React.useState<boolean>(false);\n  const [selectedLinks, setSelectedLinks] = React.useState(new Set<number>());\n  const [selectedNodes, setSelectedNodes] = React.useState(new Set<number>());\n  const [isCalloutVisible, setCalloutVisible] = React.useState<boolean>(false);\n  const [selectedNode, setSelectedNode] = React.useState<SNode>();\n  const [color, setColor] = React.useState<string>();\n  const [xCalloutValue, setXCalloutValue] = React.useState<string>();\n  const [yCalloutValue, setYCalloutValue] = React.useState<string>();\n  const [descriptionMessage, setDescriptionMessage] = React.useState<string>();\n  const [clickPosition, setClickPosition] = React.useState({ x: 0, y: 0 });\n\n  React.useImperativeHandle(\n    props.componentRef,\n    () => ({\n      chartContainer: chartContainer.current,\n      toImage: (opts?: ImageExportOptions): Promise<string> => {\n        return toImage(chartContainer.current, undefined, _isRtl, opts);\n      },\n    }),\n    [],\n  );\n\n  const _fitParentContainer = React.useCallback((): void => {\n    _reqID.current = _window?.requestAnimationFrame(() => {\n      // NOTE: Calls to this method trigger a re-render.\n      const container = props.parentRef ? props.parentRef : chartContainer.current;\n      if (container) {\n        const currentContainerWidth =\n          props.reflowProps?.mode === 'min-width'\n            ? Math.max(container.getBoundingClientRect().width, _calculateChartMinWidth())\n            : container.getBoundingClientRect().width;\n        const currentContainerHeight = container.getBoundingClientRect().height;\n        setContainerWidth(currentContainerWidth);\n        setContainerHeight(currentContainerHeight);\n      }\n    });\n  }, [_window, props.reflowProps?.mode, props.parentRef]);\n\n  React.useEffect(() => {\n    _fitParentContainer();\n\n    return () => {\n      if (typeof _reqID.current === 'number') {\n        _window?.cancelAnimationFrame(_reqID.current);\n      }\n    };\n  }, [_fitParentContainer, _window, props.shouldResize]);\n\n  const _formatNumber = React.useCallback(\n    (value: number): string => {\n      return props.formatNumberOptions\n        ? value.toLocaleString(props.culture, props.formatNumberOptions)\n        : value.toString();\n    },\n    [props.formatNumberOptions, props.culture],\n  );\n\n  const _computeNodeAttributes = React.useCallback(\n    (nodes: SNode[], nodeAriaLabel: (node: SNode, weight: number) => string): ItemValues<RenderedNodeAttributes> => {\n      const result: ItemValues<RenderedNodeAttributes> = {};\n      const weightSpan = select('.nodeName').append('text').attr('class', 'tempText').append('tspan').text(null);\n      const nameSpan = select('.nodeName')\n        .append('text')\n        .attr('class', 'tempText')\n        .attr('font-size', '10')\n        .append('tspan')\n        .text(null);\n      nodes.forEach((singleNode: SNode, index: number) => {\n        const height = Math.max(singleNode.y1! - singleNode.y0!, 0);\n        let padding = 8;\n        let textLengthForNodeWeight = 0;\n\n        const nodeValue = singleNode.actualValue!;\n        // If the nodeWeight is in the same line as node description an extra padding\n        // of 6 px is required between node description and node weight.\n        if (height < MIN_HEIGHT_FOR_DOUBLINE_TYPE) {\n          padding = padding + 6;\n          // The following `select` statement injects a `tempText` element into the DOM. This injection\n          // (and subsequent removal) is causing a layout recalculation. This is a performance issue.\n          const measurement = measureText(weightSpan, _formatNumber(nodeValue));\n          if (measurement !== undefined) {\n            textLengthForNodeWeight = measurement;\n            padding = padding + textLengthForNodeWeight;\n          }\n        }\n        // Since the total width of the node is 124 and we are giving margin of 8px from the left .\n        // So the actual value on which it will be truncated is 124-8=116.\n        const truncatedname: string = truncateText(nameSpan, singleNode.name, NODE_WIDTH - 8, padding);\n        const isTruncated: boolean = truncatedname.slice(-3) === elipsis;\n        result[singleNode.nodeId] = {\n          reactId: `${_nodeBarId}-${index}`,\n          gElementId: `${_nodeGElementId}-${index}`,\n          name: truncatedname,\n          aria: nodeAriaLabel(singleNode, nodeValue),\n          trimmed: isTruncated,\n          height,\n          weightOffset: textLengthForNodeWeight,\n        };\n      });\n      selectAll('.tempText').remove();\n      return result;\n    },\n    [_formatNumber, _nodeBarId, _nodeGElementId],\n  );\n\n  const _linkCalloutAttributes = (singleLink: SLink, from: string) => {\n    setCalloutVisible(true);\n    setColor((singleLink.source as SNode).color!);\n    setXCalloutValue((singleLink.target as SNode).name);\n    setYCalloutValue(_formatNumber(singleLink.unnormalizedValue!));\n    setDescriptionMessage(from);\n  };\n\n  const _isChartEmpty = React.useCallback(() => {\n    const sankeyChartData = props.data?.SankeyChartData;\n    return !(sankeyChartData && sankeyChartData.nodes.length > 0 && sankeyChartData.links.length > 0);\n  }, [props.data]);\n\n  const _normalizeSankeyData = React.useCallback(\n    (\n      data: SankeyChartData,\n      _containerWidth: number,\n      _containerHeight: number,\n      colorsForNodes: string[] | undefined,\n      borderColorsForNodes: string[] | undefined,\n    ): NormalizedData => {\n      if (_isChartEmpty()) {\n        return { width: 0, height: 0, nodes: [], links: [] };\n      }\n\n      const { sankey, height, width } = preRenderLayout(_margins.current, _containerWidth, _containerHeight, _isRtl);\n      // Clone the data before mutating it (via the SankeyLayoutGenerator) so that we don't mutate the original data.\n      const transformed: SankeyChartData = duplicateData(data);\n      sankey(transformed);\n      // NOTE: After the prior line, `transformed` is now a more-complex object than the incoming `ISankeyChartData`.\n      // `transformed` should be cast to a more-specific type. This is a breaking change because we would be eliminating\n      // fields from `ISankeyChartData` and putting those fields on a now-local type. But doing so makes it clearer what\n      // the caller needs to supply and why. For example, the `actualValue` and `layer` fields of `ISNodeExtra` should\n      // both be moved. Similarly for `unnormalizedValue` in `ISLinkExtra`.\n      // `SankeyNodeMinimal` and `SankeyLinkMinimal` are both the types after `sankey(transformed)`, but have almost no\n      // bearing on the data before `sankey(transformed)` (which is basically nodes with ids and names along with links\n      // with source index, target index, and value).\n      const nodesInColumn = groupNodesByColumn(transformed);\n      _numColumns.current = Object.keys(nodesInColumn).length;\n      // Keep track of the original values of the links and their acccumulated values in the nodes\n      // Setting these in external objects so they cannot be mutated by other code.\n      // The IDs of nodes can be numbers or strings. But, the IDs of links are always the index into the \"nodes\" array.\n      // After the sankey layout is computed, the each link's `source` and `target` will have the ID of the node in the\n      // type originally specified in the Nodes array. Consequently, we get the values of those links after the sankey\n      // transformation.\n      const nodeValues = valuesOfNodes(transformed.nodes);\n      const linkValues = valuesOfLinks(transformed.links);\n      adjustOnePercentHeightNodes(nodesInColumn, nodeValues, linkValues);\n      adjustPadding(sankey, containerHeight - _margins.current.top! - _margins.current.bottom!, nodesInColumn);\n      // `sankey` is called a second time, probably to re-layout the nodes with the one-percent adjusted weights.\n      // NOTE: The second call to `sankey` is required to allow links to be hoverable.\n      // Without the second call, the links are not hoverable.\n      sankey(transformed);\n      populateNodeActualValue(transformed, nodeValues, linkValues);\n      assignNodeColors(transformed.nodes, colorsForNodes, borderColorsForNodes);\n      return {\n        width,\n        height,\n        nodes: transformed.nodes,\n        links: transformed.links,\n      };\n    },\n    [_isChartEmpty, _isRtl],\n  );\n\n  const _createLinks = (\n    dataLinks: SLink[],\n    linkAttributes: LinkItemValues<RenderedLinkAttributes>,\n  ): React.ReactNode[] | undefined => {\n    if (dataLinks) {\n      const linkId = _linkId;\n      return dataLinks.map((singleLink: SLink, index: number): React.ReactNode => {\n        const onMouseOut = () => {\n          _onStreamLeave(singleLink);\n        };\n        const { reactId, from, aria } = linkValue(linkAttributes, singleLink);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const dataPoints: Array<any> = linkToDataPoints(singleLink as unknown as SankeyLinkWithPositions);\n        const key = `${linkId}-${index}`;\n        const gradientId = `gradient-${key}`;\n        const gradientUrl = `url(#${gradientId})`;\n        const source = singleLink.source as SNode;\n        const target = singleLink.target as SNode;\n        // TODO: localize the aria-label string\n        return (\n          <g key={key}>\n            <defs>\n              <linearGradient id={gradientId} x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                <stop offset=\"0\" stopColor={source.color} />\n                <stop offset=\"100%\" stopColor={target.color} />\n              </linearGradient>\n            </defs>\n            <path\n              d={linkArea(dataPoints)!}\n              id={reactId}\n              fill={_fillStreamColors(singleLink, gradientUrl)}\n              stroke={_fillStreamBorder(singleLink, gradientUrl)}\n              strokeWidth=\"2\"\n              strokeOpacity={_getOpacityStreamBorder(singleLink)}\n              onMouseOver={event => _onStreamHover(event, singleLink, from)}\n              onMouseOut={onMouseOut}\n              onFocus={event => _onFocusLink(event, singleLink, from)}\n              onBlur={_onBlur}\n              fillOpacity={_getOpacityStream(singleLink)}\n              tabIndex={0}\n              aria-label={aria}\n              role=\"img\"\n            />\n          </g>\n        );\n      });\n    }\n    return [];\n  };\n\n  const _createNodes = (\n    dataNodes: SNode[],\n    nodeAttributes: ItemValues<RenderedNodeAttributes>,\n  ): React.ReactNode[] | undefined => {\n    if (dataNodes) {\n      const textAnchor = _isRtl ? 'end' : 'start';\n      return dataNodes.map((singleNode: SNode, index: number): React.ReactNode => {\n        const onMouseOut = () => {\n          _onLeave(singleNode);\n        };\n        const {\n          reactId: nodeId,\n          gElementId,\n          height,\n          trimmed: isTruncated,\n          name: truncatedName,\n          weightOffset: textLengthForNodeWeight,\n          aria,\n        } = nodeAttributes[singleNode.nodeId];\n        const tooTall = height > MIN_HEIGHT_FOR_DOUBLINE_TYPE;\n        const { name, actualValue, x0, x1, y0 } = singleNode;\n        const textColor = nodeTextColor({ selectedState, selectedNodes, selectedNode }, singleNode);\n        return (\n          <g key={index} id={gElementId}>\n            <rect\n              x={x0}\n              y={y0}\n              height={height}\n              width={x1! - x0!}\n              fill={_fillNodeColors(singleNode)}\n              id={nodeId}\n              onMouseOver={e => _onHover(singleNode, e)}\n              onMouseOut={onMouseOut}\n              onFocus={_onCloseCallout}\n              stroke={_fillNodeBorder(singleNode)}\n              strokeWidth=\"2\"\n              opacity=\"1\"\n              tabIndex={0}\n              aria-label={aria}\n              role=\"img\"\n            />\n            {height > MIN_HEIGHT_FOR_TYPE && (\n              <g className={classes.nodeTextContainer}>\n                <g className=\"nodeName\">\n                  <text\n                    id={`${nodeId}-name`}\n                    x={x0}\n                    y={y0}\n                    dy={'1.2em'}\n                    dx={'0.4em'}\n                    textAnchor={textAnchor}\n                    fontWeight=\"regular\"\n                    aria-hidden=\"true\"\n                    fill={textColor}\n                    fontSize={10}\n                    onMouseOver={e => _showTooltip(name, isTruncated, e)}\n                    onMouseOut={() => _hideTooltip()}\n                  >\n                    {truncatedName}\n                  </text>\n                </g>\n\n                <text\n                  x={tooTall ? x0 : x1! - textLengthForNodeWeight - 8}\n                  y={y0}\n                  dy={tooTall ? '2em' : '1em'}\n                  dx={tooTall ? '0.4em' : '0em'}\n                  textAnchor={textAnchor}\n                  fontWeight=\"bold\"\n                  aria-hidden=\"true\"\n                  fill={textColor}\n                  fontSize={14}\n                >\n                  {actualValue ? _formatNumber(actualValue) : actualValue}\n                </text>\n              </g>\n            )}\n          </g>\n        );\n      });\n    }\n  };\n\n  const _onLeave = (singleNode: SNode) => {\n    if (selectedState) {\n      setSelectedState(false);\n      setSelectedNodes(new Set<number>());\n      setSelectedLinks(new Set<number>());\n      setSelectedNode(undefined);\n    }\n  };\n\n  const _onHover = (singleNode: SNode, mouseEvent: React.MouseEvent<SVGElement>) => {\n    mouseEvent.persist();\n    _onCloseCallout();\n    const _selectedLinks = getSelectedLinks(singleNode);\n    const _selectedNodes = getSelectedNodes(_selectedLinks);\n    _selectedNodes.push(singleNode);\n    setSelectedState(true);\n    setSelectedNodes(new Set<number>(Array.from(_selectedNodes).map(node => node.index!)));\n    setSelectedLinks(new Set<number>(Array.from(_selectedLinks).map(link => link.index!)));\n    setSelectedNode(singleNode);\n    updatePosition(mouseEvent.clientX, mouseEvent.clientY);\n    setCalloutVisible(singleNode.y1! - singleNode.y0! < MIN_HEIGHT_FOR_TYPE);\n    setColor(singleNode.color);\n    setXCalloutValue(singleNode.name);\n    setYCalloutValue(_formatNumber(singleNode.actualValue!));\n  };\n\n  const _onStreamHover = (mouseEvent: React.MouseEvent<SVGElement>, singleLink: SLink, from: string) => {\n    mouseEvent.persist();\n    _onCloseCallout();\n    const { selectedLinks: _selectedLinks, selectedNodes: _selectedNodes } = getSelectedLinksforStreamHover(singleLink);\n    setSelectedState(true);\n    setSelectedNodes(new Set<number>(Array.from(_selectedNodes).map(node => node.index!)));\n    setSelectedLinks(new Set<number>(Array.from(_selectedLinks).map(link => link.index!)));\n    updatePosition(mouseEvent.clientX, mouseEvent.clientY);\n    _linkCalloutAttributes(singleLink, from);\n  };\n\n  const _onStreamLeave = (singleLink: SLink) => {\n    if (selectedState) {\n      setSelectedState(false);\n      setSelectedNodes(new Set<number>());\n      setSelectedLinks(new Set<number>());\n    }\n  };\n\n  const _onFocusLink = (focusEvent: React.FocusEvent<SVGElement>, singleLink: SLink, from: string): void => {\n    // There is a big difference in how \"Tab\" and the \"Arrow keys\" are handled in this diagram.\n    // In particular, I would expect the \"Down\" key to be like \"Tab\", but it jumps a little wildly. I'm not sure\n    // if this behavior is an accessiblity violation, but it we might want to investigate it.\n    focusEvent.persist();\n    _onCloseCallout();\n    const boundingRect = focusEvent.currentTarget.getBoundingClientRect();\n    const clientX = boundingRect.left + boundingRect.width / 2;\n    const clientY = boundingRect.top + boundingRect.height / 2;\n    updatePosition(clientX, clientY);\n    _linkCalloutAttributes(singleLink, from);\n  };\n\n  const _onCloseCallout = () => {\n    setCalloutVisible(false);\n    updatePosition(0, 0);\n    setDescriptionMessage('');\n  };\n\n  const _onBlur = (): void => {\n    /**/\n  };\n\n  const _fillNodeColors = (singleNode: SNode): string | undefined => {\n    if (!selectedState) {\n      return singleNode.color;\n    } else {\n      if (selectedNode && selectedNodes.has(singleNode.index!)) {\n        return selectedNode.color;\n      } else if (!selectedNode) {\n        return singleNode.color;\n      }\n    }\n  };\n\n  const _fillStreamColors = (singleLink: SLink, gradientUrl: string): string | undefined => {\n    if (selectedState && selectedLinks.has(singleLink.index!)) {\n      return selectedNode ? selectedNode.color : gradientUrl;\n    }\n  };\n\n  const _fillStreamBorder = (singleLink: SLink, gradientUrl: string): string => {\n    if (!selectedState) {\n      return NON_SELECTED_NODE_AND_STREAM_COLOR;\n    } else {\n      if (selectedLinks.has(singleLink.index!)) {\n        return selectedNode ? selectedNode.borderColor! : gradientUrl;\n      }\n      return NON_SELECTED_NODE_AND_STREAM_COLOR;\n    }\n  };\n\n  const _fillNodeBorder = (singleNode: SNode): string => {\n    if (!selectedState) {\n      return singleNode.borderColor!;\n    } else {\n      if (selectedNodes.has(singleNode.index!)) {\n        return selectedNode ? selectedNode.borderColor! : singleNode.borderColor!;\n      }\n      return singleNode.borderColor!;\n    }\n  };\n\n  const _getOpacityStream = (singleLink: SLink): number => {\n    if (selectedState) {\n      if (!selectedLinks.has(singleLink.index!)) {\n        return NON_SELECTED_OPACITY;\n      } else if (!selectedNode) {\n        return SELECTED_STREAM_OPACITY;\n      }\n    }\n    return REST_STREAM_OPACITY;\n  };\n\n  const _getOpacityStreamBorder = (singleLink: SLink): number => {\n    if (selectedState && !selectedLinks.has(singleLink.index!) && !selectedNode) {\n      return NON_SELECTED_STREAM_BORDER_OPACITY;\n    }\n\n    return NON_SELECTED_OPACITY;\n  };\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const _showTooltip = (text: string, checkTrcuncated: boolean, evt: any) => {\n    if (_tooltip.current && checkTrcuncated) {\n      //Fixing tooltip position by attaching it to the element rather than page\n      select(_tooltip.current)\n        .style('opacity', 0.9)\n        .style('color', tokens.colorNeutralForeground1)\n        .style('left', evt.pageX + 'px')\n        .style('top', evt.pageY - 28 + 'px')\n        .html(text);\n    }\n  };\n\n  const _hideTooltip = () => {\n    if (_tooltip.current) {\n      select(_tooltip.current).style('opacity', 0);\n    }\n  };\n\n  const _calculateChartMinWidth = (): number => {\n    return (\n      _margins.current.left! +\n      _margins.current.right! +\n      // total width of all node columns\n      _numColumns.current * NODE_WIDTH +\n      // minimum total width of all column gaps\n      (_numColumns.current - 1) * (NODE_WIDTH / 2)\n    );\n  };\n\n  const updatePosition = (newX: number, newY: number) => {\n    const threshold = 1; // Set a threshold for movement\n    const { x, y } = clickPosition;\n    // Calculate the distance moved\n    const distance = Math.sqrt(Math.pow(newX - x, 2) + Math.pow(newY - y, 2));\n    // Update the position only if the distance moved is greater than the threshold\n    if (distance > threshold) {\n      setClickPosition({ x: newX, y: newY });\n    }\n  };\n\n  // Prepare the localization utilities\n  const _strings: StringRenderer = React.useMemo(() => {\n    const fromString = props.strings?.linkFrom || 'From {0}';\n    // NOTE: The `node` parameter is the sankey-generated node on the link, and not the original `node` supplied\n    // by the caller.\n    return {\n      linkFrom: (node: SNode) => format(fromString, node.name),\n    };\n  }, [props.strings]);\n  const _accessibility: AccessibilityRenderer = React.useMemo(() => {\n    const linkString = props.accessibility?.linkAriaLabel || 'link from {0} to {1} with weight {2}';\n    const nodeString = props.accessibility?.nodeAriaLabel || 'node {0} with weight {1}';\n    return {\n      emptyAriaLabel: props.accessibility?.emptyAriaLabel || 'Graph has no data to display',\n      linkAriaLabel: (link: SLink) =>\n        format(\n          linkString,\n          (link.source as SNode).name,\n          (link.target as SNode).name,\n          link.unnormalizedValue ? _formatNumber(link.unnormalizedValue) : link.unnormalizedValue,\n        ),\n      nodeAriaLabel: (node: SNode, weight: number) => format(nodeString, node.name, _formatNumber(weight)),\n    };\n  }, [_formatNumber, props.accessibility]);\n\n  // Compute the position of each node and link\n  const { nodes, links, width, height } = React.useMemo(\n    () =>\n      _normalizeSankeyData(\n        props.data.SankeyChartData!,\n        containerWidth,\n        containerHeight,\n        props.colorsForNodes,\n        props.borderColorsForNodes,\n      ),\n    [\n      _normalizeSankeyData,\n      containerHeight,\n      containerWidth,\n      props.borderColorsForNodes,\n      props.colorsForNodes,\n      props.data,\n    ],\n  );\n  // Pre-compute some important attributes about nodes, specifically text\n  const nodeAttributes = React.useMemo(\n    () => _computeNodeAttributes(nodes, _accessibility.nodeAriaLabel),\n    [_accessibility, _computeNodeAttributes, nodes],\n  );\n  const linkAttributes = React.useMemo(\n    () => computeLinkAttributes(links, _strings.linkFrom, _accessibility.linkAriaLabel, _linkId),\n    [_accessibility, _linkId, _strings, links],\n  );\n\n  if (!_isChartEmpty()) {\n    // In FocusZone, the focus order is determined by the rendering order of the elements. We need to find\n    // a rendering order such that the focus moves through the nodes and links in a logical sequence.\n    // Rendering the nodes and links layer by layer in a vertical order seems to be the most effective solution\n    // with FocusZone. Although this focus order may not be entirely logical, it ensures that the focus moves\n    // sequentially and prevents links (especially skip layer links) from being rendered over the nodes.\n    const nodeLinkDomOrderArray: { layer: number; type: string; index: number }[] = [];\n    nodes.sort((a: SNode, b: SNode) => {\n      if (a.x0 !== b.x0) {\n        return a.x0! - b.x0!;\n      }\n      return a.y0! - b.y0!;\n    });\n    nodes.forEach((item: SNode, index) => {\n      nodeLinkDomOrderArray.push({ layer: item.layer!, type: 'node', index });\n    });\n    links.sort((a: SLink, b: SLink) => {\n      const asx0 = (a.source as SNode).x0;\n      const bsx0 = (b.source as SNode).x0;\n      if (asx0 !== bsx0) {\n        return asx0! - bsx0!;\n      }\n      return a.y0! - b.y0!;\n    });\n    links.forEach((item: SLink, index) => {\n      nodeLinkDomOrderArray.push({ layer: (item.source as SNode).layer!, type: 'link', index });\n    });\n    nodeLinkDomOrderArray.sort((a, b) => {\n      if (a.layer !== b.layer) {\n        return a.layer - b.layer;\n      }\n\n      if (a.type > b.type) {\n        return -1;\n      }\n      if (a.type < b.type) {\n        return 1;\n      }\n      return 0;\n    });\n\n    // Build the nodes and links as rendered in the UX.\n    const nodeData = _createNodes(nodes, nodeAttributes);\n    const linkData = _createLinks(links, linkAttributes);\n\n    const calloutProps: ChartPopoverProps = {\n      isPopoverOpen: isCalloutVisible,\n      clickPosition,\n      color,\n      XValue: xCalloutValue,\n      YValue: yCalloutValue,\n      descriptionMessage,\n      ...props.calloutProps!,\n    };\n    return (\n      <div className={classes.root} ref={chartContainer} onMouseLeave={_onCloseCallout}>\n        {/*\n        - Horizontal navigation has been disabled because the nodes and links are rendered vertically,\n        causing the left/right arrow keys to move focus up or down to the previous or next sibling element.\n        - Bidirectional navigation has been disabled because it causes the up/down arrow keys to move the focus\n        in a non-sequential and erratic manner within a 2D grid.\n        */}\n        <div className={classes.chartWrapper} {..._arrowNavigationAttributes}>\n          <svg width={width} height={height} id={_chartId} className={classes.chart}>\n            {nodeLinkDomOrderArray.map(item => {\n              if (item.type === 'node') {\n                return (\n                  <g key={nodes[item.index].nodeId} className={classes.nodes}>\n                    {nodeData![item.index]}\n                  </g>\n                );\n              } else {\n                return (\n                  <g\n                    key={`${(links[item.index].source as SNode).nodeId}-${(links[item.index].target as SNode).nodeId}`}\n                    className={classes.links}\n                    stroke={props.pathColor ? props.pathColor : tokens.colorStrokeFocus2}\n                    strokeOpacity={1}\n                  >\n                    {linkData![item.index]}\n                  </g>\n                );\n              }\n            })}\n          </svg>\n        </div>\n        {calloutProps.isPopoverOpen && <ChartPopover {...calloutProps} />}\n        <div id={_labelTooltipId} className={classes.toolTip} style={{ opacity: 0 }} ref={_tooltip} />\n      </div>\n    );\n  }\n  return <div id={_emptyChartId} role={'alert'} style={{ opacity: '0' }} aria-label={_accessibility.emptyAriaLabel} />;\n});\n\nSankeyChart.displayName = 'SankeyChart';\n"],"names":["React","useFluent_unstable","useFluent","tokens","useId","sum","d3Sum","sankey","d3Sankey","sankeyJustify","sankeyRight","select","selectAll","area","d3Area","curveBumpX","d3CurveBasis","useSankeyChartStyles","ChartPopover","useArrowNavigationGroup","format","toImage","PADDING_PERCENTAGE","NON_SELECTED_NODE_AND_STREAM_COLOR","DEFAULT_NODE_COLORS","fillColor","borderColor","MIN_HEIGHT_FOR_DOUBLINE_TYPE","MIN_HEIGHT_FOR_TYPE","REST_STREAM_OPACITY","NON_SELECTED_OPACITY","SELECTED_STREAM_OPACITY","NON_SELECTED_STREAM_BORDER_OPACITY","DEFAULT_TEXT_COLOR","NON_SELECTED_TEXT_COLOR","NODE_WIDTH","getSelectedNodes","selectedLinks","nodes","forEach","link","push","target","indexOf","source","getSelectedLinks","singleNode","q","Array","finalLinks","Set","sourceLinks","add","length","poppedLink","shift","node","targetLinks","getSelectedLinksforStreamHover","singleLink","finalNodes","poppedNode","selectedNodes","groupNodesByColumn","graph","nodesInColumn","columnId","layer","adjustOnePercentHeightNodes","computedNodes","originalLinks","totalColumnValue","Object","values","map","column","value","columnValue","index","totalPercentage","onePercent","columnNodes","nodeId","nodePercentage","actualValue","scalingRatio","normalized","changeColumnValue","originalNodeValue","normalizedNodeValue","linkValues","updateLinkValue","linkValue","unnormalizedValue","linkRatio","Math","max","populateNodeActualValue","data","links","adjustPadding","height","padding","nodePadding","minPadding","totalPaddingInColumn","y1","y0","min","idFromNumberOrSNode","duplicateData","valuesOfNodes","result","valuesOfLinks","sourceId","sourceToTarget","preRenderLayout","margins","containerWidth","containerHeight","isRtl","left","right","top","bottom","nodeWidth","extent","nodeAlign","width","elipsis","assignNodeColors","colorsForNodes","borderColorsForNodes","colors","borders","color","currentIndex","truncateText","tspan","text","rectangleWidth","textLengthForNodeName","fitsWithinNode","elipsisLength","computeElipsisLength","line","i","currentNode","w","getComputedTextLength","slice","measurement","measureText","undefined","computeLinkAttributes","linkFrom","linkAriaLabel","linkId","reactId","from","aria","linkToDataPoints","d","halfWidth","x","x1","x0","linkArea","p","curve","nodeTextColor","state","selectedState","has","selectedNode","SankeyChart","forwardRef","props","forwardedRef","classes","chartContainer","useRef","_reqID","_linkId","_chartId","_emptyChartId","_labelTooltipId","_margins","targetDocument","dir","_window","defaultView","_isRtl","_numColumns","_nodeBarId","_nodeGElementId","_arrowNavigationAttributes","axis","_tooltip","setContainerHeight","useState","setContainerWidth","setSelectedState","setSelectedLinks","setSelectedNodes","isCalloutVisible","setCalloutVisible","setSelectedNode","setColor","xCalloutValue","setXCalloutValue","yCalloutValue","setYCalloutValue","descriptionMessage","setDescriptionMessage","clickPosition","setClickPosition","y","useImperativeHandle","componentRef","current","opts","_fitParentContainer","useCallback","requestAnimationFrame","container","parentRef","currentContainerWidth","reflowProps","mode","getBoundingClientRect","_calculateChartMinWidth","currentContainerHeight","useEffect","cancelAnimationFrame","shouldResize","_formatNumber","formatNumberOptions","toLocaleString","culture","toString","_computeNodeAttributes","nodeAriaLabel","weightSpan","append","attr","nameSpan","textLengthForNodeWeight","nodeValue","truncatedname","name","isTruncated","gElementId","trimmed","weightOffset","remove","_linkCalloutAttributes","_isChartEmpty","sankeyChartData","SankeyChartData","_normalizeSankeyData","_containerWidth","_containerHeight","transformed","keys","nodeValues","_createLinks","dataLinks","linkAttributes","onMouseOut","_onStreamLeave","dataPoints","key","gradientId","gradientUrl","g","defs","linearGradient","id","x2","y2","stop","offset","stopColor","path","fill","_fillStreamColors","stroke","_fillStreamBorder","strokeWidth","strokeOpacity","_getOpacityStreamBorder","onMouseOver","event","_onStreamHover","onFocus","_onFocusLink","onBlur","_onBlur","fillOpacity","_getOpacityStream","tabIndex","aria-label","role","_createNodes","dataNodes","nodeAttributes","textAnchor","_onLeave","truncatedName","tooTall","textColor","rect","_fillNodeColors","e","_onHover","_onCloseCallout","_fillNodeBorder","opacity","className","nodeTextContainer","dy","dx","fontWeight","aria-hidden","fontSize","_showTooltip","_hideTooltip","mouseEvent","persist","_selectedLinks","_selectedNodes","updatePosition","clientX","clientY","focusEvent","boundingRect","currentTarget","checkTrcuncated","evt","style","colorNeutralForeground1","pageX","pageY","html","newX","newY","threshold","distance","sqrt","pow","_strings","useMemo","fromString","strings","_accessibility","linkString","accessibility","nodeString","emptyAriaLabel","weight","nodeLinkDomOrderArray","sort","a","b","item","type","asx0","bsx0","nodeData","linkData","calloutProps","isPopoverOpen","XValue","YValue","div","root","ref","onMouseLeave","chartWrapper","svg","chart","pathColor","colorStrokeFocus2","toolTip","displayName"],"mappings":"AAAA;AAEA,YAAYA,WAAW,QAAQ;AAC/B,SAASC,sBAAsBC,SAAS,QAAQ,kCAAkC;AAClF,SAASC,MAAM,QAAQ,wBAAwB;AAC/C,SAASC,KAAK,QAAQ,4BAA4B;AAClD,SAASC,OAAOC,KAAK,QAAQ,WAAW;AACxC,SAAoCC,UAAUC,QAAQ,EAAEC,aAAa,EAAEC,WAAW,QAAQ,YAAY;AACtG,SAAmCC,MAAM,EAAEC,SAAS,QAAQ,eAAe;AAC3E,SAASC,QAAQC,MAAM,EAAEC,cAAcC,YAAY,QAAQ,WAAW;AAGtE,SAASC,oBAAoB,QAAQ,gCAAgC;AACrE,SAASC,YAAY,QAA2B,4BAA4B;AAC5E,SAASC,uBAAuB,QAAQ,0BAA0B;AAClE,SAASC,MAAM,QAAQ,yBAAyB;AAChD,SAASC,OAAO,QAAQ,qCAAqC;AAE7D,MAAMC,qBAAqB;AAiB3B,MAAMC,qCAA6C;AACnD,MAAMC,sBAAoC;IACxC;QAAEC,WAAW;QAAWC,aAAa;IAAU;IAC/C;QAAED,WAAW;QAAWC,aAAa;IAAU;IAC/C;QAAED,WAAW;QAAWC,aAAa;IAAU;IAC/C;QAAED,WAAW;QAAWC,aAAa;IAAU;IAC/C;QAAED,WAAW;QAAWC,aAAa;IAAU;IAC/C;QAAED,WAAW;QAAWC,aAAa;IAAU;IAC/C;QAAED,WAAW;QAAWC,aAAa;IAAU;IAC/C;QAAED,WAAW;QAAWC,aAAa;IAAU;IAC/C;QAAED,WAAW;QAAWC,aAAa;IAAU;IAC/C;QAAED,WAAW;QAAWC,aAAa;IAAU;CAChD;AAED,MAAMC,+BAA+B;AACrC,MAAMC,sBAAsB;AAC5B,MAAMC,sBAA8B;AACpC,MAAMC,uBAA+B;AACrC,MAAMC,0BAAkC;AACxC,MAAMC,qCAA6C;AACnD,MAAMC,qBAA6B;AACnC,MAAMC,0BAAkC;AACxC,MAAMC,aAAa;AAEnB,8DAA8D;AAC9D,SAASC,iBAAiBC,aAAyB;IACjD,MAAMC,QAAiB,EAAE;IACzBD,cAAcE,OAAO,CAACC,CAAAA;QACpBF,MAAMG,IAAI,CAACD,KAAKE,MAAM;QAEtB,IAAIJ,MAAMK,OAAO,CAACH,KAAKI,MAAM,MAAe,CAAC,GAAG;YAC9CN,MAAMG,IAAI,CAACD,KAAKI,MAAM;QACxB;IACF;IACA,OAAON;AACT;AAEA,SAASO,iBAAiBC,UAAiB;IACzC,oFAAoF;IACpF,MAAMC,IAAS,IAAIC;IACnB,MAAMC,aAAyB,IAAIC;IAEnCJ,WAAWK,WAAW,CAAEZ,OAAO,CAAC,CAACC;QAC/BO,EAAEN,IAAI,CAACD;QACPS,WAAWG,GAAG,CAACZ;IACjB;IAEA,MAAOO,EAAEM,MAAM,GAAG,EAAG;QACnB,MAAMC,aAAoBP,EAAEQ,KAAK;QACjC,MAAMC,OAAcF,WAAWZ,MAAM;QACrC,IAAIc,QAAQA,KAAKL,WAAW,EAAE;YAC5BK,KAAKL,WAAW,CAACZ,OAAO,CAAC,CAACC;gBACxBS,WAAWG,GAAG,CAACZ;gBACfO,EAAEN,IAAI,CAACD;YACT;QACF;IACF;IAEA,IAAIM,WAAWW,WAAW,EAAE;QAC1BX,WAAWW,WAAW,CAAClB,OAAO,CAAC,CAACC;YAC9BO,EAAEN,IAAI,CAACD;YACPS,WAAWG,GAAG,CAACZ;QACjB;IACF;IAEA,MAAOO,EAAEM,MAAM,GAAG,EAAG;QACnB,MAAMC,aAAoBP,EAAEQ,KAAK;QACjC,MAAMC,OAAcF,WAAWV,MAAM;QACrC,IAAIY,QAAQA,KAAKC,WAAW,EAAE;YAC5BD,KAAKC,WAAW,CAAClB,OAAO,CAAC,CAACC;gBACxBS,WAAWG,GAAG,CAACZ;gBACfO,EAAEN,IAAI,CAACD;YACT;QACF;IACF;IAEA,OAAOS;AACT;AAEA,SAASS,+BAA+BC,UAAiB;IAIvD,oFAAoF;IACpF,MAAMZ,IAAS,IAAIC;IACnB,MAAMC,aAAyB,IAAIC;IACnC,MAAMU,aAAyB,IAAIV;IAEnCH,EAAEN,IAAI,CAACkB,WAAWf,MAAM;IACxBK,WAAWG,GAAG,CAACO;IACf,MAAOZ,EAAEM,MAAM,GAAG,EAAG;QACnB,MAAMQ,aAAoBd,EAAEQ,KAAK;QACjCK,WAAWR,GAAG,CAACS;QACf,IAAIA,WAAWJ,WAAW,IAAII,WAAWJ,WAAW,CAACJ,MAAM,GAAG,GAAG;YAC/DQ,WAAWJ,WAAW,CAAClB,OAAO,CAAC,CAACC;gBAC9BO,EAAEN,IAAI,CAACD,KAAKI,MAAM;gBAClBK,WAAWG,GAAG,CAACZ;YACjB;QACF;IACF;IAEAO,EAAEN,IAAI,CAACkB,WAAWjB,MAAM;IAExB,MAAOK,EAAEM,MAAM,GAAG,EAAG;QACnB,MAAMQ,aAAoBd,EAAEQ,KAAK;QACjCK,WAAWR,GAAG,CAACS;QACf,IAAIA,WAAWV,WAAW,IAAIU,WAAWV,WAAW,CAACE,MAAM,GAAG,GAAG;YAC/DQ,WAAWV,WAAW,CAACZ,OAAO,CAAC,CAACC;gBAC9BO,EAAEN,IAAI,CAACD,KAAKE,MAAM;gBAClBO,WAAWG,GAAG,CAACZ;YACjB;QACF;IACF;IAEA,OAAO;QACLH,eAAeY;QACfa,eAAeF;IACjB;AACF;AAEA;;CAEC,GACD,mCAAmC;AACnC,OAAO,SAASG,mBAAmBC,KAAsB;IACvD,MAAMC,gBAAgC,CAAC;IACvCD,MAAM1B,KAAK,CAACC,OAAO,CAAC,CAACiB;QACnB,MAAMU,WAAWV,KAAKW,KAAK;QAC3B,IAAIF,aAAa,CAACC,SAAS,EAAE;YAC3BD,aAAa,CAACC,SAAS,CAACzB,IAAI,CAACe;QAC/B,OAAO;YACLS,aAAa,CAACC,SAAS,GAAG;gBAACV;aAAK;QAClC;IACF;IACA,OAAOS;AACT;AAEA;;CAEC,GACD,SAASG,4BACPH,aAA6B,EAC7BI,aAAyB,EACzBC,aAAyB;IAEzB,MAAMC,mBAAmBC,OAAOC,MAAM,CAACR,eAAeS,GAAG,CAAC,CAACC;QACzD,OAAOrE,MAAMqE,QAAQ,CAACnB,OAAgBA,KAAKoB,KAAK;IAClD;IACAL,iBAAiBhC,OAAO,CAAC,CAACsC,aAAqBC;QAC7C,IAAIC,kBAAkB;QACtB,MAAMC,aAAa,OAAOH;QAC1B,MAAMI,cAAchB,aAAa,CAACa,MAAM;QACxCG,YAAY1C,OAAO,CAAC,CAACiB;YACnB,MAAMoB,QAAQP,aAAa,CAACb,KAAK0B,MAAM,CAAC;YACxC,MAAMC,iBAAiB,AAACP,QAAQC,cAAe;YAC/CrB,KAAK4B,WAAW,GAAGR;YACnB,qEAAqE;YACrE,IAAIO,iBAAiB,GAAG;gBACtB3B,KAAKoB,KAAK,GAAGI;gBACbD,kBAAkBA,kBAAkB;YACtC,OAAO;gBACLA,kBAAkBA,kBAAkBI;YACtC;QACF;QACA,0GAA0G;QAC1G,MAAME,eAAeN,oBAAoB,IAAIA,kBAAkB,MAAM;QACrE,IAAIM,eAAe,GAAG;YACpB,yGAAyG;YACzG,+FAA+F;YAC/FJ,YAAY1C,OAAO,CAAC,CAACiB;gBACnB,MAAM8B,aAAc9B,KAAKoB,KAAK,GAAGpB,KAAKoB,KAAK,GAAIS;gBAC/C,8FAA8F;gBAC9FE,kBAAkB/B,MAAMa,aAAa,CAACb,KAAK0B,MAAM,CAAC,EAAEI,YAAYhB;YAClE;QACF;IACF;AACF;AAEA;;CAEC,GACD,SAASiB,kBACP/B,IAAW,EACXgC,iBAAyB,EACzBC,mBAA2B,EAC3BC,UAAsB;IAEtB,yGAAyG;IACzG,uFAAuF;IACvF,MAAMC,kBAAkB,CAACnD;QACvB,MAAMoC,QAAQgB,UAAUF,YAAYlD;QACpCA,KAAKqD,iBAAiB,GAAGjB;QACzB,MAAMkB,YAAYlB,QAAQY;QAC1BhD,KAAKoC,KAAK,GAAGmB,KAAKC,GAAG,CAACP,sBAAsBK,WAAWtD,KAAKoC,KAAK;IACnE;IACApB,KAAKL,WAAW,CAAEZ,OAAO,CAACoD;IAC1BnC,KAAKC,WAAW,CAAElB,OAAO,CAACoD;AAC5B;AAEA;;;CAGC,GACD,SAASM,wBAAwBC,IAAqB,EAAE7B,aAAyB,EAAEC,aAAyB;IAC1G4B,KAAKC,KAAK,CAAC5D,OAAO,CAAC,CAACC;QAClB,IAAI,CAACA,KAAKqD,iBAAiB,EAAE;YAC3BrD,KAAKqD,iBAAiB,GAAGD,UAAUtB,eAAe9B;QACpD;IACF;IACA0D,KAAK5D,KAAK,CAACC,OAAO,CAAC,CAACiB;QAClBA,KAAK4B,WAAW,GAAGf,aAAa,CAACb,KAAK0B,MAAM,CAAW;IACzD;AACF;AAEA;;;;CAIC,GACD,kCAAkC;AAClC,OAAO,SAASkB,cAAc7F,MAA6B,EAAE8F,MAAc,EAAEpC,aAA6B;IACxG,IAAIqC,UAAU/F,OAAOgG,WAAW;IAChC,MAAMC,aAAalF,qBAAqB+E;IACxC7B,OAAOC,MAAM,CAACR,eAAe1B,OAAO,CAAC,CAACoC;QACpC,MAAM8B,uBAAuBJ,SAAS/F,MAAMqE,QAAQ,CAACnB,OAAgBA,KAAKkD,EAAE,GAAIlD,KAAKmD,EAAE;QACvF,IAAIH,aAAaC,sBAAsB;YACrC,sGAAsG;YACtG,mBAAmB;YACnBH,UAAUP,KAAKa,GAAG,CAACN,SAASE,aAAc7B,CAAAA,OAAOtB,MAAM,GAAG,CAAA;QAC5D;IACF;IACA9C,OAAOgG,WAAW,CAACD;AACrB;AAEA,SAASO,oBAAoBrD,IAAoB;IAC/C,IAAI,OAAOA,SAAS,UAAU;QAC5B,OAAOA;IACT;IACA,OAAOA,KAAK0B,MAAM;AACpB;AAEA;;;;CAIC,GACD,SAAS4B,cAAcZ,IAAqB;IAC1C,OAAO;QACL5D,OAAO4D,KAAK5D,KAAK,CAACoC,GAAG,CACnB,CAAClB,OAAwB,CAAA;gBACvB,GAAGA,IAAI;YACT,CAAA;QAEF2C,OAAOD,KAAKC,KAAK,CAACzB,GAAG,CACnB,CAAClC,OAAwB,CAAA;gBACvB,GAAGA,IAAI;YACT,CAAA;IAEJ;AACF;AAEA,SAASuE,cAAczE,KAAc;IACnC,MAAM0E,SAAqB,CAAC;IAC5B1E,MAAMC,OAAO,CAAC,CAACiB;QACbwD,MAAM,CAACxD,KAAK0B,MAAM,CAAW,GAAG1B,KAAKoB,KAAK;IAC5C;IACA,OAAOoC;AACT;AAEA,SAASC,cAAcd,KAAc;IACnC,MAAMa,SAAqB,CAAC;IAC5Bb,MAAM5D,OAAO,CAAC,CAACC;QACb,MAAM0E,WAAWL,oBAAoBrE,KAAKI,MAAM;QAChD,IAAIuE,iBAAiBH,MAAM,CAACE,SAAS;QACrC,IAAI,CAACC,gBAAgB;YACnBA,iBAAiB,CAAC;YAClBH,MAAM,CAACE,SAAS,GAAGC;QACrB;QACAA,cAAc,CAACN,oBAAoBrE,KAAKE,MAAM,EAAE,GAAGF,KAAKoC,KAAK;IAC/D;IACA,OAAOoC;AACT;AAEA,SAASpB,UAAatB,aAAgC,EAAE9B,IAAW;IACjE,OAAO8B,aAAa,CAACuC,oBAAoBrE,KAAKI,MAAM,EAAE,CAACiE,oBAAoBrE,KAAKE,MAAM,EAAE;AAC1F;AAEA,mCAAmC;AACnC,OAAO,SAAS0E,gBACdC,OAAgB,EAChBC,cAAsB,EACtBC,eAAuB,EACvBC,KAAc;IAEd,MAAM,EAAEC,IAAI,EAAEC,KAAK,EAAEC,GAAG,EAAEC,MAAM,EAAE,GAAGP;IAErC,MAAM9G,SAASC,WACZqH,SAAS,CAAC1F,YACV2F,MAAM,CAAC;QACN;YAACL;YAAOE;SAAK;QACb;YAACL,iBAAiBI;YAAQH,kBAAkBK;SAAQ;KACrD,EACAG,SAAS,CAACP,QAAQ9G,cAAcD;IAEnC,OAAO;QAAEF;QAAQ8F,QAAQkB;QAAiBS,OAAOV;IAAe;AAClE;AAEA,MAAMW,UAAU;AAEhB;;;CAGC,GACD,SAASC,iBACP5F,KAAc,EACd6F,cAAoC,EACpCC,oBAA0C;IAE1C,IAAIC;IACJ,IAAIC;IACJ,IAAIH,kBAAkBC,sBAAsB;QAC1CC,SAASF;QACTG,UAAUF;IACZ,OAAO;QACLC,SAAS7G,oBAAoBkD,GAAG,CAAC6D,CAAAA,QAASA,MAAM9G,SAAS;QACzD6G,UAAU9G,oBAAoBkD,GAAG,CAAC6D,CAAAA,QAASA,MAAM7G,WAAW;IAC9D;IACA,IAAI8G,eAAe;IACnBlG,MAAMC,OAAO,CAAC,CAACiB;QACb,IAAI,CAACA,KAAK+E,KAAK,IAAI,CAAC/E,KAAK9B,WAAW,EAAE;YACpC8B,KAAK+E,KAAK,GAAGF,MAAM,CAACG,aAAa;YACjChF,KAAK9B,WAAW,GAAG4G,OAAO,CAACE,aAAa;QAC1C,OAAO,IAAIhF,KAAK+E,KAAK,IAAI,CAAC/E,KAAK9B,WAAW,EAAE;YAC1C8B,KAAK9B,WAAW,GAAG;QACrB,OAAO,IAAI8B,KAAK9B,WAAW,IAAI,CAAC8B,KAAK+E,KAAK,EAAE;YAC1C/E,KAAK+E,KAAK,GAAG;QACf;QACAC,eAAe,AAACA,CAAAA,eAAe,CAAA,IAAKH,OAAOhF,MAAM;IACnD;AACF;AAEA;;;;;;;CAOC,GACD,SAASoF,aAAaC,KAA4B,EAAEC,IAAY,EAAEC,cAAsB,EAAEtC,OAAe;IACvG,8EAA8E;IAC9E,MAAMuC,wBAAwBD,iBAAiBtC,SAAS,kDAAkD;IAC1G,6FAA6F;IAC7F,2FAA2F;IAC3F,4GAA4G;IAC5G,IAAIwC,eAAeJ,OAAOC,MAAME,wBAAwB;QACtD,OAAOF;IACT;IACA,+GAA+G;IAC/G,oEAAoE;IACpE,MAAMI,gBAAgBC,qBAAqBN;IAC3C,IAAIO,OAAe;IACnB,mDAAmD;IACnD,6FAA6F;IAC7F,IAAK,IAAIC,IAAI,GAAGA,IAAIP,KAAKtF,MAAM,EAAE6F,IAAK;QACpCD,QAAQN,IAAI,CAACO,EAAE;QACfR,MAAMC,IAAI,CAACM;QACX,MAAME,cAAcT,MAAMlF,IAAI;QAC9B,IAAI2F,gBAAgB,MAAM;YACxB,MAAMC,IAAID,YAAaE,qBAAqB;YAC5C,IAAID,KAAKP,wBAAwBE,eAAe;gBAC9CE,OAAOA,KAAKK,KAAK,CAAC,GAAG,CAAC;gBACtBL,QAAQhB;gBACR;YACF;QACF;IACF;IACAS,MAAMC,IAAI,CAAC;IACX,OAAOM;AACT;AAoBA,SAASH,eAAeJ,KAA4B,EAAEC,IAAY,EAAEE,qBAA6B;IAC/F,MAAMU,cAAcC,YAAYd,OAAOC;IACvC,IAAIY,gBAAgBE,WAAW;QAC7B,OAAO;IACT;IACA,OAAOF,eAAeV;AACxB;AAEA,SAASW,YAAYd,KAA4B,EAAEC,IAAqB;IACtE,IAAI;YAEKD;QADPA,MAAMC,IAAI,CAACA;QACX,QAAOD,cAAAA,MAAMlF,IAAI,gBAAVkF,kCAAAA,YAAcW,qBAAqB;IAC5C,SAAU;QACRX,MAAMC,IAAI,CAAC;IACb;AACF;AAEA,SAASK,qBAAqBN,KAA4B;IACxD,MAAMa,cAAcC,YAAYd,OAAOT;IACvC,OAAOsB,gBAAgBE,YAAY,IAAIF;AACzC;AAEA,SAASG,sBACPvD,KAAc,EACdwD,QAAiC,EACjCC,aAAsC,EACtCC,MAAc;IAEd,MAAM7C,SAAiD,CAAC;IACxDb,MAAM5D,OAAO,CAAC,CAACC,MAAasC;QAC1B,MAAMoC,WAAWL,oBAAoBrE,KAAKI,MAAM;QAChD,IAAIuE,iBAAiBH,MAAM,CAACE,SAAS;QACrC,IAAI,CAACC,gBAAgB;YACnBA,iBAAiB,CAAC;YAClBH,MAAM,CAACE,SAAS,GAAGC;QACrB;QACAA,cAAc,CAACN,oBAAoBrE,KAAKE,MAAM,EAAE,GAAG;YACjDoH,SAAS,GAAGD,OAAO,CAAC,EAAE/E,OAAO;YAC7BiF,MAAMJ,SAASnH,KAAKI,MAAM;YAC1BoH,MAAMJ,cAAcpH;QACtB;IACF;IAEA,OAAOwE;AACT;AAqBA,MAAMiD,mBAAmB,CAACC;IACxB,MAAMC,YAAYD,EAAElC,KAAK,GAAG;IAC5B,MAAMrB,KAAKuD,EAAEvD,EAAE;IACf,MAAMD,KAAKwD,EAAExD,EAAE;IACf,OAAO;QACL;YAAE0D,GAAGF,EAAEtH,MAAM,CAACyH,EAAE;YAAE1D,IAAIA,KAAKwD;YAAWzD,IAAIC,KAAKwD;QAAU;QACzD;YAAEC,GAAGF,EAAExH,MAAM,CAAC4H,EAAE;YAAE3D,IAAID,KAAKyD;YAAWzD,IAAIA,KAAKyD;QAAU;KAC1D;AACH;AAEA,MAAMI,WAAWzJ,SACdsJ,CAAC,CAAC,CAACI,IAAqBA,EAAEJ,CAAC,EAC3BzD,EAAE,CAAC,CAAC6D,IAAqBA,EAAE7D,EAAE,EAC7BD,EAAE,CAAC,CAAC8D,IAAqBA,EAAE9D,EAAE,EAC7B+D,KAAK,CAACzJ;AAET,SAAS0J,cACPC,KAA8F,EAC9F7H,UAAiB;IAEjB,OAAO,CACL,CAAA,CAAC6H,MAAMC,aAAa,IACnBD,MAAM7G,aAAa,CAAC+G,GAAG,CAAC/H,WAAWgC,KAAK,KAAM6F,MAAMG,YAAY,IACjE,CAACH,MAAMG,YAAY,AAAD,IAEhB7I,qBACAC;AACN;AAYA,OAAO,MAAM6I,4BAAyD/K,MAAMgL,UAAU,CAGpF,CAACC,OAAOC;QAwDKD;IAvDb,MAAME,UAAUlK,qBAAqBgK;IACrC,MAAMG,iBAAiBpL,MAAMqL,MAAM,CAAiB;IACpD,MAAMC,SAAStL,MAAMqL,MAAM;IAC3B,MAAME,UAAUnL,MAAM;IACtB,MAAMoL,WAAWpL,MAAM;IACvB,MAAMqL,gBAAgBrL,MAAM;IAC5B,MAAMsL,kBAAkBtL,MAAM;IAC9B,MAAMuL,WAAW3L,MAAMqL,MAAM,CAAU;QAAE1D,KAAK;QAAID,OAAO;QAAIE,QAAQ;QAAIH,MAAM;IAAG;IAClF,MAAM,EAAEmE,cAAc,EAAEC,GAAG,EAAE,GAAG3L;IAChC,MAAM4L,UAAUF,2BAAAA,qCAAAA,eAAgBG,WAAW;IAC3C,MAAMC,SAAkBH,QAAQ;IAChC,MAAMI,cAAcjM,MAAMqL,MAAM,CAAS;IACzC,MAAMa,aAAa9L,MAAM;IACzB,MAAM+L,kBAAkB/L,MAAM;IAC9B,MAAMgM,6BAA6BjL,wBAAwB;QAAEkL,MAAM;IAAW;IAC9E,MAAMC,WAAWtM,MAAMqL,MAAM,CAAiB;IAE9C,MAAM,CAAC9D,iBAAiBgF,mBAAmB,GAAGvM,MAAMwM,QAAQ,CAAS;IACrE,MAAM,CAAClF,gBAAgBmF,kBAAkB,GAAGzM,MAAMwM,QAAQ,CAAS;IACnE,MAAM,CAAC5B,eAAe8B,iBAAiB,GAAG1M,MAAMwM,QAAQ,CAAU;IAClE,MAAM,CAACnK,eAAesK,iBAAiB,GAAG3M,MAAMwM,QAAQ,CAAC,IAAItJ;IAC7D,MAAM,CAACY,eAAe8I,iBAAiB,GAAG5M,MAAMwM,QAAQ,CAAC,IAAItJ;IAC7D,MAAM,CAAC2J,kBAAkBC,kBAAkB,GAAG9M,MAAMwM,QAAQ,CAAU;IACtE,MAAM,CAAC1B,cAAciC,gBAAgB,GAAG/M,MAAMwM,QAAQ;IACtD,MAAM,CAACjE,OAAOyE,SAAS,GAAGhN,MAAMwM,QAAQ;IACxC,MAAM,CAACS,eAAeC,iBAAiB,GAAGlN,MAAMwM,QAAQ;IACxD,MAAM,CAACW,eAAeC,iBAAiB,GAAGpN,MAAMwM,QAAQ;IACxD,MAAM,CAACa,oBAAoBC,sBAAsB,GAAGtN,MAAMwM,QAAQ;IAClE,MAAM,CAACe,eAAeC,iBAAiB,GAAGxN,MAAMwM,QAAQ,CAAC;QAAEpC,GAAG;QAAGqD,GAAG;IAAE;IAEtEzN,MAAM0N,mBAAmB,CACvBzC,MAAM0C,YAAY,EAClB,IAAO,CAAA;YACLvC,gBAAgBA,eAAewC,OAAO;YACtCvM,SAAS,CAACwM;gBACR,OAAOxM,QAAQ+J,eAAewC,OAAO,EAAEnE,WAAWuC,QAAQ6B;YAC5D;QACF,CAAA,GACA,EAAE;IAGJ,MAAMC,sBAAsB9N,MAAM+N,WAAW,CAAC;QAC5CzC,OAAOsC,OAAO,GAAG9B,oBAAAA,8BAAAA,QAASkC,qBAAqB,CAAC;YAC9C,kDAAkD;YAClD,MAAMC,YAAYhD,MAAMiD,SAAS,GAAGjD,MAAMiD,SAAS,GAAG9C,eAAewC,OAAO;YAC5E,IAAIK,WAAW;oBAEXhD;gBADF,MAAMkD,wBACJlD,EAAAA,qBAAAA,MAAMmD,WAAW,cAAjBnD,yCAAAA,mBAAmBoD,IAAI,MAAK,cACxBtI,KAAKC,GAAG,CAACiI,UAAUK,qBAAqB,GAAGtG,KAAK,EAAEuG,6BAClDN,UAAUK,qBAAqB,GAAGtG,KAAK;gBAC7C,MAAMwG,yBAAyBP,UAAUK,qBAAqB,GAAGjI,MAAM;gBACvEoG,kBAAkB0B;gBAClB5B,mBAAmBiC;YACrB;QACF;IACF,GAAG;QAAC1C;SAASb,qBAAAA,MAAMmD,WAAW,cAAjBnD,yCAAAA,mBAAmBoD,IAAI;QAAEpD,MAAMiD,SAAS;KAAC;IAEtDlO,MAAMyO,SAAS,CAAC;QACdX;QAEA,OAAO;YACL,IAAI,OAAOxC,OAAOsC,OAAO,KAAK,UAAU;gBACtC9B,oBAAAA,8BAAAA,QAAS4C,oBAAoB,CAACpD,OAAOsC,OAAO;YAC9C;QACF;IACF,GAAG;QAACE;QAAqBhC;QAASb,MAAM0D,YAAY;KAAC;IAErD,MAAMC,gBAAgB5O,MAAM+N,WAAW,CACrC,CAACnJ;QACC,OAAOqG,MAAM4D,mBAAmB,GAC5BjK,MAAMkK,cAAc,CAAC7D,MAAM8D,OAAO,EAAE9D,MAAM4D,mBAAmB,IAC7DjK,MAAMoK,QAAQ;IACpB,GACA;QAAC/D,MAAM4D,mBAAmB;QAAE5D,MAAM8D,OAAO;KAAC;IAG5C,MAAME,yBAAyBjP,MAAM+N,WAAW,CAC9C,CAACzL,OAAgB4M;QACf,MAAMlI,SAA6C,CAAC;QACpD,MAAMmI,aAAaxO,OAAO,aAAayO,MAAM,CAAC,QAAQC,IAAI,CAAC,SAAS,YAAYD,MAAM,CAAC,SAASzG,IAAI,CAAC;QACrG,MAAM2G,WAAW3O,OAAO,aACrByO,MAAM,CAAC,QACPC,IAAI,CAAC,SAAS,YACdA,IAAI,CAAC,aAAa,MAClBD,MAAM,CAAC,SACPzG,IAAI,CAAC;QACRrG,MAAMC,OAAO,CAAC,CAACO,YAAmBgC;YAChC,MAAMuB,SAASN,KAAKC,GAAG,CAAClD,WAAW4D,EAAE,GAAI5D,WAAW6D,EAAE,EAAG;YACzD,IAAIL,UAAU;YACd,IAAIiJ,0BAA0B;YAE9B,MAAMC,YAAY1M,WAAWsC,WAAW;YACxC,6EAA6E;YAC7E,gEAAgE;YAChE,IAAIiB,SAAS1E,8BAA8B;gBACzC2E,UAAUA,UAAU;gBACpB,6FAA6F;gBAC7F,2FAA2F;gBAC3F,MAAMiD,cAAcC,YAAY2F,YAAYP,cAAcY;gBAC1D,IAAIjG,gBAAgBE,WAAW;oBAC7B8F,0BAA0BhG;oBAC1BjD,UAAUA,UAAUiJ;gBACtB;YACF;YACA,2FAA2F;YAC3F,kEAAkE;YAClE,MAAME,gBAAwBhH,aAAa6G,UAAUxM,WAAW4M,IAAI,EAAEvN,aAAa,GAAGmE;YACtF,MAAMqJ,cAAuBF,cAAcnG,KAAK,CAAC,CAAC,OAAOrB;YACzDjB,MAAM,CAAClE,WAAWoC,MAAM,CAAC,GAAG;gBAC1B4E,SAAS,GAAGoC,WAAW,CAAC,EAAEpH,OAAO;gBACjC8K,YAAY,GAAGzD,gBAAgB,CAAC,EAAErH,OAAO;gBACzC4K,MAAMD;gBACNzF,MAAMkF,cAAcpM,YAAY0M;gBAChCK,SAASF;gBACTtJ;gBACAyJ,cAAcP;YAChB;QACF;QACA3O,UAAU,aAAamP,MAAM;QAC7B,OAAO/I;IACT,GACA;QAAC4H;QAAe1C;QAAYC;KAAgB;IAG9C,MAAM6D,yBAAyB,CAACrM,YAAmBoG;QACjD+C,kBAAkB;QAClBE,SAAS,AAACrJ,WAAWf,MAAM,CAAW2F,KAAK;QAC3C2E,iBAAiB,AAACvJ,WAAWjB,MAAM,CAAWgN,IAAI;QAClDtC,iBAAiBwB,cAAcjL,WAAWkC,iBAAiB;QAC3DyH,sBAAsBvD;IACxB;IAEA,MAAMkG,gBAAgBjQ,MAAM+N,WAAW,CAAC;YACd9C;QAAxB,MAAMiF,mBAAkBjF,cAAAA,MAAM/E,IAAI,cAAV+E,kCAAAA,YAAYkF,eAAe;QACnD,OAAO,CAAED,CAAAA,mBAAmBA,gBAAgB5N,KAAK,CAACe,MAAM,GAAG,KAAK6M,gBAAgB/J,KAAK,CAAC9C,MAAM,GAAG,CAAA;IACjG,GAAG;QAAC4H,MAAM/E,IAAI;KAAC;IAEf,MAAMkK,uBAAuBpQ,MAAM+N,WAAW,CAC5C,CACE7H,MACAmK,iBACAC,kBACAnI,gBACAC;QAEA,IAAI6H,iBAAiB;YACnB,OAAO;gBAAEjI,OAAO;gBAAG3B,QAAQ;gBAAG/D,OAAO,EAAE;gBAAE6D,OAAO,EAAE;YAAC;QACrD;QAEA,MAAM,EAAE5F,MAAM,EAAE8F,MAAM,EAAE2B,KAAK,EAAE,GAAGZ,gBAAgBuE,SAASiC,OAAO,EAAEyC,iBAAiBC,kBAAkBtE;QACvG,+GAA+G;QAC/G,MAAMuE,cAA+BzJ,cAAcZ;QACnD3F,OAAOgQ;QACP,+GAA+G;QAC/G,kHAAkH;QAClH,kHAAkH;QAClH,gHAAgH;QAChH,qEAAqE;QACrE,iHAAiH;QACjH,iHAAiH;QACjH,+CAA+C;QAC/C,MAAMtM,gBAAgBF,mBAAmBwM;QACzCtE,YAAY2B,OAAO,GAAGpJ,OAAOgM,IAAI,CAACvM,eAAeZ,MAAM;QACvD,4FAA4F;QAC5F,6EAA6E;QAC7E,iHAAiH;QACjH,iHAAiH;QACjH,gHAAgH;QAChH,kBAAkB;QAClB,MAAMoN,aAAa1J,cAAcwJ,YAAYjO,KAAK;QAClD,MAAMoD,aAAauB,cAAcsJ,YAAYpK,KAAK;QAClD/B,4BAA4BH,eAAewM,YAAY/K;QACvDU,cAAc7F,QAAQgH,kBAAkBoE,SAASiC,OAAO,CAACjG,GAAG,GAAIgE,SAASiC,OAAO,CAAChG,MAAM,EAAG3D;QAC1F,2GAA2G;QAC3G,gFAAgF;QAChF,wDAAwD;QACxD1D,OAAOgQ;QACPtK,wBAAwBsK,aAAaE,YAAY/K;QACjDwC,iBAAiBqI,YAAYjO,KAAK,EAAE6F,gBAAgBC;QACpD,OAAO;YACLJ;YACA3B;YACA/D,OAAOiO,YAAYjO,KAAK;YACxB6D,OAAOoK,YAAYpK,KAAK;QAC1B;IACF,GACA;QAAC8J;QAAejE;KAAO;IAGzB,MAAM0E,eAAe,CACnBC,WACAC;QAEA,IAAID,WAAW;YACb,MAAM9G,SAAS0B;YACf,OAAOoF,UAAUjM,GAAG,CAAC,CAACf,YAAmBmB;gBACvC,MAAM+L,aAAa;oBACjBC,eAAenN;gBACjB;gBACA,MAAM,EAAEmG,OAAO,EAAEC,IAAI,EAAEC,IAAI,EAAE,GAAGpE,UAAUgL,gBAAgBjN;gBAC1D,8DAA8D;gBAC9D,MAAMoN,aAAyB9G,iBAAiBtG;gBAChD,MAAMqN,MAAM,GAAGnH,OAAO,CAAC,EAAE/E,OAAO;gBAChC,MAAMmM,aAAa,CAAC,SAAS,EAAED,KAAK;gBACpC,MAAME,cAAc,CAAC,KAAK,EAAED,WAAW,CAAC,CAAC;gBACzC,MAAMrO,SAASe,WAAWf,MAAM;gBAChC,MAAMF,SAASiB,WAAWjB,MAAM;gBAChC,uCAAuC;gBACvC,qBACE,oBAACyO;oBAAEH,KAAKA;iCACN,oBAACI,4BACC,oBAACC;oBAAeC,IAAIL;oBAAY5G,IAAG;oBAAK3D,IAAG;oBAAK6K,IAAG;oBAAOC,IAAG;iCAC3D,oBAACC;oBAAKC,QAAO;oBAAIC,WAAW/O,OAAO2F,KAAK;kCACxC,oBAACkJ;oBAAKC,QAAO;oBAAOC,WAAWjP,OAAO6F,KAAK;oCAG/C,oBAACqJ;oBACC1H,GAAGK,SAASwG;oBACZO,IAAIxH;oBACJ+H,MAAMC,kBAAkBnO,YAAYuN;oBACpCa,QAAQC,kBAAkBrO,YAAYuN;oBACtCe,aAAY;oBACZC,eAAeC,wBAAwBxO;oBACvCyO,aAAaC,CAAAA,QAASC,eAAeD,OAAO1O,YAAYoG;oBACxD8G,YAAYA;oBACZ0B,SAASF,CAAAA,QAASG,aAAaH,OAAO1O,YAAYoG;oBAClD0I,QAAQC;oBACRC,aAAaC,kBAAkBjP;oBAC/BkP,UAAU;oBACVC,cAAY9I;oBACZ+I,MAAK;;YAIb;QACF;QACA,OAAO,EAAE;IACX;IAEA,MAAMC,eAAe,CACnBC,WACAC;QAEA,IAAID,WAAW;YACb,MAAME,aAAanH,SAAS,QAAQ;YACpC,OAAOiH,UAAUvO,GAAG,CAAC,CAAC5B,YAAmBgC;gBACvC,MAAM+L,aAAa;oBACjBuC,SAAStQ;gBACX;gBACA,MAAM,EACJgH,SAAS5E,MAAM,EACf0K,UAAU,EACVvJ,MAAM,EACNwJ,SAASF,WAAW,EACpBD,MAAM2D,aAAa,EACnBvD,cAAcP,uBAAuB,EACrCvF,IAAI,EACL,GAAGkJ,cAAc,CAACpQ,WAAWoC,MAAM,CAAC;gBACrC,MAAMoO,UAAUjN,SAAS1E;gBACzB,MAAM,EAAE+N,IAAI,EAAEtK,WAAW,EAAEkF,EAAE,EAAED,EAAE,EAAE1D,EAAE,EAAE,GAAG7D;gBAC1C,MAAMyQ,YAAY7I,cAAc;oBAAEE;oBAAe9G;oBAAegH;gBAAa,GAAGhI;gBAChF,qBACE,oBAACqO;oBAAEH,KAAKlM;oBAAOwM,IAAI1B;iCACjB,oBAAC4D;oBACCpJ,GAAGE;oBACHmD,GAAG9G;oBACHN,QAAQA;oBACR2B,OAAOqC,KAAMC;oBACbuH,MAAM4B,gBAAgB3Q;oBACtBwO,IAAIpM;oBACJkN,aAAasB,CAAAA,IAAKC,SAAS7Q,YAAY4Q;oBACvC7C,YAAYA;oBACZ0B,SAASqB;oBACT7B,QAAQ8B,gBAAgB/Q;oBACxBmP,aAAY;oBACZ6B,SAAQ;oBACRjB,UAAU;oBACVC,cAAY9I;oBACZ+I,MAAK;oBAEN1M,SAASzE,qCACR,oBAACuP;oBAAE4C,WAAW5I,QAAQ6I,iBAAiB;iCACrC,oBAAC7C;oBAAE4C,WAAU;iCACX,oBAACpL;oBACC2I,IAAI,GAAGpM,OAAO,KAAK,CAAC;oBACpBkF,GAAGE;oBACHmD,GAAG9G;oBACHsN,IAAI;oBACJC,IAAI;oBACJf,YAAYA;oBACZgB,YAAW;oBACXC,eAAY;oBACZvC,MAAM0B;oBACNc,UAAU;oBACVjC,aAAasB,CAAAA,IAAKY,aAAa5E,MAAMC,aAAa+D;oBAClD7C,YAAY,IAAM0D;mBAEjBlB,+BAIL,oBAAC1K;oBACCyB,GAAGkJ,UAAUhJ,KAAKD,KAAMkF,0BAA0B;oBAClD9B,GAAG9G;oBACHsN,IAAIX,UAAU,QAAQ;oBACtBY,IAAIZ,UAAU,UAAU;oBACxBH,YAAYA;oBACZgB,YAAW;oBACXC,eAAY;oBACZvC,MAAM0B;oBACNc,UAAU;mBAETjP,cAAcwJ,cAAcxJ,eAAeA;YAMxD;QACF;IACF;IAEA,MAAMgO,WAAW,CAACtQ;QAChB,IAAI8H,eAAe;YACjB8B,iBAAiB;YACjBE,iBAAiB,IAAI1J;YACrByJ,iBAAiB,IAAIzJ;YACrB6J,gBAAgBtD;QAClB;IACF;IAEA,MAAMkK,WAAW,CAAC7Q,YAAmB0R;QACnCA,WAAWC,OAAO;QAClBb;QACA,MAAMc,iBAAiB7R,iBAAiBC;QACxC,MAAM6R,iBAAiBvS,iBAAiBsS;QACxCC,eAAelS,IAAI,CAACK;QACpB4J,iBAAiB;QACjBE,iBAAiB,IAAI1J,IAAYF,MAAM+G,IAAI,CAAC4K,gBAAgBjQ,GAAG,CAAClB,CAAAA,OAAQA,KAAKsB,KAAK;QAClF6H,iBAAiB,IAAIzJ,IAAYF,MAAM+G,IAAI,CAAC2K,gBAAgBhQ,GAAG,CAAClC,CAAAA,OAAQA,KAAKsC,KAAK;QAClFiI,gBAAgBjK;QAChB8R,eAAeJ,WAAWK,OAAO,EAAEL,WAAWM,OAAO;QACrDhI,kBAAkBhK,WAAW4D,EAAE,GAAI5D,WAAW6D,EAAE,GAAI/E;QACpDoL,SAASlK,WAAWyF,KAAK;QACzB2E,iBAAiBpK,WAAW4M,IAAI;QAChCtC,iBAAiBwB,cAAc9L,WAAWsC,WAAW;IACvD;IAEA,MAAMkN,iBAAiB,CAACkC,YAA0C7Q,YAAmBoG;QACnFyK,WAAWC,OAAO;QAClBb;QACA,MAAM,EAAEvR,eAAeqS,cAAc,EAAE5Q,eAAe6Q,cAAc,EAAE,GAAGjR,+BAA+BC;QACxG+I,iBAAiB;QACjBE,iBAAiB,IAAI1J,IAAYF,MAAM+G,IAAI,CAAC4K,gBAAgBjQ,GAAG,CAAClB,CAAAA,OAAQA,KAAKsB,KAAK;QAClF6H,iBAAiB,IAAIzJ,IAAYF,MAAM+G,IAAI,CAAC2K,gBAAgBhQ,GAAG,CAAClC,CAAAA,OAAQA,KAAKsC,KAAK;QAClF8P,eAAeJ,WAAWK,OAAO,EAAEL,WAAWM,OAAO;QACrD9E,uBAAuBrM,YAAYoG;IACrC;IAEA,MAAM+G,iBAAiB,CAACnN;QACtB,IAAIiH,eAAe;YACjB8B,iBAAiB;YACjBE,iBAAiB,IAAI1J;YACrByJ,iBAAiB,IAAIzJ;QACvB;IACF;IAEA,MAAMsP,eAAe,CAACuC,YAA0CpR,YAAmBoG;QACjF,2FAA2F;QAC3F,4GAA4G;QAC5G,yFAAyF;QACzFgL,WAAWN,OAAO;QAClBb;QACA,MAAMoB,eAAeD,WAAWE,aAAa,CAAC3G,qBAAqB;QACnE,MAAMuG,UAAUG,aAAavN,IAAI,GAAGuN,aAAahN,KAAK,GAAG;QACzD,MAAM8M,UAAUE,aAAarN,GAAG,GAAGqN,aAAa3O,MAAM,GAAG;QACzDuO,eAAeC,SAASC;QACxB9E,uBAAuBrM,YAAYoG;IACrC;IAEA,MAAM6J,kBAAkB;QACtB9G,kBAAkB;QAClB8H,eAAe,GAAG;QAClBtH,sBAAsB;IACxB;IAEA,MAAMoF,UAAU;IACd,EAAE,GACJ;IAEA,MAAMe,kBAAkB,CAAC3Q;QACvB,IAAI,CAAC8H,eAAe;YAClB,OAAO9H,WAAWyF,KAAK;QACzB,OAAO;YACL,IAAIuC,gBAAgBhH,cAAc+G,GAAG,CAAC/H,WAAWgC,KAAK,GAAI;gBACxD,OAAOgG,aAAavC,KAAK;YAC3B,OAAO,IAAI,CAACuC,cAAc;gBACxB,OAAOhI,WAAWyF,KAAK;YACzB;QACF;IACF;IAEA,MAAMuJ,oBAAoB,CAACnO,YAAmBuN;QAC5C,IAAItG,iBAAiBvI,cAAcwI,GAAG,CAAClH,WAAWmB,KAAK,GAAI;YACzD,OAAOgG,eAAeA,aAAavC,KAAK,GAAG2I;QAC7C;IACF;IAEA,MAAMc,oBAAoB,CAACrO,YAAmBuN;QAC5C,IAAI,CAACtG,eAAe;YAClB,OAAOrJ;QACT,OAAO;YACL,IAAIc,cAAcwI,GAAG,CAAClH,WAAWmB,KAAK,GAAI;gBACxC,OAAOgG,eAAeA,aAAapJ,WAAW,GAAIwP;YACpD;YACA,OAAO3P;QACT;IACF;IAEA,MAAMsS,kBAAkB,CAAC/Q;QACvB,IAAI,CAAC8H,eAAe;YAClB,OAAO9H,WAAWpB,WAAW;QAC/B,OAAO;YACL,IAAIoC,cAAc+G,GAAG,CAAC/H,WAAWgC,KAAK,GAAI;gBACxC,OAAOgG,eAAeA,aAAapJ,WAAW,GAAIoB,WAAWpB,WAAW;YAC1E;YACA,OAAOoB,WAAWpB,WAAW;QAC/B;IACF;IAEA,MAAMkR,oBAAoB,CAACjP;QACzB,IAAIiH,eAAe;YACjB,IAAI,CAACvI,cAAcwI,GAAG,CAAClH,WAAWmB,KAAK,GAAI;gBACzC,OAAOhD;YACT,OAAO,IAAI,CAACgJ,cAAc;gBACxB,OAAO/I;YACT;QACF;QACA,OAAOF;IACT;IAEA,MAAMsQ,0BAA0B,CAACxO;QAC/B,IAAIiH,iBAAiB,CAACvI,cAAcwI,GAAG,CAAClH,WAAWmB,KAAK,KAAM,CAACgG,cAAc;YAC3E,OAAO9I;QACT;QAEA,OAAOF;IACT;IAEA,8DAA8D;IAC9D,MAAMwS,eAAe,CAAC3L,MAAcuM,iBAA0BC;QAC5D,IAAI7I,SAASsB,OAAO,IAAIsH,iBAAiB;YACvC,yEAAyE;YACzEvU,OAAO2L,SAASsB,OAAO,EACpBwH,KAAK,CAAC,WAAW,KACjBA,KAAK,CAAC,SAASjV,OAAOkV,uBAAuB,EAC7CD,KAAK,CAAC,QAAQD,IAAIG,KAAK,GAAG,MAC1BF,KAAK,CAAC,OAAOD,IAAII,KAAK,GAAG,KAAK,MAC9BC,IAAI,CAAC7M;QACV;IACF;IAEA,MAAM4L,eAAe;QACnB,IAAIjI,SAASsB,OAAO,EAAE;YACpBjN,OAAO2L,SAASsB,OAAO,EAAEwH,KAAK,CAAC,WAAW;QAC5C;IACF;IAEA,MAAM7G,0BAA0B;QAC9B,OACE5C,SAASiC,OAAO,CAACnG,IAAI,GACrBkE,SAASiC,OAAO,CAAClG,KAAK,GACtB,kCAAkC;QAClCuE,YAAY2B,OAAO,GAAGzL,aAEtB,AADA,yCAAyC;QACxC8J,CAAAA,YAAY2B,OAAO,GAAG,CAAA,IAAMzL,CAAAA,aAAa,CAAA;IAE9C;IAEA,MAAMyS,iBAAiB,CAACa,MAAcC;QACpC,MAAMC,YAAY,GAAG,+BAA+B;QACpD,MAAM,EAAEvL,CAAC,EAAEqD,CAAC,EAAE,GAAGF;QACjB,+BAA+B;QAC/B,MAAMqI,WAAW7P,KAAK8P,IAAI,CAAC9P,KAAK+P,GAAG,CAACL,OAAOrL,GAAG,KAAKrE,KAAK+P,GAAG,CAACJ,OAAOjI,GAAG;QACtE,+EAA+E;QAC/E,IAAImI,WAAWD,WAAW;YACxBnI,iBAAiB;gBAAEpD,GAAGqL;gBAAMhI,GAAGiI;YAAK;QACtC;IACF;IAEA,qCAAqC;IACrC,MAAMK,WAA2B/V,MAAMgW,OAAO,CAAC;YAC1B/K;QAAnB,MAAMgL,aAAahL,EAAAA,iBAAAA,MAAMiL,OAAO,cAAbjL,qCAAAA,eAAetB,QAAQ,KAAI;QAC9C,4GAA4G;QAC5G,iBAAiB;QACjB,OAAO;YACLA,UAAU,CAACnG,OAAgBpC,OAAO6U,YAAYzS,KAAKkM,IAAI;QACzD;IACF,GAAG;QAACzE,MAAMiL,OAAO;KAAC;IAClB,MAAMC,iBAAwCnW,MAAMgW,OAAO,CAAC;YACvC/K,sBACAA,uBAEDA;QAHlB,MAAMmL,aAAanL,EAAAA,uBAAAA,MAAMoL,aAAa,cAAnBpL,2CAAAA,qBAAqBrB,aAAa,KAAI;QACzD,MAAM0M,aAAarL,EAAAA,wBAAAA,MAAMoL,aAAa,cAAnBpL,4CAAAA,sBAAqBiE,aAAa,KAAI;QACzD,OAAO;YACLqH,gBAAgBtL,EAAAA,wBAAAA,MAAMoL,aAAa,cAAnBpL,4CAAAA,sBAAqBsL,cAAc,KAAI;YACvD3M,eAAe,CAACpH,OACdpB,OACEgV,YACA,AAAC5T,KAAKI,MAAM,CAAW8M,IAAI,EAC3B,AAAClN,KAAKE,MAAM,CAAWgN,IAAI,EAC3BlN,KAAKqD,iBAAiB,GAAG+I,cAAcpM,KAAKqD,iBAAiB,IAAIrD,KAAKqD,iBAAiB;YAE3FqJ,eAAe,CAAC1L,MAAagT,SAAmBpV,OAAOkV,YAAY9S,KAAKkM,IAAI,EAAEd,cAAc4H;QAC9F;IACF,GAAG;QAAC5H;QAAe3D,MAAMoL,aAAa;KAAC;IAEvC,6CAA6C;IAC7C,MAAM,EAAE/T,KAAK,EAAE6D,KAAK,EAAE6B,KAAK,EAAE3B,MAAM,EAAE,GAAGrG,MAAMgW,OAAO,CACnD,IACE5F,qBACEnF,MAAM/E,IAAI,CAACiK,eAAe,EAC1B7I,gBACAC,iBACA0D,MAAM9C,cAAc,EACpB8C,MAAM7C,oBAAoB,GAE9B;QACEgI;QACA7I;QACAD;QACA2D,MAAM7C,oBAAoB;QAC1B6C,MAAM9C,cAAc;QACpB8C,MAAM/E,IAAI;KACX;IAEH,uEAAuE;IACvE,MAAMgN,iBAAiBlT,MAAMgW,OAAO,CAClC,IAAM/G,uBAAuB3M,OAAO6T,eAAejH,aAAa,GAChE;QAACiH;QAAgBlH;QAAwB3M;KAAM;IAEjD,MAAMsO,iBAAiB5Q,MAAMgW,OAAO,CAClC,IAAMtM,sBAAsBvD,OAAO4P,SAASpM,QAAQ,EAAEwM,eAAevM,aAAa,EAAE2B,UACpF;QAAC4K;QAAgB5K;QAASwK;QAAU5P;KAAM;IAG5C,IAAI,CAAC8J,iBAAiB;QACpB,sGAAsG;QACtG,iGAAiG;QACjG,2GAA2G;QAC3G,yGAAyG;QACzG,oGAAoG;QACpG,MAAMwG,wBAA0E,EAAE;QAClFnU,MAAMoU,IAAI,CAAC,CAACC,GAAUC;YACpB,IAAID,EAAErM,EAAE,KAAKsM,EAAEtM,EAAE,EAAE;gBACjB,OAAOqM,EAAErM,EAAE,GAAIsM,EAAEtM,EAAE;YACrB;YACA,OAAOqM,EAAEhQ,EAAE,GAAIiQ,EAAEjQ,EAAE;QACrB;QACArE,MAAMC,OAAO,CAAC,CAACsU,MAAa/R;YAC1B2R,sBAAsBhU,IAAI,CAAC;gBAAE0B,OAAO0S,KAAK1S,KAAK;gBAAG2S,MAAM;gBAAQhS;YAAM;QACvE;QACAqB,MAAMuQ,IAAI,CAAC,CAACC,GAAUC;YACpB,MAAMG,OAAO,AAACJ,EAAE/T,MAAM,CAAW0H,EAAE;YACnC,MAAM0M,OAAO,AAACJ,EAAEhU,MAAM,CAAW0H,EAAE;YACnC,IAAIyM,SAASC,MAAM;gBACjB,OAAOD,OAAQC;YACjB;YACA,OAAOL,EAAEhQ,EAAE,GAAIiQ,EAAEjQ,EAAE;QACrB;QACAR,MAAM5D,OAAO,CAAC,CAACsU,MAAa/R;YAC1B2R,sBAAsBhU,IAAI,CAAC;gBAAE0B,OAAO,AAAC0S,KAAKjU,MAAM,CAAWuB,KAAK;gBAAG2S,MAAM;gBAAQhS;YAAM;QACzF;QACA2R,sBAAsBC,IAAI,CAAC,CAACC,GAAGC;YAC7B,IAAID,EAAExS,KAAK,KAAKyS,EAAEzS,KAAK,EAAE;gBACvB,OAAOwS,EAAExS,KAAK,GAAGyS,EAAEzS,KAAK;YAC1B;YAEA,IAAIwS,EAAEG,IAAI,GAAGF,EAAEE,IAAI,EAAE;gBACnB,OAAO,CAAC;YACV;YACA,IAAIH,EAAEG,IAAI,GAAGF,EAAEE,IAAI,EAAE;gBACnB,OAAO;YACT;YACA,OAAO;QACT;QAEA,mDAAmD;QACnD,MAAMG,WAAWjE,aAAa1Q,OAAO4Q;QACrC,MAAMgE,WAAWxG,aAAavK,OAAOyK;QAErC,MAAMuG,eAAkC;YACtCC,eAAevK;YACfU;YACAhF;YACA8O,QAAQpK;YACRqK,QAAQnK;YACRE;YACA,GAAGpC,MAAMkM,YAAY;QACvB;QACA,qBACE,oBAACI;YAAIxD,WAAW5I,QAAQqM,IAAI;YAAEC,KAAKrM;YAAgBsM,cAAc9D;yBAO/D,oBAAC2D;YAAIxD,WAAW5I,QAAQwM,YAAY;YAAG,GAAGvL,0BAA0B;yBAClE,oBAACwL;YAAI5P,OAAOA;YAAO3B,QAAQA;YAAQiL,IAAI9F;YAAUuI,WAAW5I,QAAQ0M,KAAK;WACtEpB,sBAAsB/R,GAAG,CAACmS,CAAAA;YACzB,IAAIA,KAAKC,IAAI,KAAK,QAAQ;gBACxB,qBACE,oBAAC3F;oBAAEH,KAAK1O,KAAK,CAACuU,KAAK/R,KAAK,CAAC,CAACI,MAAM;oBAAE6O,WAAW5I,QAAQ7I,KAAK;mBACvD2U,QAAS,CAACJ,KAAK/R,KAAK,CAAC;YAG5B,OAAO;gBACL,qBACE,oBAACqM;oBACCH,KAAK,GAAG,AAAC7K,KAAK,CAAC0Q,KAAK/R,KAAK,CAAC,CAAClC,MAAM,CAAWsC,MAAM,CAAC,CAAC,EAAE,AAACiB,KAAK,CAAC0Q,KAAK/R,KAAK,CAAC,CAACpC,MAAM,CAAWwC,MAAM,EAAE;oBAClG6O,WAAW5I,QAAQhF,KAAK;oBACxB4L,QAAQ9G,MAAM6M,SAAS,GAAG7M,MAAM6M,SAAS,GAAG3X,OAAO4X,iBAAiB;oBACpE7F,eAAe;mBAEdgF,QAAS,CAACL,KAAK/R,KAAK,CAAC;YAG5B;QACF,MAGHqS,aAAaC,aAAa,kBAAI,oBAAClW,cAAiBiW,6BACjD,oBAACI;YAAIjG,IAAI5F;YAAiBqI,WAAW5I,QAAQ6M,OAAO;YAAE5C,OAAO;gBAAEtB,SAAS;YAAE;YAAG2D,KAAKnL;;IAGxF;IACA,qBAAO,oBAACiL;QAAIjG,IAAI7F;QAAesH,MAAM;QAASqC,OAAO;YAAEtB,SAAS;QAAI;QAAGhB,cAAYqD,eAAeI,cAAc;;AAClH,GAAG;AAEHxL,YAAYkN,WAAW,GAAG"}