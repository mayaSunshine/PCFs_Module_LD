{"version":3,"sources":["../src/components/VerticalBarChart/useVerticalBarChartStyles.styles.ts"],"sourcesContent":["'use client';\n\nimport { GriffelStyle, makeStyles, mergeClasses } from '@griffel/react';\nimport { VerticalBarChartProps, VerticalBarChartStyles } from '../../index';\nimport { SlotClassNames } from '@fluentui/react-utilities/src/index';\nimport { tokens } from '@fluentui/react-theme';\nimport { HighContrastSelector } from '../../utilities/utilities';\nimport { getBarLabelStyle, getTooltipStyle } from '../../utilities/index';\n\nexport const verticalbarchartClassNames: SlotClassNames<VerticalBarChartStyles> = {\n  opacityChangeOnHover: 'fui-vbc__opacityChangeOnHover',\n  tooltip: 'fui-vbc__tooltip',\n  barLabel: 'fui-vbc__barLabel',\n  lineBorder: 'fui-vbc_lineBorder',\n  root: '',\n  xAxis: '',\n  yAxis: '',\n  legendContainer: '',\n  hover: '',\n  descriptionMessage: '',\n  axisTitle: '',\n  chartTitle: '',\n  shapeStyles: '',\n  chartWrapper: '',\n  svgTooltip: '',\n  chart: '',\n  axisAnnotation: '',\n};\nconst useStyles = makeStyles({\n  opacityChangeOnHover: {},\n  tooltip: getTooltipStyle() as GriffelStyle,\n  barLabel: getBarLabelStyle() as GriffelStyle,\n  lineBorder: {\n    stroke: tokens.colorNeutralBackground1,\n    [HighContrastSelector]: {\n      stroke: 'Canvas',\n    },\n  },\n});\n\n/**\n * Apply styling to the Carousel slots based on the state\n */\nexport const useVerticalBarChartStyles = (props: VerticalBarChartProps): VerticalBarChartStyles => {\n  const baseStyles = useStyles();\n\n  return {\n    opacityChangeOnHover: mergeClasses(\n      verticalbarchartClassNames.opacityChangeOnHover,\n      baseStyles.opacityChangeOnHover /*props.styles?.opacityChangeOnHover*/,\n    ),\n    tooltip: mergeClasses(verticalbarchartClassNames.tooltip, baseStyles.tooltip /*props.styles?.tooltip*/),\n    barLabel: mergeClasses(verticalbarchartClassNames.barLabel, baseStyles.barLabel /*props.styles?.barLabel*/),\n    lineBorder: mergeClasses(verticalbarchartClassNames.lineBorder, baseStyles.lineBorder /*props.styles?.lineBorder*/),\n  };\n};\n"],"names":["makeStyles","mergeClasses","tokens","HighContrastSelector","getBarLabelStyle","getTooltipStyle","verticalbarchartClassNames","opacityChangeOnHover","tooltip","barLabel","lineBorder","root","xAxis","yAxis","legendContainer","hover","descriptionMessage","axisTitle","chartTitle","shapeStyles","chartWrapper","svgTooltip","chart","axisAnnotation","useStyles","stroke","colorNeutralBackground1","useVerticalBarChartStyles","props","baseStyles"],"mappings":"AAAA;AAEA,SAAuBA,UAAU,EAAEC,YAAY,QAAQ,iBAAiB;AAGxE,SAASC,MAAM,QAAQ,wBAAwB;AAC/C,SAASC,oBAAoB,QAAQ,4BAA4B;AACjE,SAASC,gBAAgB,EAAEC,eAAe,QAAQ,wBAAwB;AAE1E,OAAO,MAAMC,6BAAqE;IAChFC,sBAAsB;IACtBC,SAAS;IACTC,UAAU;IACVC,YAAY;IACZC,MAAM;IACNC,OAAO;IACPC,OAAO;IACPC,iBAAiB;IACjBC,OAAO;IACPC,oBAAoB;IACpBC,WAAW;IACXC,YAAY;IACZC,aAAa;IACbC,cAAc;IACdC,YAAY;IACZC,OAAO;IACPC,gBAAgB;AAClB,EAAE;AACF,MAAMC,YAAYxB,WAAW;IAC3BO,sBAAsB,CAAC;IACvBC,SAASH;IACTI,UAAUL;IACVM,YAAY;QACVe,QAAQvB,OAAOwB,uBAAuB;QACtC,CAACvB,qBAAqB,EAAE;YACtBsB,QAAQ;QACV;IACF;AACF;AAEA;;CAEC,GACD,OAAO,MAAME,4BAA4B,CAACC;IACxC,MAAMC,aAAaL;IAEnB,OAAO;QACLjB,sBAAsBN,aACpBK,2BAA2BC,oBAAoB,EAC/CsB,WAAWtB,oBAAoB,CAAC,oCAAoC;QAEtEC,SAASP,aAAaK,2BAA2BE,OAAO,EAAEqB,WAAWrB,OAAO,CAAC,uBAAuB;QACpGC,UAAUR,aAAaK,2BAA2BG,QAAQ,EAAEoB,WAAWpB,QAAQ,CAAC,wBAAwB;QACxGC,YAAYT,aAAaK,2BAA2BI,UAAU,EAAEmB,WAAWnB,UAAU,CAAC,0BAA0B;IAClH;AACF,EAAE"}