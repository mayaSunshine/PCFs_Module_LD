{"version":3,"sources":["../src/components/AreaChart/AreaChart.tsx"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { useAreaChartStyles } from './useAreaChartStyles.styles';\nimport { max as d3Max, bisector } from 'd3-array';\nimport { pointer } from 'd3-selection';\nimport { select as d3Select } from 'd3-selection';\nimport { tokens } from '@fluentui/react-theme';\nimport { area as d3Area, stack as d3Stack, curveMonotoneX as d3CurveBasis, line as d3Line } from 'd3-shape';\nimport {\n  AccessibilityProps,\n  CartesianChart,\n  CustomizedCalloutData,\n  AreaChartProps,\n  LineChartDataPoint,\n  LineChartPoints,\n  ChildProps,\n  Margins,\n  YValueHover,\n  ChartPopoverProps,\n  Chart,\n  ImageExportOptions,\n} from '../../index';\nimport {\n  calloutData,\n  getXAxisType,\n  ChartTypes,\n  XAxisTypes,\n  getTypeOfAxis,\n  tooltipOfAxislabels,\n  getNextColor,\n  getColorFromToken,\n  getSecureProps,\n  areArraysEqual,\n  getCurveFactory,\n  findNumericMinMaxOfY,\n  createNumericYAxis,\n  IDomainNRange,\n  domainRangeOfNumericForAreaLineScatterCharts,\n  domainRangeOfDateForAreaLineScatterVerticalBarCharts,\n  createStringYAxis,\n  useRtl,\n  YAxisType,\n  findCalloutPoints,\n} from '../../utilities/index';\nimport { useId } from '@fluentui/react-utilities';\nimport type { JSXElement } from '@fluentui/react-utilities';\nimport { Legend, LegendContainer, Legends } from '../Legends/index';\nimport { ScaleLinear } from 'd3-scale';\nimport { toImage } from '../../utilities/image-export-utils';\nimport { formatDateToLocaleString } from '@fluentui/chart-utilities';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst bisect = bisector((d: any) => d.x).left;\n\nenum InterceptVisibility {\n  show = 'visibility',\n  hide = 'hidden',\n}\n\nexport interface AreaChartAreaPoint {\n  xVal: string | number;\n  values: AreaChartDataSetPoint;\n}\nexport interface AreaChartDataSetPoint {\n  [key: string]: number | string | number[];\n}\nexport interface DPointType {\n  values: { 0: number; 1: number; data: {} };\n  xVal: number | Date;\n}\nexport interface MapXToDataSet {\n  [key: string]: LineChartDataPoint[];\n  [key: number]: LineChartDataPoint[];\n}\n\n//by default d3-shape 3.2.0 limits the< path> data point precision to 3 digits(d3/d3-path#10)\n\nexport const AreaChart: React.FunctionComponent<AreaChartProps> = React.forwardRef<HTMLDivElement, AreaChartProps>(\n  (props, forwardedRef) => {\n    const _uniqueIdForGraph: string = useId('areaChart_');\n    const _verticalLineId: string = useId('verticalLine_');\n    const _circleId: string = useId('circle');\n    const _rectId: string = useId('rectangle');\n    const _tooltipId: string = useId('AreaChartTooltipID');\n    //enableComputationOptimization is used for optimized code to group data points by x value\n    //from O(n^2) to O(n) using a map.\n    const _enableComputationOptimization: boolean = true;\n    const _firstRenderOptimization: boolean = true;\n    const _emptyChartId: string = useId('_AreaChart_empty');\n    let _containsSecondaryYAxis = false;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let _calloutPoints: any;\n    let _createSet: (data: LineChartPoints[]) => {\n      colors: string[];\n      opacity: number[];\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      data: any;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      calloutPoints: any;\n    };\n    let _colors: string[];\n    let _opacity: number[];\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let _data: any;\n    let _chart: JSXElement[];\n    let _margins: Margins;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let _xAxisRectScale: any;\n    // determines if the given area chart has multiple stacked bar charts\n    let _isMultiStackChart: boolean;\n    const cartesianChartRef = React.useRef<Chart>(null);\n    const _legendsRef = React.useRef<LegendContainer>(null);\n    const _isRTL: boolean = useRtl();\n\n    const [selectedLegends, setSelectedLegends] = React.useState<string[]>(props.legendProps?.selectedLegends || []);\n    const [activeLegend, setActiveLegend] = React.useState<string | undefined>(undefined);\n    const [hoverXValue, setHoverXValue] = React.useState<string | number | undefined | null>('');\n    // eslint-disable-next-line @typescript-eslint/no-shadow\n    const [YValueHover, setYValueHover] = React.useState<YValueHover[]>([]);\n    const [lineXValue, setLineXValue] = React.useState<number>(0);\n    const [displayOfLine, setDisplayOfLine] = React.useState<InterceptVisibility>(InterceptVisibility.hide);\n    const [isCircleClicked, setIsCircleClicked] = React.useState<boolean>(false);\n    const [nearestCircleToHighlight, setNearestCircleToHighlight] = React.useState<number | string | Date | null>(null);\n    const [activePoint, setActivePoint] = React.useState<string>('');\n    const [dataPointCalloutProps, setDataPointCalloutProps] = React.useState<CustomizedCalloutData>();\n    const [stackCalloutProps, setStackCalloutProps] = React.useState<CustomizedCalloutData>();\n    const [xAxisCalloutAccessibilityData, setXAxisCalloutAccessibilityData] = React.useState<AccessibilityProps>();\n    const [clickPosition, setClickPosition] = React.useState({ x: 0, y: 0 });\n    const [isPopoverOpen, setPopoverOpen] = React.useState(false);\n    const prevPropsRef = React.useRef<AreaChartProps | null>(null);\n\n    React.useEffect(() => {\n      if (prevPropsRef.current) {\n        const prevProps = prevPropsRef.current;\n        if (!areArraysEqual(prevProps.legendProps?.selectedLegends, props.legendProps?.selectedLegends)) {\n          setSelectedLegends(props.legendProps?.selectedLegends || []);\n        }\n      }\n      prevPropsRef.current = props;\n    }, [props]);\n\n    React.useImperativeHandle(\n      props.componentRef,\n      () => ({\n        chartContainer: cartesianChartRef.current?.chartContainer ?? null,\n        toImage: (opts?: ImageExportOptions): Promise<string> => {\n          return toImage(cartesianChartRef.current?.chartContainer, _legendsRef.current?.toSVG, _isRTL, opts);\n        },\n      }),\n      [],\n    );\n\n    const classes = useAreaChartStyles(props);\n\n    function _getMinMaxOfYAxis(points: LineChartPoints[], yAxisType: YAxisType, useSecondaryYScale: boolean) {\n      return findNumericMinMaxOfY(points, yAxisType, useSecondaryYScale);\n    }\n\n    function _getDomainNRangeValues(\n      points: LineChartPoints[],\n      margins: Margins,\n      width: number,\n      chartType: ChartTypes,\n      isRTL: boolean,\n      xAxisType: XAxisTypes,\n      barWidth: number,\n      tickValues: Date[] | number[] | undefined,\n    ) {\n      let domainNRangeValue: IDomainNRange;\n      if (xAxisType === XAxisTypes.NumericAxis) {\n        domainNRangeValue = domainRangeOfNumericForAreaLineScatterCharts(points, margins, width, isRTL);\n      } else if (xAxisType === XAxisTypes.DateAxis) {\n        domainNRangeValue = domainRangeOfDateForAreaLineScatterVerticalBarCharts(\n          points,\n          margins,\n          width,\n          isRTL,\n          tickValues! as Date[],\n          chartType,\n          barWidth,\n        );\n      } else {\n        domainNRangeValue = { dStartValue: 0, dEndValue: 0, rStartValue: 0, rEndValue: 0 };\n      }\n      return domainNRangeValue;\n    }\n\n    function _getMargins(margins: Margins) {\n      _margins = margins;\n    }\n\n    function _onRectMouseMove(mouseEvent: React.MouseEvent<SVGRectElement | SVGPathElement | SVGCircleElement>) {\n      mouseEvent.persist();\n      const { data } = props;\n      const { lineChartData } = data;\n      _updatePosition(mouseEvent.clientX, mouseEvent.clientY);\n      // This will get the value of the X when mouse is on the chart\n      // eslint-disable-next-line @nx/workspace-no-restricted-globals\n      const xOffset = _xAxisRectScale.invert(pointer(mouseEvent)[0], document.getElementById(_rectId)!);\n      const i = bisect(lineChartData![0].data, xOffset);\n      const d0 = lineChartData![0].data[i - 1] as LineChartDataPoint;\n      const d1 = lineChartData![0].data[i] as LineChartDataPoint;\n      let pointToHighlight: string | Date | number | null = null;\n      let index: null | number = null;\n      const axisType =\n        lineChartData![0].data.length > 0 ? (getTypeOfAxis(lineChartData![0].data[0].x, true) as XAxisTypes) : null;\n      if (d0 === undefined && d1 !== undefined) {\n        pointToHighlight = d1.x;\n        index = i;\n      } else if (d0 !== undefined && d1 === undefined) {\n        pointToHighlight = d0.x;\n        index = i - 1;\n      } else {\n        let x0;\n        let point0;\n        let point1;\n        switch (axisType) {\n          case XAxisTypes.DateAxis:\n            x0 = new Date(xOffset).getTime();\n            point0 = (d0.x as Date).getTime();\n            point1 = (d1.x as Date).getTime();\n            pointToHighlight = Math.abs(x0 - point0) > Math.abs(x0 - point1) ? d1.x : d0.x;\n            index = Math.abs(x0 - point0) > Math.abs(x0 - point1) ? i : i - 1;\n            break;\n          case XAxisTypes.NumericAxis:\n            x0 = xOffset as number;\n            point0 = d0.x as number;\n            point1 = d1.x as number;\n            pointToHighlight = Math.abs(x0 - point0) > Math.abs(x0 - point1) ? d1.x : d0.x;\n            index = Math.abs(x0 - point0) > Math.abs(x0 - point1) ? i : i - 1;\n            break;\n          default:\n            break;\n        }\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-shadow\n      const { xAxisCalloutData, xAxisCalloutAccessibilityData } = lineChartData![0].data[index as number];\n      const formattedDate =\n        pointToHighlight instanceof Date\n          ? formatDateToLocaleString(pointToHighlight, props.culture, props.useUTC as boolean)\n          : pointToHighlight;\n      const found = findCalloutPoints(_calloutPoints, pointToHighlight);\n      // eslint-disable-next-line @typescript-eslint/no-shadow\n      const _nearestCircleToHighlight =\n        axisType === XAxisTypes.DateAxis ? (pointToHighlight as Date).getTime() : pointToHighlight;\n      // if no points need to be called out then don't show vertical line and callout card\n      if (found) {\n        const filteredValues = _getFilteredLegendValues(found.values);\n        setNearestCircleToHighlight(_nearestCircleToHighlight);\n        setLineXValue(_xAxisRectScale(pointToHighlight));\n        setDisplayOfLine(InterceptVisibility.show);\n        setIsCircleClicked(false);\n        setStackCalloutProps({ ...found, values: filteredValues });\n        setYValueHover(filteredValues);\n        setDataPointCalloutProps({ ...found, values: filteredValues });\n        setHoverXValue(xAxisCalloutData ? xAxisCalloutData : formattedDate);\n        setXAxisCalloutAccessibilityData(xAxisCalloutAccessibilityData);\n        setActivePoint('');\n      } else {\n        setPopoverOpen(false);\n        setNearestCircleToHighlight(nearestCircleToHighlight);\n        setDisplayOfLine(InterceptVisibility.hide);\n        setIsCircleClicked(false);\n      }\n    }\n    /**\n     * just cleaning up the state which we have set in the mouse move event\n     */\n    function _onRectMouseOut() {\n      /**/\n    }\n\n    function _updatePosition(newX: number, newY: number) {\n      const threshold = 1; // Set a threshold for movement\n      const { x, y } = clickPosition;\n      // Calculate the distance moved\n      const distance = Math.sqrt(Math.pow(newX - x, 2) + Math.pow(newY - y, 2));\n      // Update the position only if the distance moved is greater than the threshold\n      if (distance > threshold) {\n        setClickPosition({ x: newX, y: newY });\n        setPopoverOpen(true);\n      }\n    }\n\n    function _handleChartMouseLeave() {\n      setPopoverOpen(false);\n      setNearestCircleToHighlight(null);\n      setLineXValue(0);\n      setDisplayOfLine(InterceptVisibility.hide);\n      setIsCircleClicked(false);\n      setStackCalloutProps(undefined);\n      setDataPointCalloutProps(undefined);\n      setHoverXValue(undefined);\n      setYValueHover([]);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    function _getDataPoints(keys: string[], dataSet: any) {\n      const renderPoints: Array<AreaChartDataSetPoint[]> = [];\n      let maxOfYVal = 0;\n\n      if (_shouldFillToZeroY()) {\n        keys.forEach((key, index) => {\n          const currentLayer: AreaChartDataSetPoint[] = [];\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          dataSet.forEach((d: any) => {\n            currentLayer.push({\n              values: [0, d[key]], // Start from zero for \"tozeroy\" mode\n              xVal: d.xVal,\n            });\n            if (d[key] > maxOfYVal) {\n              maxOfYVal = d[key];\n            }\n          });\n          renderPoints.push(currentLayer);\n        });\n      } else {\n        const dataValues = d3Stack().keys(keys)(dataSet);\n        maxOfYVal = d3Max(dataValues[dataValues.length - 1], dp => dp[1])!;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        dataValues.forEach((layer: any) => {\n          const currentLayer: AreaChartDataSetPoint[] = [];\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          layer.forEach((d: any) => {\n            currentLayer.push({\n              values: d,\n              xVal: d.data.xVal,\n            });\n          });\n          renderPoints.push(currentLayer);\n        });\n      }\n\n      _isMultiStackChart = !!(props.legendProps?.selectedLegends\n        ? renderPoints?.length >= 1\n        : renderPoints?.length > 1);\n      return {\n        renderData: renderPoints,\n        // The maxOfYVal prop is only required for the primary y-axis. When the data includes\n        // a secondary y-axis, the mode defaults to tozeroy, so maxOfYVal should be calculated using\n        // only the data points associated with the primary y-axis.\n        maxOfYVal: _containsSecondaryYAxis ? findNumericMinMaxOfY(props.data.lineChartData!).endValue : maxOfYVal,\n      };\n    }\n\n    function _createDataSet(points: LineChartPoints[]) {\n      if (props.enablePerfOptimization && _enableComputationOptimization) {\n        const allChartPoints: LineChartDataPoint[] = [];\n        const dataSet: AreaChartDataSetPoint[] = [];\n        const colors: string[] = [];\n        const opacity: number[] = [];\n        const calloutPoints = calloutData(points!);\n\n        points &&\n          points.length &&\n          points.forEach((singleChartPoint: LineChartPoints) => {\n            colors.push(singleChartPoint.color!);\n            opacity.push(singleChartPoint.opacity || 1);\n            allChartPoints.push(...(singleChartPoint.data as LineChartDataPoint[]));\n          });\n\n        const mapOfXvalToListOfDataPoints: MapXToDataSet = {};\n        allChartPoints.forEach((dataPoint: LineChartDataPoint) => {\n          const xValue = dataPoint.x instanceof Date ? dataPoint.x.toLocaleString() : dataPoint.x;\n          // map of x value to the list of data points which share the same x value .\n          if (mapOfXvalToListOfDataPoints[xValue]) {\n            mapOfXvalToListOfDataPoints[xValue].push(dataPoint);\n          } else {\n            mapOfXvalToListOfDataPoints[xValue] = [dataPoint];\n          }\n        });\n\n        Object.keys(mapOfXvalToListOfDataPoints).forEach((key: number | string) => {\n          const value: LineChartDataPoint[] = mapOfXvalToListOfDataPoints[key];\n\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          const singleDataset: any = {};\n          value.forEach((singleDataPoint: LineChartDataPoint, index: number) => {\n            singleDataset.xVal = singleDataPoint.x;\n            singleDataset[`chart${index}`] = singleDataPoint.y;\n          });\n          dataSet.push(singleDataset);\n        });\n\n        // get keys from dataset, used to render data\n        const keysLength: number = dataSet && Object.keys(dataSet[0])!.length;\n        const keys: string[] = [];\n        for (let i = 0; i < keysLength - 1; i++) {\n          const keyVal = `chart${i}`;\n          keys.push(keyVal);\n        }\n\n        // Data used to draw graph\n        const data = _getDataPoints(keys, dataSet);\n\n        return {\n          colors,\n          opacity,\n          keys,\n          data,\n          calloutPoints,\n        };\n      } else {\n        const allChartPoints: LineChartDataPoint[] = [];\n        const dataSet: AreaChartDataSetPoint[] = [];\n        const colors: string[] = [];\n        const opacity: number[] = [];\n        const calloutPoints = calloutData(points!);\n\n        points &&\n          points.length &&\n          points.forEach((singleChartPoint: LineChartPoints) => {\n            colors.push(singleChartPoint.color!);\n            opacity.push(singleChartPoint.opacity || 1);\n            allChartPoints.push(...(singleChartPoint.data as LineChartDataPoint[]));\n          });\n\n        let tempArr = allChartPoints;\n        while (tempArr.length) {\n          const valToCheck = tempArr[0].x instanceof Date ? tempArr[0].x.toLocaleString() : tempArr[0].x;\n          const filteredChartPoints: LineChartDataPoint[] = tempArr.filter(\n            (point: LineChartDataPoint) =>\n              (point.x instanceof Date ? point.x.toLocaleString() : point.x) === valToCheck,\n          );\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          const singleDataset: any = {};\n          filteredChartPoints.forEach((singleDataPoint: LineChartDataPoint, index: number) => {\n            singleDataset.xVal = singleDataPoint.x;\n            singleDataset[`chart${index}`] = singleDataPoint.y;\n          });\n          dataSet.push(singleDataset);\n          // removing compared objects from array\n          const val = tempArr[0].x instanceof Date ? tempArr[0].x.toLocaleString() : tempArr[0].x;\n          tempArr = tempArr.filter(\n            (point: LineChartDataPoint) => (point.x instanceof Date ? point.x.toLocaleString() : point.x) !== val,\n          );\n        }\n\n        // get keys from dataset, used to create stacked data\n        const keysLength: number = dataSet && Object.keys(dataSet[0])!.length;\n        const keys: string[] = [];\n        for (let i = 0; i < keysLength - 1; i++) {\n          const keyVal = `chart${i}`;\n          keys.push(keyVal);\n        }\n\n        // Data used to draw graph\n        const data = _getDataPoints(keys, dataSet);\n\n        return {\n          colors,\n          opacity,\n          keys,\n          data,\n          calloutPoints,\n        };\n      }\n    }\n\n    function _getCustomizedCallout() {\n      return props.onRenderCalloutPerStack\n        ? props.onRenderCalloutPerStack(stackCalloutProps)\n        : props.onRenderCalloutPerDataPoint\n        ? props.onRenderCalloutPerDataPoint(dataPointCalloutProps)\n        : null;\n    }\n\n    function _getGraphData(\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      xAxis: any,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      yAxis: any,\n      containerHeight: number,\n      containerWidth: number,\n      xElement: SVGElement | null,\n      yAxisElement?: SVGElement | null,\n      yScaleSecondary?: ScaleLinear<number, number>,\n    ) {\n      _chart = _drawGraph(containerHeight, xAxis, yAxis, yScaleSecondary, xElement!);\n    }\n\n    function _onLegendHover(legend: string): void {\n      setActiveLegend(legend);\n    }\n\n    function _onLegendLeave(): void {\n      setActiveLegend(undefined);\n    }\n\n    function _getLegendData(points: LineChartPoints[]): JSXElement {\n      const data = points;\n      const actions: Legend[] = [];\n\n      data.forEach((singleChartData: LineChartPoints) => {\n        const color: string = singleChartData.color!;\n        const checkSimilarLegends = actions.filter(\n          (leg: Legend) => leg.title === singleChartData.legend && leg.color === color,\n        );\n        if (checkSimilarLegends!.length > 0) {\n          return;\n        }\n\n        const legend: Legend = {\n          title: singleChartData.legend,\n          color,\n          hoverAction: () => {\n            _handleChartMouseLeave();\n            _onLegendHover(singleChartData.legend);\n          },\n          onMouseOutAction: () => {\n            _onLegendLeave();\n          },\n        };\n\n        actions.push(legend);\n      });\n      return (\n        <Legends\n          legends={actions}\n          enabledWrapLines={props.enabledLegendsWrapLines}\n          {...props.legendProps}\n          onChange={_onLegendSelectionChange}\n          legendRef={_legendsRef}\n        />\n      );\n    }\n\n    function _onLegendSelectionChange(\n      // eslint-disable-next-line @typescript-eslint/no-shadow\n      selectedLegends: string[],\n      event: React.MouseEvent<HTMLButtonElement>,\n      currentLegend?: Legend,\n    ): void {\n      if (props.legendProps?.canSelectMultipleLegends) {\n        setSelectedLegends(selectedLegends);\n      } else {\n        setSelectedLegends(selectedLegends.slice(-1));\n      }\n      if (props.legendProps?.onChange) {\n        props.legendProps.onChange(selectedLegends, event, currentLegend);\n      }\n    }\n\n    function _onDataPointClick(func: (() => void) | undefined) {\n      if (func) {\n        func();\n      }\n      setIsCircleClicked(true);\n    }\n\n    function _getOpacity(legend: string): number {\n      if (!_isMultiStackChart) {\n        return 0.7;\n      } else {\n        const opacity = _legendHighlighted(legend) || _noLegendHighlighted() ? 0.7 : 0.1;\n        return opacity;\n      }\n    }\n\n    function _getLineOpacity(legend: string): number {\n      if (!_isMultiStackChart) {\n        return 1;\n      } else {\n        let opacity = 0.3;\n        if (isPopoverOpen) {\n          opacity = 1;\n        }\n        if (!_noLegendHighlighted()) {\n          opacity = _legendHighlighted(legend) ? 0 : 0.1;\n        }\n        return opacity;\n      }\n    }\n\n    function _updateCircleFillColor(xDataPoint: number | Date, lineColor: string, circleId: string): string {\n      let fillColor = lineColor;\n      if (nearestCircleToHighlight === xDataPoint || activePoint === circleId) {\n        if (!isCircleClicked) {\n          fillColor = tokens.colorNeutralBackground1;\n        }\n      }\n\n      return fillColor;\n    }\n\n    function _drawGraph(\n      containerHeight: number,\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      xScale: any,\n      yScalePrimary: ScaleLinear<number, number>,\n      yScaleSecondary: ScaleLinear<number, number> | undefined,\n      xElement: SVGElement,\n    ): JSXElement[] {\n      const points = _addDefaultColors(props.data.lineChartData);\n      const { pointOptions, pointLineOptions } = props.data;\n\n      const graph: JSXElement[] = [];\n      let lineColor: string;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      _data.forEach((singleStackedData: Array<any>, index: number) => {\n        const yScale = points[index].useSecondaryYScale && yScaleSecondary ? yScaleSecondary : yScalePrimary;\n        const curveFactory = getCurveFactory(points[index].lineOptions?.curve, d3CurveBasis);\n        const area = d3Area()\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          .x((d: any) => xScale(d.xVal))\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          .y0((d: any) => yScale(d.values[0]))\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          .y1((d: any) => yScale(d.values[1]))\n          .curve(curveFactory);\n        const line = d3Line()\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          .x((d: any) => xScale(d.xVal))\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          .y((d: any) => yScale(d.values[1]))\n          .curve(curveFactory);\n        const layerOpacity = _shouldFillToZeroY() ? 0.8 : _opacity[index];\n        graph.push(\n          <React.Fragment key={`${index}-graph-${_uniqueIdForGraph}`}>\n            {props.enableGradient && (\n              <defs>\n                <linearGradient id={`gradient_${index}`} x1=\"0%\" x2=\"0%\" y1=\"0%\" y2=\"100%\">\n                  <stop offset=\"0\" stopColor={_colors[index]} />\n                  <stop offset=\"100%\" stopColor=\"transparent\" />\n                </linearGradient>\n              </defs>\n            )}\n            <path\n              id={`${index}-line-${_uniqueIdForGraph}`}\n              d={line(singleStackedData)!}\n              fill={'transparent'}\n              strokeWidth={points[index].lineOptions?.strokeWidth ?? 3}\n              stroke={_colors[index]}\n              opacity={_getLineOpacity(points[index]!.legend)}\n              onMouseMove={event => _onRectMouseMove(event)}\n              onMouseOut={_onRectMouseOut}\n              onMouseOver={event => _onRectMouseMove(event)}\n              strokeDasharray={points[index].lineOptions?.strokeDasharray}\n              strokeDashoffset={points[index].lineOptions?.strokeDashoffset}\n              strokeLinecap={points[index].lineOptions?.strokeLinecap}\n            />\n            {singleStackedData.length === 1 ? (\n              <circle\n                id={`${index}-graph-${_uniqueIdForGraph}`}\n                cx={xScale(singleStackedData[0].xVal)}\n                cy={yScale(singleStackedData[0].values[1])}\n                r={6}\n                stroke={_colors[index]}\n                strokeWidth={3}\n                fill={_colors[index]}\n                opacity={layerOpacity}\n                fillOpacity={_getOpacity(points[index]!.legend)}\n                onMouseMove={event => _onRectMouseMove(event)}\n                onFocus={event => _handleFocus(event, index, 0, `${_circleId}_${index}`)}\n                onMouseOut={_onRectMouseOut}\n                onMouseOver={event => _onRectMouseMove(event)}\n              />\n            ) : (\n              <path\n                id={`${index}-graph-${_uniqueIdForGraph}`}\n                d={area(singleStackedData)!}\n                fill={props.enableGradient ? `url(#gradient_${index})` : _colors[index]}\n                opacity={layerOpacity}\n                fillOpacity={_getOpacity(points[index]!.legend)}\n                onMouseMove={event => _onRectMouseMove(event)}\n                onMouseOut={_onRectMouseOut}\n                onMouseOver={event => _onRectMouseMove(event)}\n                {...(props.optimizeLargeData && {\n                  tabIndex: _legendHighlighted(points[index]!.legend) || _noLegendHighlighted() ? 0 : undefined,\n                  role: 'img',\n                  'aria-label': `${points[index].legend}, series ${index + 1} of ${points.length} with ${\n                    points[index].data.length\n                  } data points.`,\n                })}\n              />\n            )}\n          </React.Fragment>,\n        );\n      });\n\n      const circleRadius = pointOptions && pointOptions.r ? Number(pointOptions.r) : 8;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      _data.forEach((singleStackedData: Array<any>, index: number) => {\n        if (points.length === index) {\n          return;\n        }\n        const yScale = points[index].useSecondaryYScale && yScaleSecondary ? yScaleSecondary : yScalePrimary;\n\n        if (!props.optimizeLargeData || singleStackedData.length === 1) {\n          // Render circles for all data points\n          graph.push(\n            <g\n              key={`${index}-dots-${_uniqueIdForGraph}`}\n              clipPath=\"url(#clip)\"\n              role=\"region\"\n              aria-label={`${points[index].legend}, series ${index + 1} of ${points.length} with ${\n                points[index].data.length\n              } data points.`}\n            >\n              {singleStackedData.map((singlePoint: DPointType, pointIndex: number) => {\n                const circleId = `${_circleId}_${index * _data[0].length + pointIndex}`;\n                const xDataPoint = singlePoint.xVal instanceof Date ? singlePoint.xVal.getTime() : singlePoint.xVal;\n                lineColor = points[index]!.color!;\n                const legend = points[index]!.legend;\n                return (\n                  <circle\n                    key={circleId}\n                    id={circleId}\n                    tabIndex={_legendHighlighted(points[index]!.legend) || _noLegendHighlighted() ? 0 : undefined}\n                    cx={xScale(singlePoint.xVal)}\n                    cy={yScale(singlePoint.values[1])}\n                    stroke={lineColor}\n                    strokeWidth={3}\n                    fill={_updateCircleFillColor(xDataPoint, lineColor, circleId)}\n                    onMouseOut={_onRectMouseOut}\n                    onMouseOver={event => _onRectMouseMove(event)}\n                    onClick={() => _onDataPointClick(points[index]!.data[pointIndex].onDataPointClick!)}\n                    onFocus={event => _handleFocus(event, index, pointIndex, circleId)}\n                    onBlur={_handleBlur}\n                    {...getSecureProps(pointOptions)}\n                    r={_getCircleRadius(xDataPoint, circleRadius, circleId, legend)}\n                    role=\"img\"\n                    aria-label={_getAriaLabel(index, pointIndex)}\n                  />\n                );\n              })}\n            </g>,\n          );\n        } else {\n          // Render circles for data points close to the mouse pointer only\n          singleStackedData.forEach((singlePoint: DPointType, pointIndex: number) => {\n            const xDataPoint = singlePoint.xVal instanceof Date ? singlePoint.xVal.getTime() : singlePoint.xVal;\n            if (nearestCircleToHighlight === xDataPoint) {\n              const circleId = `${_circleId}_${index * _data[0].length + pointIndex}`;\n              lineColor = points[index]!.color!;\n              const legend = points[index]!.legend;\n              graph.push(\n                <circle\n                  key={circleId}\n                  id={circleId}\n                  cx={xScale(singlePoint.xVal)}\n                  cy={yScale(singlePoint.values[1])}\n                  stroke={lineColor}\n                  strokeWidth={3}\n                  fill={_updateCircleFillColor(xDataPoint, lineColor, circleId)}\n                  onMouseOut={_onRectMouseOut}\n                  onMouseOver={event => _onRectMouseMove(event)}\n                  onFocus={event => _handleFocus(event, index, pointIndex, circleId)}\n                  onClick={() => _onDataPointClick(points[index]!.data[pointIndex].onDataPointClick!)}\n                  {...getSecureProps(pointOptions)}\n                  r={_getCircleRadius(xDataPoint, circleRadius, circleId, legend)}\n                />,\n              );\n            }\n          });\n        }\n      });\n      graph.push(\n        <line\n          id={_verticalLineId}\n          key={_verticalLineId}\n          x1={lineXValue}\n          y1={0}\n          x2={lineXValue}\n          y2={containerHeight}\n          strokeWidth={1}\n          strokeDasharray={5.5}\n          stroke={lineColor!}\n          opacity={0.5}\n          visibility={displayOfLine}\n          {...getSecureProps(pointLineOptions)}\n        />,\n      );\n      // Removing un wanted tooltip div from DOM, when prop not provided.\n      if (!props.showXAxisLablesTooltip) {\n        try {\n          // eslint-disable-next-line @nx/workspace-no-restricted-globals\n          document.getElementById(_tooltipId) && document.getElementById(_tooltipId)!.remove();\n          // eslint-disable-next-line no-empty\n        } catch (e) {}\n      }\n      // Used to display tooltip at x axis labels.\n      if (!props.wrapXAxisLables && props.showXAxisLablesTooltip) {\n        const xAxisElement = d3Select(xElement).call(xScale);\n        try {\n          // eslint-disable-next-line @nx/workspace-no-restricted-globals\n          document.getElementById(_tooltipId) && document.getElementById(_tooltipId)!.remove();\n          // eslint-disable-next-line no-empty\n        } catch (e) {}\n        const tooltipProps = {\n          tooltipCls: classes.tooltip!,\n          id: _tooltipId,\n          axis: xAxisElement,\n        };\n        xAxisElement && tooltipOfAxislabels(tooltipProps);\n      }\n      return graph;\n    }\n\n    function _getCircleRadius(xDataPoint: number, circleRadius: number, circleId: string, legend: string): number {\n      // Show the circle if no legends are selected or if the point's legend is in the selected legends\n      if (!_noLegendHighlighted() && !_legendHighlighted(legend)) {\n        return 0;\n      }\n\n      if (isCircleClicked && nearestCircleToHighlight === xDataPoint) {\n        return 1;\n      } else if (nearestCircleToHighlight === xDataPoint || activePoint === circleId) {\n        return circleRadius;\n      } else {\n        return 0;\n      }\n    }\n\n    /**\n     * This function checks if the given legend is highlighted or not.\n     * A legend can be highlighted in 2 ways:\n     * 1. selection: if the user clicks on it\n     * 2. hovering: if there is no selected legend and the user hovers over it\n     */\n    function _legendHighlighted(legend: string) {\n      return _getHighlightedLegend().includes(legend!);\n    }\n\n    /**\n     * This function checks if none of the legends is selected or hovered.\n     */\n    function _noLegendHighlighted() {\n      return _getHighlightedLegend().length === 0;\n    }\n\n    function _getHighlightedLegend() {\n      return selectedLegends.length > 0 ? selectedLegends : activeLegend ? [activeLegend] : [];\n    }\n\n    function _addDefaultColors(lineChartData?: LineChartPoints[]): LineChartPoints[] {\n      return lineChartData\n        ? lineChartData.map((item, index) => {\n            let color: string;\n            // isInverted property is applicable to v8 themes only\n            if (typeof item.color === 'undefined') {\n              color = getNextColor(index, 0);\n            } else {\n              color = getColorFromToken(item.color);\n            }\n\n            return { ...item, color };\n          })\n        : [];\n    }\n\n    function _handleFocus(\n      event: React.FocusEvent<SVGCircleElement, Element>,\n      lineIndex: number,\n      pointIndex: number,\n      circleId: string,\n    ) {\n      let cx = 0;\n      let cy = 0;\n\n      const targetRect = (event.target as SVGCircleElement).getBoundingClientRect();\n      cx = targetRect.left + targetRect.width / 2;\n      cy = targetRect.top + targetRect.height / 2;\n      _updatePosition(cx, cy);\n\n      const { x, y, xAxisCalloutData } = props.data.lineChartData![lineIndex].data[pointIndex];\n      const formattedDate = x instanceof Date ? formatDateToLocaleString(x, props.culture, props.useUTC as boolean) : x;\n      const found = findCalloutPoints(_calloutPoints, x);\n      if (found) {\n        // Show details in the callout for the focused point only\n        found.values = found.values.filter((e: { y: number }) => e.y === y);\n        const filteredValues = _getFilteredLegendValues(found.values);\n\n        setPopoverOpen(true);\n        setHoverXValue(xAxisCalloutData ? xAxisCalloutData : formattedDate);\n        setYValueHover(filteredValues!);\n        setStackCalloutProps({ ...found, values: filteredValues });\n        setDataPointCalloutProps({ ...found, values: filteredValues });\n        setActivePoint(circleId);\n      }\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    function _getFilteredLegendValues(values: any) {\n      return !_noLegendHighlighted()\n        ? values.filter((value: { legend: string }) => _legendHighlighted(value.legend))\n        : values;\n    }\n\n    function _handleBlur() {\n      setPopoverOpen(false);\n      setHoverXValue(undefined);\n      setYValueHover([]);\n      setStackCalloutProps(undefined);\n      setDataPointCalloutProps(undefined);\n      setActivePoint('');\n    }\n\n    function _getAriaLabel(lineIndex: number, pointIndex: number): string {\n      const line = props.data.lineChartData![lineIndex];\n      const point = line.data[pointIndex];\n      const formattedDate =\n        point.x instanceof Date ? formatDateToLocaleString(point.x, props.culture, props.useUTC as boolean) : point.x;\n      const xValue = point.xAxisCalloutData || formattedDate;\n      const legend = line.legend;\n      const yValue = point.yAxisCalloutData || point.y;\n      return point.callOutAccessibilityData?.ariaLabel || `${xValue}. ${legend}, ${yValue}.`;\n    }\n\n    function _isChartEmpty(): boolean {\n      return !(\n        (\n          props.data &&\n          props.data.lineChartData &&\n          props.data.lineChartData.length > 0 &&\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          props.data.lineChartData.filter((item: { data: string | any[] }) => item.data.length === 0).length === 0\n        )\n        // if all the data sets have no data\n        // filtering all items which have no data and checking if the length of the filtered array is 0\n        // which means chart is not empty\n      );\n    }\n\n    function _getChartTitle(): string {\n      const { chartTitle, lineChartData } = props.data;\n      return (chartTitle ? `${chartTitle}. ` : '') + `Area chart with ${lineChartData?.length || 0} data series. `;\n    }\n\n    function _shouldFillToZeroY() {\n      return props.mode === 'tozeroy' || _containsSecondaryYAxis;\n    }\n\n    if (!_isChartEmpty()) {\n      const { lineChartData } = props.data;\n      const points = _addDefaultColors(lineChartData);\n      _containsSecondaryYAxis = !!props.secondaryYScaleOptions && points.some(point => point.useSecondaryYScale);\n      _createSet = _createDataSet;\n      const { colors, opacity, data, calloutPoints } = _createSet(points);\n      _calloutPoints = calloutPoints;\n      const isXAxisDateType = getXAxisType(points);\n      _colors = colors;\n      _opacity = opacity;\n      _data = data.renderData;\n      const legends: JSXElement = _getLegendData(points);\n\n      const tickParams = {\n        tickValues: props.tickValues,\n        tickFormat: props.tickFormat,\n      };\n\n      const calloutProps: ChartPopoverProps = {\n        YValueHover: YValueHover!,\n        hoverXValue: hoverXValue!,\n        xAxisCalloutAccessibilityData,\n        ...props.calloutProps,\n        clickPosition,\n        isPopoverOpen,\n        isCartesian: true,\n        customCallout: {\n          customizedCallout: _getCustomizedCallout() !== null ? _getCustomizedCallout()! : undefined,\n          customCalloutProps: props.calloutPropsPerDataPoint\n            ? props.calloutPropsPerDataPoint(dataPointCalloutProps!)\n            : undefined,\n        },\n        isCalloutForStack: true,\n      };\n      return (\n        <CartesianChart\n          {...props}\n          chartTitle={_getChartTitle()}\n          points={points}\n          chartType={ChartTypes.AreaChart}\n          calloutProps={calloutProps}\n          legendBars={legends}\n          createYAxis={createNumericYAxis}\n          xAxisType={isXAxisDateType ? XAxisTypes.DateAxis : XAxisTypes.NumericAxis}\n          tickParams={tickParams}\n          maxOfYVal={data.maxOfYVal}\n          getGraphData={_getGraphData}\n          getDomainNRangeValues={_getDomainNRangeValues}\n          createStringYAxis={createStringYAxis}\n          getmargins={_getMargins}\n          onChartMouseLeave={_handleChartMouseLeave}\n          getMinMaxOfYAxis={_getMinMaxOfYAxis}\n          enableFirstRenderOptimization={props.enablePerfOptimization && _firstRenderOptimization}\n          componentRef={cartesianChartRef}\n          /* eslint-disable react/jsx-no-bind */\n          // eslint-disable-next-line react/no-children-prop, @typescript-eslint/no-shadow\n          children={(props: ChildProps) => {\n            _xAxisRectScale = props.xScale;\n            const ticks = _xAxisRectScale.ticks();\n            const width1 = _xAxisRectScale(ticks[ticks.length - 1]);\n            const rectHeight = props.containerHeight! - _margins.top!;\n            return (\n              <>\n                <g>\n                  <rect\n                    id={_rectId}\n                    width={width1}\n                    height={rectHeight}\n                    fill={'transparent'}\n                    onMouseMove={event => _onRectMouseMove(event)}\n                    onMouseOut={_onRectMouseOut}\n                    onMouseOver={event => _onRectMouseMove(event)}\n                  />\n                </g>\n                <g>{_chart}</g>\n              </>\n            );\n          }}\n        />\n      );\n    }\n    return (\n      <div id={_emptyChartId} role={'alert'} style={{ opacity: '0' }} aria-label={'Graph has no data to display'} />\n    );\n  },\n);\nAreaChart.displayName = 'AreaChart';\n"],"names":["React","useAreaChartStyles","max","d3Max","bisector","pointer","select","d3Select","tokens","area","d3Area","stack","d3Stack","curveMonotoneX","d3CurveBasis","line","d3Line","CartesianChart","calloutData","getXAxisType","ChartTypes","XAxisTypes","getTypeOfAxis","tooltipOfAxislabels","getNextColor","getColorFromToken","getSecureProps","areArraysEqual","getCurveFactory","findNumericMinMaxOfY","createNumericYAxis","domainRangeOfNumericForAreaLineScatterCharts","domainRangeOfDateForAreaLineScatterVerticalBarCharts","createStringYAxis","useRtl","findCalloutPoints","useId","Legends","toImage","formatDateToLocaleString","bisect","d","x","left","InterceptVisibility","AreaChart","forwardRef","props","forwardedRef","_uniqueIdForGraph","_verticalLineId","_circleId","_rectId","_tooltipId","_enableComputationOptimization","_firstRenderOptimization","_emptyChartId","_containsSecondaryYAxis","_calloutPoints","_createSet","_colors","_opacity","_data","_chart","_margins","_xAxisRectScale","_isMultiStackChart","cartesianChartRef","useRef","_legendsRef","_isRTL","selectedLegends","setSelectedLegends","useState","legendProps","activeLegend","setActiveLegend","undefined","hoverXValue","setHoverXValue","YValueHover","setYValueHover","lineXValue","setLineXValue","displayOfLine","setDisplayOfLine","isCircleClicked","setIsCircleClicked","nearestCircleToHighlight","setNearestCircleToHighlight","activePoint","setActivePoint","dataPointCalloutProps","setDataPointCalloutProps","stackCalloutProps","setStackCalloutProps","xAxisCalloutAccessibilityData","setXAxisCalloutAccessibilityData","clickPosition","setClickPosition","y","isPopoverOpen","setPopoverOpen","prevPropsRef","useEffect","current","prevProps","useImperativeHandle","componentRef","chartContainer","opts","toSVG","classes","_getMinMaxOfYAxis","points","yAxisType","useSecondaryYScale","_getDomainNRangeValues","margins","width","chartType","isRTL","xAxisType","barWidth","tickValues","domainNRangeValue","NumericAxis","DateAxis","dStartValue","dEndValue","rStartValue","rEndValue","_getMargins","_onRectMouseMove","mouseEvent","persist","data","lineChartData","_updatePosition","clientX","clientY","xOffset","invert","document","getElementById","i","d0","d1","pointToHighlight","index","axisType","length","x0","point0","point1","Date","getTime","Math","abs","xAxisCalloutData","formattedDate","culture","useUTC","found","_nearestCircleToHighlight","filteredValues","_getFilteredLegendValues","values","_onRectMouseOut","newX","newY","threshold","distance","sqrt","pow","_handleChartMouseLeave","_getDataPoints","keys","dataSet","renderPoints","maxOfYVal","_shouldFillToZeroY","forEach","key","currentLayer","push","xVal","dataValues","dp","layer","renderData","endValue","_createDataSet","enablePerfOptimization","allChartPoints","colors","opacity","calloutPoints","singleChartPoint","color","mapOfXvalToListOfDataPoints","dataPoint","xValue","toLocaleString","Object","value","singleDataset","singleDataPoint","keysLength","keyVal","tempArr","valToCheck","filteredChartPoints","filter","point","val","_getCustomizedCallout","onRenderCalloutPerStack","onRenderCalloutPerDataPoint","_getGraphData","xAxis","yAxis","containerHeight","containerWidth","xElement","yAxisElement","yScaleSecondary","_drawGraph","_onLegendHover","legend","_onLegendLeave","_getLegendData","actions","singleChartData","checkSimilarLegends","leg","title","hoverAction","onMouseOutAction","legends","enabledWrapLines","enabledLegendsWrapLines","onChange","_onLegendSelectionChange","legendRef","event","currentLegend","canSelectMultipleLegends","slice","_onDataPointClick","func","_getOpacity","_legendHighlighted","_noLegendHighlighted","_getLineOpacity","_updateCircleFillColor","xDataPoint","lineColor","circleId","fillColor","colorNeutralBackground1","xScale","yScalePrimary","_addDefaultColors","pointOptions","pointLineOptions","graph","singleStackedData","yScale","curveFactory","lineOptions","curve","y0","y1","layerOpacity","Fragment","enableGradient","defs","linearGradient","id","x1","x2","y2","stop","offset","stopColor","path","fill","strokeWidth","stroke","onMouseMove","onMouseOut","onMouseOver","strokeDasharray","strokeDashoffset","strokeLinecap","circle","cx","cy","r","fillOpacity","onFocus","_handleFocus","optimizeLargeData","tabIndex","role","circleRadius","Number","g","clipPath","aria-label","map","singlePoint","pointIndex","onClick","onDataPointClick","onBlur","_handleBlur","_getCircleRadius","_getAriaLabel","visibility","showXAxisLablesTooltip","remove","e","wrapXAxisLables","xAxisElement","call","tooltipProps","tooltipCls","tooltip","axis","_getHighlightedLegend","includes","item","lineIndex","targetRect","target","getBoundingClientRect","top","height","yValue","yAxisCalloutData","callOutAccessibilityData","ariaLabel","_isChartEmpty","_getChartTitle","chartTitle","mode","secondaryYScaleOptions","some","isXAxisDateType","tickParams","tickFormat","calloutProps","isCartesian","customCallout","customizedCallout","customCalloutProps","calloutPropsPerDataPoint","isCalloutForStack","legendBars","createYAxis","getGraphData","getDomainNRangeValues","getmargins","onChartMouseLeave","getMinMaxOfYAxis","enableFirstRenderOptimization","children","ticks","width1","rectHeight","rect","div","style","displayName"],"mappings":"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"}