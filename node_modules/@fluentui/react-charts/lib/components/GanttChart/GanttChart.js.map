{"version":3,"sources":["../src/components/GanttChart/GanttChart.tsx"],"sourcesContent":["'use client';\n\nimport * as React from 'react';\nimport { max as d3Max, min as d3Min } from 'd3-array';\nimport { ScaleLinear, ScaleBand, ScaleTime } from 'd3-scale';\nimport { useId } from '@fluentui/react-utilities';\nimport type { JSXElement } from '@fluentui/react-utilities';\nimport { Legend, Legends, LegendContainer } from '../Legends/index';\nimport { Margins, GanttChartDataPoint } from '../../types/DataPoint';\nimport { CartesianChart, ModifiedCartesianChartProps } from '../CommonComponents/index';\nimport { GanttChartProps } from './GanttChart.types';\nimport { ChartPopover } from '../CommonComponents/ChartPopover';\nimport { ChartPopoverProps, ImageExportOptions, Chart } from '../../index';\nimport {\n  ChartTypes,\n  YAxisType,\n  XAxisTypes,\n  getTypeOfAxis,\n  getNextColor,\n  findHBCWANumericMinMaxOfY,\n  createYAxisForHorizontalBarChartWithAxis,\n  IDomainNRange,\n  createStringYAxisForHorizontalBarChartWithAxis,\n  areArraysEqual,\n  MIN_DOMAIN_MARGIN,\n  sortAxisCategories,\n  calculateAppropriateBarWidth,\n  getColorFromToken,\n  getScalePadding,\n  getDateFormatLevel,\n  useRtl,\n} from '../../utilities/index';\nimport { formatDateToLocaleString, getMultiLevelDateTimeFormatOptions } from '@fluentui/chart-utilities';\nimport { toImage } from '../../utilities/image-export-utils';\n\ntype NumberScale = ScaleLinear<number, number>;\ntype StringScale = ScaleBand<string>;\ntype DateScale = ScaleTime<Date, number>;\n\nconst DEFAULT_BAR_HEIGHT = 24;\nconst MIN_BAR_HEIGHT = 1;\n\nexport const GanttChart: React.FunctionComponent<GanttChartProps> = React.forwardRef<HTMLDivElement, GanttChartProps>(\n  ({ useUTC = true, yAxisCategoryOrder = 'default', maxBarHeight = 24, ...props }, forwardedRef) => {\n    const _barHeight = React.useRef<number>(DEFAULT_BAR_HEIGHT);\n    const _margins = React.useRef<Margins>({});\n    const _calloutAnchorPoint = React.useRef<GanttChartDataPoint | null>(null);\n    const _emptyChartId = useId('Gantt_empty');\n    const _legendId = useId('gantt_legend');\n    const _legendMap = React.useRef<Record<string, { id: string; startColor: string; endColor: string }>>({});\n    const _prevProps = React.useRef<Partial<GanttChartProps>>({});\n\n    const [calloutColor, setCalloutColor] = React.useState<string>('');\n    const [hoveredLegend, setHoveredLegend] = React.useState<string>('');\n    const [calloutLegend, setCalloutLegend] = React.useState<string>('');\n    const [xCalloutValue, setXCalloutValue] = React.useState<string>('');\n    const [yCalloutValue, setYCalloutValue] = React.useState<string>('');\n    const [selectedLegends, setSelectedLegends] = React.useState<string[]>(props.legendProps?.selectedLegends || []);\n    const [calloutDataPoint, setCalloutDataPoint] = React.useState<GanttChartDataPoint>();\n    const [clickPosition, setClickPosition] = React.useState({ x: 0, y: 0 });\n    const [isPopoverOpen, setPopoverOpen] = React.useState(false);\n    const cartesianChartRef = React.useRef<Chart>(null);\n    const _legendsRef = React.useRef<LegendContainer>(null);\n    const _isRTL = useRtl();\n\n    React.useEffect(() => {\n      if (!areArraysEqual(_prevProps.current.legendProps?.selectedLegends, props.legendProps?.selectedLegends)) {\n        setSelectedLegends(props.legendProps?.selectedLegends || []);\n      }\n      _prevProps.current = props;\n    }, [props]);\n\n    React.useImperativeHandle(\n      props.componentRef,\n      () => ({\n        chartContainer: cartesianChartRef.current?.chartContainer ?? null,\n        toImage: (opts?: ImageExportOptions): Promise<string> => {\n          return toImage(cartesianChartRef.current?.chartContainer, _legendsRef.current?.toSVG, _isRTL, opts);\n        },\n      }),\n      [],\n    );\n\n    const _points = React.useMemo(() => {\n      _legendMap.current = {};\n      let colorIndex = 0;\n\n      return (\n        props.data?.map(point => {\n          const legend = `${point.legend}`;\n          if (!_legendMap.current[legend]) {\n            let startColor = point.color ? getColorFromToken(point.color) : getNextColor(colorIndex, 0);\n            let endColor = startColor;\n\n            if (props.enableGradient) {\n              startColor = point.gradient?.[0]!;\n              endColor = point.gradient?.[1]!;\n            }\n\n            _legendMap.current[legend] = { id: `${_legendId}_${colorIndex}`, startColor, endColor };\n            colorIndex += 1;\n          }\n\n          const { startColor, endColor } = _legendMap.current[legend];\n          return {\n            ...point,\n            color: startColor,\n            ...(props.enableGradient ? { gradient: [startColor, endColor] as [string, string] } : {}),\n          };\n        }) ?? []\n      );\n    }, [props.data, props.enableGradient]);\n\n    const _xAxisType = React.useMemo(() => {\n      if (_points.length > 0) {\n        return getTypeOfAxis(_points[0].x.start, true) as XAxisTypes;\n      }\n      return XAxisTypes.DateAxis;\n    }, [_points]);\n\n    const _yAxisType = React.useMemo(() => {\n      if (_points.length > 0) {\n        return getTypeOfAxis(_points[0].y, false) as YAxisType;\n      }\n      return YAxisType.StringAxis;\n    }, [_points]);\n\n    const _yAxisPadding = React.useMemo(() => {\n      return getScalePadding(props.yAxisPadding, undefined, 1 / 2);\n    }, [props.yAxisPadding]);\n\n    const _dateFormatOptions = React.useMemo(() => {\n      if (_xAxisType !== XAxisTypes.DateAxis) {\n        return undefined;\n      }\n\n      let lowestFormatLevel = 100;\n      let highestFormatLevel = -1;\n      _points.forEach(p => {\n        const startFormatLevel = getDateFormatLevel(p.x.start as Date, useUTC as boolean);\n        const endFormatLevel = getDateFormatLevel(p.x.end as Date, useUTC as boolean);\n        lowestFormatLevel = Math.min(lowestFormatLevel, startFormatLevel, endFormatLevel);\n        highestFormatLevel = Math.max(highestFormatLevel, startFormatLevel, endFormatLevel);\n      });\n\n      return getMultiLevelDateTimeFormatOptions(lowestFormatLevel, highestFormatLevel);\n    }, [useUTC, _points, _xAxisType]);\n\n    const _mapYValueToXValues = React.useCallback(() => {\n      const yValueToXValues: Record<string, number[]> = {};\n      _points.forEach(point => {\n        if (!yValueToXValues[point.y]) {\n          yValueToXValues[point.y] = [];\n        }\n        yValueToXValues[point.y].push(+point.x.end - +point.x.start);\n      });\n      return yValueToXValues;\n    }, [_points]);\n\n    const _getOrderedYAxisLabels = React.useCallback(() => {\n      const yValueToXValues = _mapYValueToXValues();\n\n      if (_yAxisType !== YAxisType.StringAxis) {\n        return Object.keys(yValueToXValues).sort((a, b) => +a - +b);\n      }\n\n      if (yAxisCategoryOrder === 'default') {\n        return Object.keys(yValueToXValues).reverse();\n      }\n      return sortAxisCategories(yValueToXValues, yAxisCategoryOrder);\n    }, [_mapYValueToXValues, _yAxisType, yAxisCategoryOrder]);\n\n    const _yAxisLabels = React.useMemo(() => _getOrderedYAxisLabels(), [_getOrderedYAxisLabels]);\n\n    const _getDomainNRangeValues = React.useCallback(\n      (\n        points: GanttChartDataPoint[],\n        margins: Margins,\n        containerWidth: number,\n        chartType: ChartTypes,\n        isRTL: boolean,\n        xAxisType: XAxisTypes,\n        barWidth: number,\n        tickValues: Date[] | number[] | undefined,\n        shiftX: number,\n      ): IDomainNRange => {\n        const xValues: (Date | number)[] = [];\n        points.forEach(point => {\n          xValues.push(point.x.start, point.x.end);\n        });\n\n        const xMin = d3Min(xValues) || 0;\n        const xMax = d3Max(xValues) || 0;\n\n        return {\n          dStartValue: isRTL ? xMax : xMin,\n          dEndValue: isRTL ? xMin : xMax,\n          rStartValue: margins.left! + (isRTL ? 0 : shiftX),\n          rEndValue: containerWidth - margins.right! - (isRTL ? shiftX : 0),\n        };\n      },\n      [],\n    );\n\n    const _getMargins = React.useCallback((margins: Margins) => {\n      _margins.current = margins;\n    }, []);\n\n    const _getFormattedXValue = React.useCallback(\n      (point: GanttChartDataPoint): string => {\n        let formattedStartX: string;\n        let formattedEndX: string;\n\n        if (_xAxisType === XAxisTypes.DateAxis) {\n          formattedStartX = formatDateToLocaleString(\n            point.x.start as Date,\n            props.culture,\n            useUTC as boolean,\n            false,\n            _dateFormatOptions,\n          );\n          formattedEndX = formatDateToLocaleString(\n            point.x.end as Date,\n            props.culture,\n            useUTC as boolean,\n            false,\n            _dateFormatOptions,\n          );\n        } else {\n          formattedStartX = point.x.start.toString();\n          formattedEndX = point.x.end.toString();\n        }\n\n        return `${formattedStartX} - ${formattedEndX}`;\n      },\n      [props.culture, useUTC, _dateFormatOptions, _xAxisType],\n    );\n\n    const _getCustomizedCallout = React.useCallback(() => {\n      const defaultRender = (point?: GanttChartDataPoint): JSXElement | null => {\n        return point ? (\n          <ChartPopover\n            isPopoverOpen={isPopoverOpen}\n            clickPosition={clickPosition}\n            XValue={point.yAxisCalloutData || point.y.toString()}\n            legend={point.legend}\n            YValue={point.xAxisCalloutData || _getFormattedXValue(point)}\n            color={point.color}\n            culture={props.culture}\n          />\n        ) : null;\n      };\n\n      return props.onRenderCalloutPerDataPoint\n        ? props.onRenderCalloutPerDataPoint(calloutDataPoint, defaultRender)\n        : null;\n      //eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [_getFormattedXValue, calloutDataPoint, props.culture, props.onRenderCalloutPerDataPoint]);\n\n    const _getAriaLabel = React.useCallback(\n      (point: GanttChartDataPoint): string => {\n        const xValue = point.xAxisCalloutData || _getFormattedXValue(point);\n        const yValue = point.yAxisCalloutData || point.y;\n        return (\n          point.callOutAccessibilityData?.ariaLabel ||\n          `${yValue}. ` + (point.legend ? `${point.legend}, ` : '') + `${xValue}.`\n        );\n      },\n      [_getFormattedXValue],\n    );\n\n    const _getHighlightedLegend = React.useCallback(() => {\n      return selectedLegends.length > 0 ? selectedLegends : hoveredLegend ? [hoveredLegend] : [];\n    }, [hoveredLegend, selectedLegends]);\n\n    /**\n     * This function checks if the given legend is highlighted or not.\n     * A legend can be highlighted in 2 ways:\n     * 1. selection: if the user clicks on it\n     * 2. hovering: if there is no selected legend and the user hovers over it\n     */\n    const _legendHighlighted = React.useCallback(\n      (legend: string | undefined) => {\n        return _getHighlightedLegend().includes(`${legend}`);\n      },\n      [_getHighlightedLegend],\n    );\n\n    /**\n     * This function checks if none of the legends is selected or hovered.\n     */\n    const _noLegendHighlighted = React.useCallback(() => {\n      return _getHighlightedLegend().length === 0;\n    }, [_getHighlightedLegend]);\n\n    const _showCallout = React.useCallback(\n      (target: React.MouseEvent<SVGElement> | React.FocusEvent<SVGElement>, point: GanttChartDataPoint) => {\n        if (!(_noLegendHighlighted() || _legendHighlighted(point.legend)) || _calloutAnchorPoint.current === point) {\n          return;\n        }\n        if ('clientX' in target && 'clientY' in target) {\n          updatePosition(target.clientX, target.clientY);\n        } else {\n          const rect = (target.target as SVGElement).getBoundingClientRect();\n          updatePosition(rect.left, rect.top);\n        }\n        _calloutAnchorPoint.current = point;\n        setPopoverOpen(true);\n        setCalloutLegend(point.legend!);\n        setCalloutColor(point.color!);\n        setXCalloutValue(point.yAxisCalloutData || point.y.toString());\n        setYCalloutValue(point.xAxisCalloutData! || _getFormattedXValue(point));\n        setCalloutDataPoint(point);\n      },\n      [_getFormattedXValue, _legendHighlighted, _noLegendHighlighted],\n    );\n\n    const _onBarFocus = React.useCallback(\n      (point: GanttChartDataPoint, focusEvent: React.FocusEvent<SVGElement>): void => {\n        _showCallout(focusEvent, point);\n      },\n      [_showCallout],\n    );\n\n    const _onBarHover = React.useCallback(\n      (point: GanttChartDataPoint, mouseEvent: React.MouseEvent<SVGElement>): void => {\n        _showCallout(mouseEvent, point);\n      },\n      [_showCallout],\n    );\n\n    const _onBarLeave = React.useCallback((): void => {\n      // do nothing\n    }, []);\n\n    const _handleChartMouseLeave = React.useCallback((): void => {\n      _calloutAnchorPoint.current = null;\n      setPopoverOpen(false);\n      setCalloutLegend('');\n      setCalloutColor('');\n      setXCalloutValue('');\n      setYCalloutValue('');\n      setCalloutDataPoint(undefined);\n    }, []);\n\n    const _getBarHeight = React.useCallback(\n      (adjustedValue: number): number => {\n        let barHeight: number;\n        if (typeof props.barHeight === 'number') {\n          barHeight = props.barHeight;\n        } else {\n          barHeight = adjustedValue;\n        }\n        if (typeof maxBarHeight === 'number') {\n          barHeight = Math.min(barHeight, maxBarHeight);\n        }\n        barHeight = Math.max(barHeight, MIN_BAR_HEIGHT);\n        return barHeight;\n      },\n      [maxBarHeight, props.barHeight],\n    );\n\n    const _getOrderedDataPoints = React.useCallback(() => {\n      const result: GanttChartDataPoint[] = [];\n\n      const yValueToPoints: Record<string, GanttChartDataPoint[]> = {};\n      _points.forEach(point => {\n        if (!yValueToPoints[point.y]) {\n          yValueToPoints[point.y] = [];\n        }\n        yValueToPoints[point.y].push(point);\n      });\n\n      for (let i = _yAxisLabels.length - 1; i >= 0; i--) {\n        const yValue = _yAxisLabels[i];\n        if (yValueToPoints[yValue]) {\n          result.push(...yValueToPoints[yValue].sort((a, b) => +a.x.start - +b.x.start));\n        }\n      }\n\n      return result;\n    }, [_points, _yAxisLabels]);\n\n    const _createBars = React.useCallback(\n      ({\n        xScale,\n        yScalePrimary: yScale,\n      }: {\n        xScale: DateScale | NumberScale;\n        yScalePrimary: NumberScale | StringScale;\n      }): JSXElement => {\n        const getGradientId = (legend: string | undefined) => {\n          const legendId = _legendMap.current[`${legend}`].id;\n          return `${legendId}_gradient`;\n        };\n\n        const gradientDefs: JSXElement[] = [];\n        if (props.enableGradient) {\n          Object.keys(_legendMap.current).forEach((legend: string, index: number) => {\n            const { startColor, endColor } = _legendMap.current[legend];\n            gradientDefs.push(\n              <linearGradient key={index} id={getGradientId(legend)}>\n                <stop offset=\"0\" stopColor={startColor} />\n                <stop offset=\"100%\" stopColor={endColor} />\n              </linearGradient>,\n            );\n          });\n        }\n\n        let scaleBandwidth = 0;\n        if (_yAxisType === YAxisType.StringAxis) {\n          scaleBandwidth = (yScale as StringScale).bandwidth();\n          _barHeight.current = _getBarHeight(scaleBandwidth);\n        }\n\n        const points = _getOrderedDataPoints();\n        const bars = points.map((point: GanttChartDataPoint, index: number) => {\n          const rectStartX = xScale(point.x.start);\n          const rectEndX = xScale(point.x.end);\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          const rectY = yScale(point.y as any)! + (scaleBandwidth - _barHeight.current) / 2;\n\n          const shouldHighlight = _noLegendHighlighted() || _legendHighlighted(point.legend);\n\n          return (\n            <rect\n              key={index}\n              x={Math.min(rectStartX, rectEndX)}\n              y={rectY}\n              width={Math.abs(rectEndX - rectStartX)}\n              height={_barHeight.current}\n              rx={props.roundCorners ? 3 : 0}\n              fill={props.enableGradient ? `url(#${getGradientId(point.legend)})` : point.color}\n              opacity={shouldHighlight ? 1 : 0.1}\n              onClick={point.onClick}\n              onMouseOver={(event: React.MouseEvent<SVGElement>) => _onBarHover(point, event)}\n              onMouseLeave={_onBarLeave}\n              onFocus={(event: React.FocusEvent<SVGElement>) => _onBarFocus(point, event)}\n              onBlur={_onBarLeave}\n              tabIndex={shouldHighlight ? 0 : -1}\n              role=\"img\"\n              aria-label={_getAriaLabel(point)}\n            />\n          );\n        });\n        return (\n          <g>\n            {gradientDefs.length > 0 ? <defs>{gradientDefs}</defs> : null}\n            {bars}\n          </g>\n        );\n      },\n      [\n        _getAriaLabel,\n        _getBarHeight,\n        _getOrderedDataPoints,\n        _legendHighlighted,\n        _noLegendHighlighted,\n        _onBarFocus,\n        _onBarHover,\n        _onBarLeave,\n        _yAxisType,\n        props.enableGradient,\n        props.roundCorners,\n      ],\n    );\n\n    const _onLegendHover = React.useCallback((legend: string): void => {\n      setHoveredLegend(legend);\n    }, []);\n\n    const _onLegendLeave = React.useCallback((): void => {\n      setHoveredLegend('');\n    }, []);\n\n    const _onLegendSelectionChange = React.useCallback(\n      (_selectedLegends: string[], event: React.MouseEvent<HTMLButtonElement>, currentLegend?: Legend): void => {\n        if (props.legendProps?.canSelectMultipleLegends) {\n          setSelectedLegends(_selectedLegends);\n        } else {\n          setSelectedLegends(_selectedLegends.slice(-1));\n        }\n        if (props.legendProps?.onChange) {\n          props.legendProps.onChange(_selectedLegends, event, currentLegend);\n        }\n      },\n      [props.legendProps],\n    );\n\n    const _getLegendData = React.useCallback((): JSXElement => {\n      const actions: Legend[] = [];\n\n      Object.keys(_legendMap.current).forEach((legendTitle: string) => {\n        const legend: Legend = {\n          title: legendTitle,\n          color: _legendMap.current[legendTitle].startColor,\n          hoverAction: () => {\n            _handleChartMouseLeave();\n            _onLegendHover(legendTitle);\n          },\n          onMouseOutAction: () => {\n            _onLegendLeave();\n          },\n        };\n\n        actions.push(legend);\n      });\n\n      const legends = (\n        <Legends\n          legends={actions}\n          enabledWrapLines={props.enabledLegendsWrapLines}\n          overflowText={props.legendsOverflowText}\n          onChange={_onLegendSelectionChange}\n          {...props.legendProps}\n          legendRef={_legendsRef}\n        />\n      );\n      return legends;\n    }, [\n      _handleChartMouseLeave,\n      _onLegendHover,\n      _onLegendLeave,\n      _onLegendSelectionChange,\n      props.enabledLegendsWrapLines,\n      props.legendProps,\n      props.legendsOverflowText,\n    ]);\n\n    const _getChartTitle = React.useCallback((): string => {\n      return (props.chartTitle ? `${props.chartTitle}. ` : '') + `Gantt chart with ${_points.length} data points. `;\n    }, [_points.length, props.chartTitle]);\n\n    const _isChartEmpty = React.useCallback((): boolean => {\n      return _points.length === 0;\n    }, [_points.length]);\n\n    const _getYDomainMargins = React.useCallback(\n      (containerHeight: number): Margins => {\n        let domainMargin = MIN_DOMAIN_MARGIN;\n\n        const ySet = new Set<string | number>();\n        _points.forEach((point: GanttChartDataPoint) => {\n          ySet.add(point.y);\n        });\n        const uniqueY = Array.from(ySet);\n\n        /** Total height available to render the bars */\n        const totalHeight =\n          containerHeight -\n          (_margins.current.top! + MIN_DOMAIN_MARGIN) -\n          (_margins.current.bottom! + MIN_DOMAIN_MARGIN);\n\n        if (_yAxisType !== YAxisType.StringAxis) {\n          _barHeight.current = _getBarHeight(\n            calculateAppropriateBarWidth(uniqueY as number[] | Date[], totalHeight, _yAxisPadding),\n          );\n          domainMargin += _barHeight.current / 2;\n        }\n\n        return {\n          ..._margins.current,\n          top: _margins.current.top! + domainMargin,\n          bottom: _margins.current.bottom! + domainMargin,\n        };\n      },\n      [_getBarHeight, _points, _yAxisPadding, _yAxisType],\n    );\n\n    function updatePosition(newX: number, newY: number) {\n      const threshold = 1; // Set a threshold for movement\n      const { x, y } = clickPosition;\n      // Calculate the distance moved\n      const distance = Math.sqrt(Math.pow(newX - x, 2) + Math.pow(newY - y, 2));\n      // Update the position only if the distance moved is greater than the threshold\n      if (distance > threshold) {\n        setClickPosition({ x: newX, y: newY });\n        setPopoverOpen(true);\n      }\n    }\n\n    if (!_isChartEmpty()) {\n      _barHeight.current = _getBarHeight(DEFAULT_BAR_HEIGHT);\n\n      const calloutProps: ChartPopoverProps = {\n        isPopoverOpen,\n        clickPosition,\n        color: calloutColor,\n        legend: calloutLegend,\n        XValue: xCalloutValue,\n        YValue: yCalloutValue,\n        ...props.calloutProps,\n      };\n      const tickParams: ModifiedCartesianChartProps['tickParams'] = {\n        tickValues: props.tickValues,\n        tickFormat: props.tickFormat,\n      };\n\n      return (\n        <CartesianChart\n          {...props}\n          yAxisPadding={_yAxisPadding}\n          chartTitle={_getChartTitle()}\n          points={_points}\n          chartType={ChartTypes.GanttChart}\n          xAxisType={_xAxisType}\n          yAxisType={_yAxisType}\n          componentRef={cartesianChartRef}\n          stringDatasetForYAxisDomain={_yAxisLabels}\n          calloutProps={calloutProps}\n          tickParams={tickParams}\n          legendBars={_getLegendData()}\n          createYAxis={createYAxisForHorizontalBarChartWithAxis}\n          getDomainNRangeValues={_getDomainNRangeValues}\n          createStringYAxis={createStringYAxisForHorizontalBarChartWithAxis}\n          getMinMaxOfYAxis={findHBCWANumericMinMaxOfY}\n          customizedCallout={_getCustomizedCallout()}\n          getmargins={_getMargins}\n          getYDomainMargins={_getYDomainMargins}\n          onChartMouseLeave={_handleChartMouseLeave}\n          useUTC={useUTC}\n          children={_createBars}\n        />\n      );\n    } else {\n      return (\n        <div id={_emptyChartId} role={'alert'} style={{ opacity: '0' }} aria-label={'Graph has no data to display'} />\n      );\n    }\n  },\n);\n\nGanttChart.displayName = 'GanttChart';\n"],"names":["React","max","d3Max","min","d3Min","useId","Legends","CartesianChart","ChartPopover","ChartTypes","YAxisType","XAxisTypes","getTypeOfAxis","getNextColor","findHBCWANumericMinMaxOfY","createYAxisForHorizontalBarChartWithAxis","createStringYAxisForHorizontalBarChartWithAxis","areArraysEqual","MIN_DOMAIN_MARGIN","sortAxisCategories","calculateAppropriateBarWidth","getColorFromToken","getScalePadding","getDateFormatLevel","useRtl","formatDateToLocaleString","getMultiLevelDateTimeFormatOptions","toImage","DEFAULT_BAR_HEIGHT","MIN_BAR_HEIGHT","GanttChart","forwardRef","useUTC","yAxisCategoryOrder","maxBarHeight","props","forwardedRef","_barHeight","useRef","_margins","_calloutAnchorPoint","_emptyChartId","_legendId","_legendMap","_prevProps","calloutColor","setCalloutColor","useState","hoveredLegend","setHoveredLegend","calloutLegend","setCalloutLegend","xCalloutValue","setXCalloutValue","yCalloutValue","setYCalloutValue","selectedLegends","setSelectedLegends","legendProps","calloutDataPoint","setCalloutDataPoint","clickPosition","setClickPosition","x","y","isPopoverOpen","setPopoverOpen","cartesianChartRef","_legendsRef","_isRTL","useEffect","current","useImperativeHandle","componentRef","chartContainer","opts","toSVG","_points","useMemo","colorIndex","data","map","point","legend","startColor","color","endColor","enableGradient","gradient","id","_xAxisType","length","start","DateAxis","_yAxisType","StringAxis","_yAxisPadding","yAxisPadding","undefined","_dateFormatOptions","lowestFormatLevel","highestFormatLevel","forEach","p","startFormatLevel","endFormatLevel","end","Math","_mapYValueToXValues","useCallback","yValueToXValues","push","_getOrderedYAxisLabels","Object","keys","sort","a","b","reverse","_yAxisLabels","_getDomainNRangeValues","points","margins","containerWidth","chartType","isRTL","xAxisType","barWidth","tickValues","shiftX","xValues","xMin","xMax","dStartValue","dEndValue","rStartValue","left","rEndValue","right","_getMargins","_getFormattedXValue","formattedStartX","formattedEndX","culture","toString","_getCustomizedCallout","defaultRender","XValue","yAxisCalloutData","YValue","xAxisCalloutData","onRenderCalloutPerDataPoint","_getAriaLabel","xValue","yValue","callOutAccessibilityData","ariaLabel","_getHighlightedLegend","_legendHighlighted","includes","_noLegendHighlighted","_showCallout","target","updatePosition","clientX","clientY","rect","getBoundingClientRect","top","_onBarFocus","focusEvent","_onBarHover","mouseEvent","_onBarLeave","_handleChartMouseLeave","_getBarHeight","adjustedValue","barHeight","_getOrderedDataPoints","result","yValueToPoints","i","_createBars","xScale","yScalePrimary","yScale","getGradientId","legendId","gradientDefs","index","linearGradient","key","stop","offset","stopColor","scaleBandwidth","bandwidth","bars","rectStartX","rectEndX","rectY","shouldHighlight","width","abs","height","rx","roundCorners","fill","opacity","onClick","onMouseOver","event","onMouseLeave","onFocus","onBlur","tabIndex","role","aria-label","g","defs","_onLegendHover","_onLegendLeave","_onLegendSelectionChange","_selectedLegends","currentLegend","canSelectMultipleLegends","slice","onChange","_getLegendData","actions","legendTitle","title","hoverAction","onMouseOutAction","legends","enabledWrapLines","enabledLegendsWrapLines","overflowText","legendsOverflowText","legendRef","_getChartTitle","chartTitle","_isChartEmpty","_getYDomainMargins","containerHeight","domainMargin","ySet","Set","add","uniqueY","Array","from","totalHeight","bottom","newX","newY","threshold","distance","sqrt","pow","calloutProps","tickParams","tickFormat","yAxisType","stringDatasetForYAxisDomain","legendBars","createYAxis","getDomainNRangeValues","createStringYAxis","getMinMaxOfYAxis","customizedCallout","getmargins","getYDomainMargins","onChartMouseLeave","children","div","style","displayName"],"mappings":"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"}