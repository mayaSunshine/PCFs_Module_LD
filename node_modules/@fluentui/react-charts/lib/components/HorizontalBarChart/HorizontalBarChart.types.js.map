{"version":3,"sources":["../src/components/HorizontalBarChart/HorizontalBarChart.types.ts"],"sourcesContent":["import * as React from 'react';\nimport type { JSXElement } from '@fluentui/react-utilities';\nimport { ChartPopoverProps } from '../CommonComponents/ChartPopover.types';\nimport { ChartDataPoint, ChartProps } from './index';\nimport { LegendsProps } from '../Legends/index';\n\n/**\n * Horizontal Bar Chart properties\n * {@docCategory HorizontalBarChart}\n */\nexport interface HorizontalBarChartProps extends React.RefAttributes<HTMLDivElement> {\n  /**\n   * An array of chart data points for the Horizontal bar chart\n   */\n  data?: ChartProps[];\n\n  /**\n   * Width of bar chart\n   */\n  width?: number;\n\n  /**\n   * Height of bar chart\n   * @default 15\n   */\n  barHeight?: number;\n\n  /**\n   * Additional CSS class(es) to apply to the StackedBarChart.\n   */\n  className?: string;\n\n  /**\n   * This property tells whether to show ratio on top of stacked bar chart or not.\n   */\n  hideRatio?: boolean[];\n\n  /**\n   * Do not show tooltips in chart\n   *\n   * @default false\n   */\n  hideTooltip?: boolean;\n\n  /**\n   * This property tells how to show data text on top right of bar chart.\n   * If barChartCustomData props added, then this props will be overrided.\n   * @default 'default'\n   */\n  chartDataMode?: ChartDataMode;\n\n  /**\n   * Call to provide customized styling that will layer on top of the variant rules.\n   */\n  styles?: HorizontalBarChartStyles;\n\n  /**\n   * Define a custom callout renderer for a horizontal bar\n   */\n  // onRenderCalloutPerHorizontalBar?: IRenderFunction<IChartDataPoint>; ToDo - Need to use slots here.\n\n  /**\n   * props for the callout in the chart\n   */\n  calloutProps?: ChartPopoverProps;\n\n  /**\n   * Custom text to the chart (right side of the chart)\n   * IChartProps will be available as props to the method prop.\n   * If this method not given, default values (IHorizontalDataPoint \\{x,y\\})\n   * will be used to display the data/text based on given chartModeData prop.\n   */\n  // barChartCustomData?: IRenderFunction<IChartProps>; ToDo - Need to use slots here.\n\n  /**\n   * The prop used to define the culture to localized the numbers\n   */\n  culture?: string;\n\n  /**\n   * Prop to define the variant of HorizontalBarChart to render\n   * @default HorizontalBarChartVariant.PartToWhole\n   */\n  variant?: HorizontalBarChartVariant;\n\n  /**\n   * Prop to hide the bar labels\n   * @default false\n   */\n  hideLabels?: boolean;\n\n  /**\n   * line color for callout\n   */\n  color?: string;\n\n  /**\n   * prop to check if benchmark data is provided\n   */\n  showTriangle?: boolean;\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  legendsOverflowText?: any;\n\n  /*\n   * props for the legends in the chart\n   */\n  legendProps?: Partial<LegendsProps>;\n\n  /**\n   * prop to render the custom callout\n   */\n  onRenderCalloutPerHorizontalBar?: (props: ChartDataPoint) => JSXElement | undefined;\n\n  /**\n   * Define a custom callout props override\n   */\n  calloutPropsPerDataPoint?: (dataPointCalloutProps: ChartDataPoint) => ChartPopoverProps;\n\n  /**\n   * When true, chart will display legends even if a bar ( row ) has only one data point.\n   * @default false\n   */\n  showLegendForSinglePointBar?: boolean;\n}\n\n/**\n * Horizontal Bar Chart styles\n * {@docCategory HorizontalBarChart}\n */\nexport interface HorizontalBarChartStyles {\n  /**\n   * Styling for the root container\n   */\n  root: string;\n\n  /**\n   * Styling for each item in the container\n   */\n  items: string;\n\n  /**\n   * Style for the chart.\n   */\n  chart: string;\n\n  /**\n   * Style for the chart Title.\n   */\n  chartTitle: string;\n\n  /**\n   * Style for the bars.\n   */\n  barWrapper: string;\n\n  /**\n   * Style for left side text of the chart title\n   */\n  chartTitleLeft: string;\n\n  /**\n   * Style for right side text of the chart title\n   */\n  chartTitleRight: string;\n\n  /**\n   * Style for the chart data text denominator.\n   */\n  chartDataTextDenominator: string;\n\n  /**\n   * Style for the benchmark container\n   */\n  benchmarkContainer: string;\n\n  /**\n   * Style for the benchmark triangle\n   */\n  triangle: string;\n\n  /**\n   * Style for the bar labels\n   */\n  barLabel: string;\n\n  /**\n   * Style for the div containing the chart\n   */\n  chartWrapper: string;\n\n  /**\n   * Style for the legend container.\n   */\n  legendContainer: string;\n}\n\n/**\n * Chart data mode for chart data text\n * default: show the datapoint.x value\n * fraction: show the fraction of datapoint.x/datapoint.y\n * percentage: show the percentage of (datapoint.x/datapoint.y)%\n * hidden: do not show any data text\n * {@docCategory HorizontalBarChart}\n */\nexport type ChartDataMode = 'default' | 'fraction' | 'percentage' | 'hidden';\n\n/**\n * {@docCategory HorizontalBarChart}\n */\nexport enum HorizontalBarChartVariant {\n  PartToWhole = 'part-to-whole',\n  AbsoluteScale = 'absolute-scale',\n}\n"],"names":["React","HorizontalBarChartVariant"],"mappings":"AAAA,YAAYA,WAAW,QAAQ;AA+M/B;;CAEC,GACD,OAAO,IAAA,AAAKC,mDAAAA;;;WAAAA;MAGX"}