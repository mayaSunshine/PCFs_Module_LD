{"version":3,"file":"formatter.js","sourceRoot":"../src/","sources":["packages/charts/chart-utilities/src/formatter.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * This function checks if the number is very close to an integer (within a small epsilon value).\n * If it is, it rounds the number to the nearest integer; otherwise, it returns the original number.\n * This is useful to avoid issues with floating point precision errors in calculations.\n * Refer 'https://docs.python.org/release/2.5.1/tut/node16.html' for more details.\n * @param num - The number to check for floating point precision error.\n * @returns The number after resolving floating point precision errors.\n */\nexport function handleFloatingPointPrecisionError(num: number): number {\n  const rounded = Math.round(num);\n  return Math.abs(num - rounded) < 1e-6 ? rounded : num;\n}\n\n/**\n * LocaleStringDataProps defines the type of data that can be formatted to a locale string.\n */\ntype LocaleStringDataProps = number | string | Date | undefined;\n\n/**\n * Formats a number, string, or date to a locale-specific string representation.\n * If the input is a number or a numeric string, it will be formatted with appropriate grouping.\n * If the input is a Date object, it will be formatted to a locale string based on the culture and UTC preference.\n * If the input is undefined, null, an empty string, or NaN, it will return the input as is.\n *\n * @param data - The data to format (number, string, Date, or undefined).\n * @param culture - Optional culture code for formatting (e.g., 'en-US').\n * @param useUtc - Optional flag to indicate if the date should be formatted in UTC.\n * @returns The formatted string or the original data if no formatting is applied.\n */\nexport const formatToLocaleString = (\n  data: LocaleStringDataProps,\n  culture?: string,\n  useUtc?: boolean | string,\n): LocaleStringDataProps => {\n  if (data === undefined || data === null || data === '' || Number.isNaN(data)) {\n    return data;\n  }\n  culture = culture || undefined;\n  if (typeof data === 'number') {\n    const toGroup = Math.abs(data) >= 10000;\n    return handleFloatingPointPrecisionError(data).toLocaleString(culture, { useGrouping: toGroup });\n  } else if (typeof data === 'string' && !window.isNaN(Number(data))) {\n    const num = Number(data);\n    const toGroup = Math.abs(num) >= 10000;\n    return handleFloatingPointPrecisionError(num).toLocaleString(culture, { useGrouping: toGroup });\n  } else if (data instanceof Date) {\n    return formatDateToLocaleString(data, culture, useUtc ? true : false);\n  }\n\n  return data;\n};\n\nconst DEFAULT_DATE_TIME_FORMAT_OPTION: Intl.DateTimeFormatOptions = {\n  // Locale date and time\n  year: 'numeric',\n  month: '2-digit',\n  day: '2-digit',\n  hour: '2-digit',\n  minute: '2-digit',\n  second: '2-digit',\n  hour12: true,\n};\n\n/**\n * Formats a Date object to a locale-specific string representation.\n * If the date is invalid, it returns an empty string.\n * If the culture is not provided, it defaults to the browser's locale.\n * If useUtc is true, it formats the date in UTC.\n * If showTZname is true, it includes the time zone name in the formatted string.\n *\n * @param date - The Date object to format.\n * @param culture - Optional culture code for formatting (e.g., 'en-US').\n * @param useUtc - Optional flag to indicate if the date should be formatted in UTC.\n * @param showTZname - Optional flag to include time zone name in the formatted string.\n * @param options - Optional Intl.DateTimeFormatOptions for additional formatting options.\n * @returns The formatted date string or an empty string if the date is invalid.\n */\nexport const formatDateToLocaleString = (\n  date: Date,\n  culture?: string,\n  useUtc?: boolean,\n  showTZname: boolean = true,\n  options?: Intl.DateTimeFormatOptions,\n): string => {\n  culture = culture || undefined;\n  options = options || DEFAULT_DATE_TIME_FORMAT_OPTION;\n  if (useUtc) {\n    options = { ...options, timeZone: 'UTC' };\n  }\n  if (showTZname) {\n    options = { ...options, timeZoneName: 'short' };\n  }\n\n  return date.toLocaleString(culture, options);\n};\n\n/**\n * This function returns a multilevel formatter for a given date range.\n * It determines the appropriate date format to accommodate each tick value.\n * The goal is to represent the date label in the smallest possible format without loss of information.\n * There is an exhaustive map of all possible date/time units and their respective formats.\n * Based on the range of formatting granularity levels, a date time format spanning the range is returned.\n * Refer https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat\n * to see explanation about each format specifier\n * @param startLevel - The starting level of the date format.\n * @param endLevel - The ending level of the date format.\n * @param useUTC - Optional flag to indicate if the date should be formatted in UTC.\n * @returns - An Intl.DateTimeFormatOptions object that can be used to format date/time values.\n */\nexport function getMultiLevelDateTimeFormatOptions(startLevel?: number, endLevel?: number): Intl.DateTimeFormatOptions {\n  const DEFAULT = DEFAULT_DATE_TIME_FORMAT_OPTION;\n  const MS: Intl.DateTimeFormatOptions = {\n    // Milliseconds only (Intl does not support ms directly)\n    second: '2-digit',\n  };\n\n  const MS_S: Intl.DateTimeFormatOptions = MS;\n  const MS_S_MIN: Intl.DateTimeFormatOptions = {\n    // Minutes, seconds, milliseconds\n    minute: '2-digit',\n    second: '2-digit',\n  };\n\n  const MS_S_MIN_H: Intl.DateTimeFormatOptions = {\n    // Hour (12), minute, second, ms, AM/PM\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit',\n    hour12: true,\n  };\n\n  const MS_S_MIN_H_D: Intl.DateTimeFormatOptions = {\n    // Abbreviated weekday, day, time\n    weekday: 'short',\n    day: '2-digit',\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit',\n  };\n\n  const MS_S_MIN_H_D_W: Intl.DateTimeFormatOptions = {\n    // Abbreviated month, day, time\n    month: 'short',\n    day: '2-digit',\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit',\n  };\n\n  const MS_S_MIN_H_D_W_M: Intl.DateTimeFormatOptions = MS_S_MIN_H_D_W;\n  const MS_S_MIN_H_D_W_M_Y: Intl.DateTimeFormatOptions = DEFAULT;\n  const S: Intl.DateTimeFormatOptions = MS_S;\n  const S_MIN: Intl.DateTimeFormatOptions = MS_S_MIN;\n  const S_MIN_H: Intl.DateTimeFormatOptions = MS_S_MIN_H;\n  const S_MIN_H_D: Intl.DateTimeFormatOptions = MS_S_MIN_H_D;\n  const S_MIN_H_D_W: Intl.DateTimeFormatOptions = MS_S_MIN_H_D_W;\n  const S_MIN_H_D_W_M: Intl.DateTimeFormatOptions = MS_S_MIN_H_D_W_M;\n  const S_MIN_H_D_W_M_Y: Intl.DateTimeFormatOptions = DEFAULT;\n\n  const MIN: Intl.DateTimeFormatOptions = {\n    // Hour (12), minute, AM/PM\n    hour: '2-digit',\n    minute: '2-digit',\n    hour12: true,\n  };\n\n  const MIN_H: Intl.DateTimeFormatOptions = MIN;\n  const MIN_H_D: Intl.DateTimeFormatOptions = {\n    // Abbreviated weekday, day, hour (12), minute, AM/PM\n    weekday: 'short',\n    day: '2-digit',\n    hour: '2-digit',\n    minute: '2-digit',\n    hour12: true,\n  };\n\n  const MIN_H_D_W: Intl.DateTimeFormatOptions = {\n    // Abbreviated month, day, hour (12), minute, AM/PM\n    month: 'short',\n    day: '2-digit',\n    hour: '2-digit',\n    minute: '2-digit',\n    hour12: true,\n  };\n\n  const MIN_H_D_W_M: Intl.DateTimeFormatOptions = MIN_H_D_W;\n  const MIN_H_D_W_M_Y: Intl.DateTimeFormatOptions = {\n    // Locale date, hour (12), minute, AM/PM\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n    hour: '2-digit',\n    minute: '2-digit',\n    hour12: true,\n  };\n\n  const H: Intl.DateTimeFormatOptions = {\n    // Hour (12), AM/PM\n    hour: '2-digit',\n    hour12: true,\n  };\n\n  const H_D: Intl.DateTimeFormatOptions = {\n    // Abbreviated weekday, day, hour (12), AM/PM\n    weekday: 'short',\n    day: '2-digit',\n    hour: '2-digit',\n    hour12: true,\n  };\n\n  const H_D_W: Intl.DateTimeFormatOptions = {\n    // Abbreviated month, day, hour (12), AM/PM\n    month: 'short',\n    day: '2-digit',\n    hour: '2-digit',\n    hour12: true,\n  };\n\n  const H_D_W_M: Intl.DateTimeFormatOptions = H_D_W;\n  const H_D_W_M_Y: Intl.DateTimeFormatOptions = {\n    // Locale date, hour (12), AM/PM\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n    hour: '2-digit',\n    hour12: true,\n  };\n\n  const D: Intl.DateTimeFormatOptions = {\n    // Abbreviated weekday, day\n    weekday: 'short',\n    day: '2-digit',\n  };\n\n  const D_W: Intl.DateTimeFormatOptions = {\n    // Abbreviated month, day\n    month: 'short',\n    day: '2-digit',\n  };\n\n  const D_W_M: Intl.DateTimeFormatOptions = D_W;\n  const D_W_M_Y: Intl.DateTimeFormatOptions = {\n    // Locale date\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n  };\n\n  const W: Intl.DateTimeFormatOptions = D_W;\n  const W_M: Intl.DateTimeFormatOptions = W;\n  const W_M_Y: Intl.DateTimeFormatOptions = D_W_M_Y;\n  const M: Intl.DateTimeFormatOptions = {\n    // Full month name\n    month: 'long',\n  };\n\n  const M_Y: Intl.DateTimeFormatOptions = {\n    // Abbreviated month, year\n    month: 'short',\n    year: 'numeric',\n  };\n\n  const Y: Intl.DateTimeFormatOptions = {\n    // Year\n    year: 'numeric',\n  };\n\n  const MULTI_LEVEL_DATE_TIME_FORMATS = [\n    // ms, s, min, h, d, w, m, y\n    [MS, MS_S, MS_S_MIN, MS_S_MIN_H, MS_S_MIN_H_D, MS_S_MIN_H_D_W, MS_S_MIN_H_D_W_M, MS_S_MIN_H_D_W_M_Y], // ms\n    [DEFAULT, S, S_MIN, S_MIN_H, S_MIN_H_D, S_MIN_H_D_W, S_MIN_H_D_W_M, S_MIN_H_D_W_M_Y], // s\n    [DEFAULT, DEFAULT, MIN, MIN_H, MIN_H_D, MIN_H_D_W, MIN_H_D_W_M, MIN_H_D_W_M_Y], // min\n    [DEFAULT, DEFAULT, DEFAULT, H, H_D, H_D_W, H_D_W_M, H_D_W_M_Y], // h\n    [DEFAULT, DEFAULT, DEFAULT, DEFAULT, D, D_W, D_W_M, D_W_M_Y], // d\n    [DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, W, W_M, W_M_Y], // w\n    [DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, M, M_Y], // m\n    [DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, DEFAULT, Y], // y\n  ];\n\n  if (startLevel === undefined || startLevel < 0 || startLevel >= MULTI_LEVEL_DATE_TIME_FORMATS.length) {\n    return DEFAULT;\n  }\n\n  if (endLevel === undefined || endLevel < startLevel) {\n    return MULTI_LEVEL_DATE_TIME_FORMATS[startLevel][startLevel];\n  }\n\n  if (endLevel >= MULTI_LEVEL_DATE_TIME_FORMATS[startLevel].length) {\n    return MULTI_LEVEL_DATE_TIME_FORMATS[startLevel][MULTI_LEVEL_DATE_TIME_FORMATS[startLevel].length - 1];\n  }\n\n  return MULTI_LEVEL_DATE_TIME_FORMATS[startLevel][endLevel];\n}\n"]}