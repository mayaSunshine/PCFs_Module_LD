{"version":3,"file":"DecodeBase64Data.js","sourceRoot":"../src/","sources":["packages/charts/chart-utilities/src/DecodeBase64Data.ts"],"names":[],"mappings":"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","sourcesContent":["import { PlotlySchema } from './PlotlySchema';\nimport { isArrayOrTypedArray } from './PlotlySchemaConverter';\n\nfunction addBase64Padding(s: string): string {\n  const paddingNeeded = (4 - (s.length % 4)) % 4;\n  return s + '='.repeat(paddingNeeded);\n}\n// Function to check if a string is base64-encoded\nfunction isBase64(s: string): boolean {\n  if (typeof s !== 'string') {\n    return false;\n  }\n\n  // Base64 strings must have a length that is a multiple of 4\n  if (s.length % 4 !== 0) {\n    s = addBase64Padding(s);\n  }\n\n  // Use a regular expression to check if the string contains only valid base64 characters\n  const base64Regex = /^[A-Za-z0-9+/]+={0,2}$/;\n  if (!base64Regex.test(s)) {\n    return false;\n  }\n\n  try {\n    decodeBase64FromString(s);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nfunction decodeBase64FromString(base64String: string): Uint8Array {\n  if (typeof window !== 'undefined' && typeof atob === 'function') {\n    // For browsers\n    const binaryString = atob(base64String);\n    const binaryLength = binaryString.length;\n    const bytes = new Uint8Array(binaryLength);\n    for (let i = 0; i < binaryLength; i++) {\n      bytes[i] = binaryString.charCodeAt(i);\n    }\n    return bytes;\n  }\n  throw new Error('Base64 decoding is not supported in this environment.');\n}\n\n// Helper function to decode base64-encoded data based on dtype\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction decodeBase64(value: string, dtype: string): any {\n  // Add padding if necessary\n  value = addBase64Padding(value);\n\n  try {\n    const decodedBytes = decodeBase64FromString(value);\n    switch (dtype) {\n      case 'f8':\n        return Array.from(new Float64Array(decodedBytes.buffer));\n      case 'i8':\n        return Array.from(new Int32Array(decodedBytes.buffer)); // BigInt64Array is supported ES2020 onwards\n      case 'u8':\n        return Array.from(new Uint32Array(decodedBytes.buffer));\n      case 'i4':\n        return Array.from(new Int32Array(decodedBytes.buffer));\n      case 'i2':\n        return Array.from(new Int16Array(decodedBytes.buffer));\n      case 'i1':\n        return Array.from(new Int8Array(decodedBytes.buffer));\n      default:\n        try {\n          return decodedBytes.toString();\n        } catch (error) {\n          return decodedBytes;\n        }\n    }\n  } catch (error) {\n    throw new Error(`Failed to decode base64 value: ${value}`);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction decodeBdataInDict(d: any): void {\n  for (const [key, value] of Object.entries(d)) {\n    if (typeof value === 'object' && !Array.isArray(value) && value !== null) {\n      decodeBdataInDict(value); // Recursively process nested objects\n    } else if (key === 'bdata' && typeof value === 'string' && isBase64(value)) {\n      const dtype = d.dtype || 'utf-8'; // Get dtype or default to 'utf-8'\n      d[key] = decodeBase64(value, dtype); // Decode the base64-encoded value\n    } else if (Array.isArray(value)) {\n      for (let i = 0; i < value.length; i++) {\n        if (typeof value[i] === 'object' && value[i] !== null) {\n          decodeBdataInDict(value[i]); // Recursively process objects in arrays\n        }\n      }\n    }\n  }\n}\n\n// Helper to reshape a flat array into the given shape (e.g., [rows, cols])\nexport function reshapeArray(data: number[], shape: number[]): number[] | number[][] | number[][][] {\n  if (shape.length === 1) {\n    return data;\n  }\n  if (shape.length === 2) {\n    const [rows, cols] = shape;\n    const result: number[][] = [];\n    for (let r = 0; r < rows; r++) {\n      result.push(data.slice(r * cols, (r + 1) * cols));\n    }\n    return result;\n  }\n  // For higher dimensions, recursively reshape\n  const [dim, ...rest] = shape;\n  const step = data.length / dim;\n  const result: number[][][] = [];\n  for (let i = 0; i < dim; i++) {\n    result.push(reshapeArray(data.slice(i * step, (i + 1) * step), rest) as number[][]);\n  }\n  return result;\n}\n\n// Function to process a PlotlySchema object\nexport function decodeBase64Fields(plotlySchema: PlotlySchema): PlotlySchema {\n  // Create a deep copy of the original data\n  const originalData = JSON.parse(JSON.stringify(plotlySchema.data));\n\n  // Decode base64-encoded 'bdata' in the JSON data\n  decodeBdataInDict(plotlySchema.data);\n\n  // Check if the data has changed\n  if (JSON.stringify(plotlySchema.data) !== JSON.stringify(originalData)) {\n    // Overwrite the 'y', 'x', or 'z' value with the decoded 'bdata'\n    for (const item of plotlySchema.data || []) {\n      ['y', 'x', 'z', 'r', 'theta', 'values'].forEach(key => {\n        if (\n          item[key as keyof typeof item] &&\n          typeof item[key as keyof typeof item] === 'object' &&\n          'bdata' in (item[key as keyof typeof item] as Record<string, number[]>)\n        ) {\n          const bdata = (item[key as keyof typeof item] as { bdata: number[] }).bdata;\n          let shape = (item[key as keyof typeof item] as { shape?: string | number[] }).shape;\n          // convert to an array if shape is a string\n          if (typeof shape === 'string') {\n            let parsedShape: number[] | undefined = undefined;\n            try {\n              // Try to parse as JSON array\n              parsedShape = JSON.parse(shape);\n              if (!isArrayOrTypedArray(parsedShape)) {\n                parsedShape = undefined;\n              }\n            } catch (error) {\n              // If JSON.parse fails, try to parse as comma-separated numbers\n              const parts = shape.split(',').map(s => Number(s.trim()));\n              if (parts.every(n => !isNaN(n))) {\n                parsedShape = parts;\n              } else {\n                shape = undefined; // If parsing fails, set shape to undefined\n              }\n            }\n            shape = parsedShape;\n          }\n          // If shape exists, decode bdata into that shape\n          if (shape !== undefined && isArrayOrTypedArray(shape)) {\n            (item[key as keyof typeof item] as number[] | number[][] | number[][][]) = reshapeArray(\n              bdata,\n              shape as number[],\n            );\n          } else {\n            (item[key as keyof typeof item] as number[]) = bdata as number[];\n          }\n        }\n      });\n    }\n\n    return plotlySchema; // Return the decoded data\n  }\n\n  plotlySchema.data = originalData; // Restore the original data if no changes were made\n  return plotlySchema; // Return the original data if no changes were made\n}\n"]}