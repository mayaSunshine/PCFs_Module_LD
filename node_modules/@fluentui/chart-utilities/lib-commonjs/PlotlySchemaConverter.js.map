{"version":3,"file":"PlotlySchemaConverter.js","sourceRoot":"../src/","sources":["packages/charts/chart-utilities/src/PlotlySchemaConverter.ts"],"names":[],"mappings":"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","sourcesContent":["import type { Datum, TypedArray, PlotData, PlotlySchema, Data, Layout, SankeyData } from './PlotlySchema';\nimport { decodeBase64Fields } from './DecodeBase64Data';\n\nexport type FluentChart =\n  | 'area'\n  | 'composite'\n  | 'donut'\n  | 'fallback'\n  | 'gauge'\n  | 'groupedverticalbar'\n  | 'heatmap'\n  | 'horizontalbar'\n  | 'line'\n  | 'scatter'\n  | 'scatterpolar'\n  | 'sankey'\n  | 'table'\n  | 'verticalstackedbar'\n  | 'gantt';\n\nexport type TraceInfo = {\n  index: number;\n  type: FluentChart;\n};\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface OutputChartType {\n  isValid: boolean;\n  errorMessage?: string;\n  type?: string;\n  /**\n   * Array of [index, chartType] pairs\n   */\n  validTracesInfo?: TraceInfo[];\n}\n\nconst UNSUPPORTED_MSG_PREFIX = 'Unsupported chart - type :';\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nexport const isNumber = (value: any): boolean => !isNaN(parseFloat(value)) && isFinite(value);\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nexport const isDate = (value: any): boolean => {\n  // Don't consider number as date. There is no way to differentiate milliseconds from date and number\n  // without additional context.\n  if (isNumber(value)) {\n    return false;\n  }\n\n  const parsedDate = new Date(Date.parse(value));\n  if (isNaN(parsedDate.getTime())) {\n    return false;\n  }\n  const parsedYear = parsedDate.getFullYear();\n  const yearInString = /\\b\\d{4}\\b/.test(value);\n  if (!yearInString && (parsedYear === 2000 || parsedYear === 2001)) {\n    return false;\n  }\n  return true;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const isMonth = (possiblyMonthValue: any): boolean => {\n  if (typeof possiblyMonthValue !== 'string') {\n    return false;\n  }\n\n  // Try to parse as a month name using system locale and then 'en-US'\n  const testDate = new Date(`${possiblyMonthValue} 1, 2000`);\n  if (isNaN(testDate.getTime())) {\n    return false;\n  }\n\n  // Get month names for both locales\n  const locales = [undefined, 'en-US'];\n  for (const locale of locales) {\n    // Full month name\n    const fullMonth = testDate.toLocaleString(locale, { month: 'long' });\n    // Short month name\n    const shortMonth = testDate.toLocaleString(locale, { month: 'short' });\n\n    if (\n      possiblyMonthValue.toLowerCase() === fullMonth.toLowerCase() ||\n      possiblyMonthValue.toLowerCase() === shortMonth.toLowerCase()\n    ) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconst isYear = (input: string | number | Date | null): boolean => {\n  if (isNumber(input)) {\n    const possibleYear = typeof input === 'string' ? parseFloat(input) : Number(input);\n    return Number.isInteger(possibleYear) && possibleYear >= 1900 && possibleYear <= 2100;\n  }\n  return false;\n};\n\nexport const isArrayOfType = (\n  plotCoordinates: Datum[] | Datum[][] | TypedArray | undefined,\n  typeCheck: (datum: any, ...args: any[]) => boolean,\n  ...args: any[]\n): boolean => {\n  if (!isArrayOrTypedArray(plotCoordinates)) {\n    return false;\n  }\n\n  if (plotCoordinates!.length === 0) {\n    return false;\n  }\n\n  if (Array.isArray(plotCoordinates![0])) {\n    // Handle 2D array\n    return (plotCoordinates as Datum[][]).every(innerArray => innerArray.every(datum => typeCheck(datum, ...args)));\n  } else {\n    // Handle 1D array\n    return (plotCoordinates as Datum[]).every(datum => typeCheck(datum, ...args));\n  }\n};\n\nexport const isDateArray = (data: Datum[] | Datum[][] | TypedArray | undefined): boolean => {\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  return isArrayOfType(data, (value: any): boolean => isDate(value) || value === null);\n};\n\nexport const isNumberArray = (data: Datum[] | Datum[][] | TypedArray | undefined): boolean => {\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  return isArrayOfType(\n    data,\n    (value: any): boolean =>\n      (typeof value === 'string' && isNumber(value)) || typeof value === 'number' || value === null,\n  );\n};\n\nexport const isMonthArray = (data: Datum[] | Datum[][] | TypedArray | undefined): boolean => {\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  return isArrayOfType(data, (value: any): boolean => isMonth(value) || value === null);\n};\n\nexport const isYearArray = (data: Datum[] | Datum[][] | TypedArray | undefined): boolean => {\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  return isArrayOfType(data, (value: any): boolean => isYear(value) || value === null);\n};\n\nexport const isStringArray = (data: Datum[] | Datum[][] | TypedArray | undefined): boolean => {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return isArrayOfType(data, (value: any): boolean => typeof value === 'string' || value === null);\n};\n\nexport const isObjectArray = (data: Datum[] | Datum[][] | TypedArray | undefined): boolean => {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return isArrayOfType(\n    data,\n    (value: any): boolean => typeof value === 'object' && value !== null && !isArrayOrTypedArray(value),\n  );\n};\n\nexport const validate2Dseries = (series: Partial<PlotData>): boolean => {\n  if (Array.isArray(series.x) && series.x.length > 0 && Array.isArray(series.x[0])) {\n    return false;\n  }\n  if (Array.isArray(series.y) && series.y.length > 0 && Array.isArray(series.y[0])) {\n    return false;\n  }\n\n  return true;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const isInvalidValue = (value: any): boolean => {\n  return typeof value === 'undefined' || value === null || (typeof value === 'number' && !isFinite(value));\n};\n\nconst MAX_DEPTH = 15;\nexport const sanitizeJson = (jsonObject: any, depth: number = 0): any => {\n  if (depth > MAX_DEPTH) {\n    throw new Error('Maximum json depth exceeded');\n  }\n\n  if (typeof jsonObject === 'object' && jsonObject !== null) {\n    for (const key in jsonObject) {\n      if (jsonObject.hasOwnProperty(key)) {\n        if (typeof jsonObject[key] === 'string') {\n          jsonObject[key] = jsonObject[key].replace(/</g, '&lt;').replace(/>/g, '&gt;');\n        } else {\n          jsonObject[key] = sanitizeJson(jsonObject[key], depth + 1);\n        }\n      }\n    }\n  }\n\n  return jsonObject;\n};\n\nexport function isTypedArray(a: any): boolean {\n  return ArrayBuffer.isView(a) && !(a instanceof DataView);\n}\n\nexport function isArrayOrTypedArray(a: any): boolean {\n  return Array.isArray(a) || isTypedArray(a);\n}\n\nexport const getValidSchema = (input: any): PlotlySchema => {\n  try {\n    const validatedSchema = input as PlotlySchema;\n    if (!validatedSchema) {\n      throw new Error('Plotly input is null or undefined');\n    }\n    if (typeof validatedSchema !== 'object') {\n      throw new Error(`Plotly input is not an object. Input type: ${typeof validatedSchema}`);\n    }\n    if (!isArrayOrTypedArray(validatedSchema.data)) {\n      throw new Error('Plotly input data is not a valid array or typed array');\n    }\n    if (validatedSchema.data.length === 0) {\n      throw new Error('Plotly input data is empty');\n    }\n    return validatedSchema;\n  } catch (error) {\n    throw new Error(`Invalid plotly schema: ${error}`);\n  }\n};\n\nconst validateSeriesData = (series: Partial<PlotData>, validateNumericY: boolean) => {\n  if (!validate2Dseries(series)) {\n    throw new Error(`Invalid 2D series encountered.`);\n  }\n  if (validateNumericY && !isNumberArray(series.y)) {\n    throw new Error(`Non numeric Y values encountered.`);\n  }\n};\n\nconst validateBarData = (data: Partial<PlotData>) => {\n  const isXEmpty = data.x && isArrayOrTypedArray(data.x) && data.x.length === 0;\n  const isYEmpty = data.y && isArrayOrTypedArray(data.y) && data.y.length === 0;\n  if (isXEmpty || isYEmpty) {\n    let emptyMsg = 'Bar chart: ';\n    if (isXEmpty && isYEmpty) {\n      emptyMsg += 'both x and y arrays are empty.';\n    } else if (isXEmpty) {\n      emptyMsg += 'x array is empty.';\n    } else if (isYEmpty) {\n      emptyMsg += 'y array is empty.';\n    }\n    throw new Error(emptyMsg);\n  }\n  if (data.orientation === 'h') {\n    if (!isNumberArray(data.x) && !isDateArray(data.x)) {\n      throw new Error(\n        `${UNSUPPORTED_MSG_PREFIX} ${data.type}, orientation: ${data.orientation}, string x values not supported.`,\n      );\n    }\n    if (!canMapToGantt(data) && isDateArray(data.x)) {\n      throw new Error(\n        `${UNSUPPORTED_MSG_PREFIX} ${data.type}, orientation: ${data.orientation}` +\n          `, date x values not supported in HBWA.`,\n      );\n    }\n    validateSeriesData(data, false);\n  } else {\n    if (!isNumberArray(data.y) && !isStringArray(data.y) && !isObjectArray(data.y)) {\n      throw new Error(`Non numeric, string, or object Y values encountered, type: ${typeof data.y}`);\n    }\n  }\n};\nconst isScatterMarkers = (mode: string): boolean => {\n  return ['markers', 'text+markers', 'markers+text', 'text'].includes(mode);\n};\n\nconst validateScatterData = (data: Partial<PlotData>, layout: Partial<Layout> | undefined) => {\n  const mode = data.mode ?? '';\n  const xAxisType = data && data.x && data.x.length > 0 ? typeof data?.x?.[0] : 'undefined';\n  const yAxisType = data && data.y && data.y.length > 0 ? typeof data?.y?.[0] : 'undefined';\n  if (isScatterMarkers(mode)) {\n    // Any series having only markers -> Supported number x/string x/date x + number y or string y\n    if (!isNumberArray(data.x) && !isStringArray(data.x) && !isDateArray(data.x)) {\n      throw new Error(`${UNSUPPORTED_MSG_PREFIX} ${data.type}, mode: ${mode}, xAxisType: ${xAxisType}`);\n    }\n    if (!isNumberArray(data.y) && !isStringArray(data.y)) {\n      throw new Error(`${UNSUPPORTED_MSG_PREFIX} ${data.type}, mode: ${mode}, yAxisType: ${yAxisType}`);\n    }\n  } else if (\n    [\n      'lines+markers',\n      'markers+lines',\n      'text+lines+markers',\n      'lines',\n      'text+lines',\n      'lines+text',\n      'lines+markers+text',\n    ].includes(mode)\n  ) {\n    if (!isNumberArray(data.x) && !isStringArray(data.x) && !isDateArray(data.x)) {\n      throw new Error(`${UNSUPPORTED_MSG_PREFIX} ${data.type}, mode: ${mode}, xAxisType: ${xAxisType}`);\n    }\n    if (!isNumberArray(data.y) && !isStringArray(data.y)) {\n      throw new Error(`${UNSUPPORTED_MSG_PREFIX} ${data.type}, mode: ${mode}, yAxisType: ${yAxisType}`);\n    }\n  } else {\n    throw new Error(`${UNSUPPORTED_MSG_PREFIX} ${data.type}, mode: ${mode}, Unsupported mode`);\n  }\n\n  const isAreaChart = isScatterAreaChart(data);\n  const isFallbackNeeded = doesScatterNeedFallback(data, layout);\n  if (isAreaChart && isFallbackNeeded) {\n    throw new Error(\n      `${UNSUPPORTED_MSG_PREFIX} ${data.type}, Fallback to VerticalStackedBarChart is not allowed for Area Charts.`,\n    );\n  }\n  if (isAreaChart && invalidateLogAxisType(data, layout)) {\n    throw new Error(`${UNSUPPORTED_MSG_PREFIX} ${data.type}, log axis type not supported for AreaChart.`);\n  }\n  if (isFallbackNeeded && invalidateLogAxisType(data, layout)) {\n    throw new Error(`${UNSUPPORTED_MSG_PREFIX} ${data.type}, log axis type not supported for VSBC fallback.`);\n  }\n};\n\nconst invalidateLogAxisType = (data: Partial<PlotData>, layout: Partial<Layout> | undefined) => {\n  const axisIds = getAxisIds(data) as Record<string, number>;\n  return Object.keys(axisIds).some(axLetter => {\n    const axisKey = getAxisKey(axLetter as 'x' | 'y', axisIds[axLetter]);\n    return layout?.[axisKey]?.type === 'log';\n  });\n};\n\n/**\n * Detects cycles in Sankey chart data.\n * @param nodes Array of node labels.\n * @param links Array of links with source and target as node indices.\n * @returns true if a cycle is found.\n */\nfunction findSankeyCycles(input: Partial<SankeyData>): boolean {\n  const graph: Record<number, number[]> = {};\n  input.node?.label?.forEach((_, idx) => (graph[idx] = []));\n  input.link?.value?.forEach((val, idx) => {\n    if (\n      !(isInvalidValue(val) || isInvalidValue(input.link?.source?.[idx]) || isInvalidValue(input.link?.target?.[idx]))\n    ) {\n      graph[input.link!.source![idx]].push(input.link!.target![idx]);\n    }\n  });\n\n  const visited = new Set<number>();\n  const stack = new Set<number>();\n\n  function dfs(node: number, path: number[]) {\n    if (isInvalidValue(node) || !graph[node]) {\n      // Invalid node or no edges, return\n      return false;\n    }\n    if (stack.has(node)) {\n      // Cycle detected, return\n      return true;\n    }\n    if (visited.has(node)) {\n      return;\n    }\n\n    visited.add(node);\n    stack.add(node);\n    for (const neighbor of graph[node]) {\n      const cycleDetected = dfs(neighbor, [...path, neighbor]);\n      if (cycleDetected) {\n        return true; // Cycle found in the path\n      }\n    }\n    stack.delete(node);\n    return false; // No cycle found in this path\n  }\n\n  for (let i = 0; i < Object.keys(graph).length; i++) {\n    const cycleFound = dfs(i, [i]);\n    if (cycleFound) {\n      return true; // Cycle found\n    }\n  }\n\n  return false; // No cycles found\n}\n\nconst DATA_VALIDATORS_MAP: Record<string, ((data: Data, layout: Partial<Layout> | undefined) => void)[]> = {\n  indicator: [\n    data => {\n      if (!(data as Partial<PlotData>).mode?.includes('gauge')) {\n        throw new Error(`${UNSUPPORTED_MSG_PREFIX} ${data.type}, mode: ${(data as Partial<PlotData>).mode}`);\n      }\n    },\n  ],\n  histogram: [\n    (data, layout) => {\n      if (invalidateLogAxisType(data as Partial<PlotData>, layout)) {\n        throw new Error(`${UNSUPPORTED_MSG_PREFIX} ${data.type}, log axis type not supported.`);\n      }\n    },\n    data => validateSeriesData(data as Partial<PlotData>, false),\n  ],\n  bar: [\n    (data, layout) => {\n      if (invalidateLogAxisType(data as Partial<PlotData>, layout)) {\n        throw new Error(`${UNSUPPORTED_MSG_PREFIX} ${data.type}, log axis type not supported.`);\n      }\n    },\n    data => {\n      validateBarData(data as Partial<PlotData>);\n    },\n  ],\n  sankey: [\n    data => {\n      if (findSankeyCycles(data as Partial<SankeyData>)) {\n        throw new Error(`${UNSUPPORTED_MSG_PREFIX} ${data.type}, Cycles in Sankey chart not supported`);\n      }\n    },\n  ],\n  scatter: [(data, layout) => validateScatterData(data as Partial<PlotData>, layout)],\n  scattergl: [(data, layout) => validateScatterData(data as Partial<PlotData>, layout)],\n  scatterpolar: [\n    data => {\n      if (!isNumberArray((data as Partial<PlotData>).theta) && !isStringArray((data as Partial<PlotData>).theta)) {\n        throw new Error(`${UNSUPPORTED_MSG_PREFIX} ${data.type}, theta values must be array of numbers or strings`);\n      }\n      if (!isNumberArray((data as Partial<PlotData>).r)) {\n        throw new Error(`${UNSUPPORTED_MSG_PREFIX} ${data.type}, Non numeric r values`);\n      }\n    },\n  ],\n  funnel: [data => validateSeriesData(data as Partial<PlotData>, false)],\n  histogram2d: [\n    (data, layout) => {\n      if (invalidateLogAxisType(data as Partial<PlotData>, layout)) {\n        throw new Error(`${UNSUPPORTED_MSG_PREFIX} ${data.type}, log axis type not supported.`);\n      }\n    },\n  ],\n  heatmap: [\n    (data, layout) => {\n      if (invalidateLogAxisType(data as Partial<PlotData>, layout)) {\n        throw new Error(`${UNSUPPORTED_MSG_PREFIX} ${data.type}, log axis type not supported.`);\n      }\n    },\n  ],\n};\n\nconst DEFAULT_CHART_TYPE = '';\nconst getValidTraces = (dataArr: Data[], layout: Partial<Layout> | undefined) => {\n  const errorMessages: string[] = [];\n  const validTraces = dataArr\n    .map((data, index): [number, string] => {\n      const type = data.type;\n\n      if (type && DATA_VALIDATORS_MAP[type]) {\n        const validators = DATA_VALIDATORS_MAP[type];\n        for (const validator of validators) {\n          try {\n            validator(data, layout);\n          } catch (error) {\n            errorMessages.push(`data[${index}] - type: ${data.type}, ${error}`);\n            return [-1, DEFAULT_CHART_TYPE];\n          }\n        }\n      }\n\n      return [index, type ?? DEFAULT_CHART_TYPE];\n    })\n    .filter(trace => trace[0] >= 0);\n\n  if (validTraces.length === 0) {\n    throw new Error(errorMessages.join('; '));\n  }\n\n  return validTraces;\n};\n\nexport const mapFluentChart = (input: any): OutputChartType => {\n  try {\n    sanitizeJson(input);\n  } catch (error) {\n    return { isValid: false, errorMessage: `Invalid JSON: ${error}` };\n  }\n\n  try {\n    let validSchema: PlotlySchema = getValidSchema(input);\n\n    try {\n      validSchema = decodeBase64Fields(validSchema);\n    } catch (error) {\n      return { isValid: false, errorMessage: `Failed to decode plotly schema: ${error}` };\n    }\n\n    const validTraces = getValidTraces(validSchema.data, validSchema.layout);\n    let mappedTraces = validTraces.map(trace => {\n      const traceIndex = trace[0];\n      const traceData = validSchema.data[traceIndex];\n\n      switch (traceData.type) {\n        case 'pie':\n          return { isValid: true, traceIndex, type: 'donut' };\n        case 'histogram2d':\n        case 'heatmap':\n          return { isValid: true, traceIndex, type: 'heatmap' };\n        case 'sankey':\n          return { isValid: true, traceIndex, type: 'sankey' };\n        case 'indicator':\n        case 'gauge':\n          return { isValid: true, traceIndex, type: 'gauge' };\n        case 'histogram':\n          return { isValid: true, traceIndex, type: 'verticalbar' };\n        case 'scatterpolar':\n          return { isValid: true, traceIndex, type: 'scatterpolar' };\n        case 'table':\n          return { isValid: true, traceIndex, type: 'table' };\n        case 'bar':\n          const barData = traceData as Partial<PlotData>;\n          if (barData.orientation === 'h') {\n            if (canMapToGantt(barData)) {\n              return { isValid: true, traceIndex, type: 'gantt' };\n            }\n            return { isValid: true, traceIndex, type: 'horizontalbar' };\n          } else {\n            // Handle object arrays in y values by setting barmode to group and routing to GVBC\n            if (isObjectArray(barData.y)) {\n              return { isValid: true, traceIndex, type: 'groupedverticalbar' };\n            }\n\n            if (['group', 'overlay'].includes(validSchema?.layout?.barmode!)) {\n              if (!isNumberArray(barData.y)) {\n                return { isValid: false, errorMessage: 'GVBC does not support string y-axis.' };\n              }\n              return { isValid: true, traceIndex, type: 'groupedverticalbar' };\n            }\n            return { isValid: true, traceIndex, type: 'verticalstackedbar' };\n          }\n        case 'funnel':\n        case 'funnelarea':\n          return { isValid: true, traceIndex, type: 'funnel' };\n        case 'scatter':\n        case 'scattergl':\n          const scatterData = traceData as Partial<PlotData>;\n          const isAreaChart = isScatterAreaChart(scatterData);\n          const isScatterChart = isScatterMarkers(scatterData.mode ?? '');\n          const hasLineShape =\n            Array.isArray(validSchema?.layout?.shapes) &&\n            validSchema.layout.shapes.some((shape: any) => shape.type === 'line');\n\n          if (isScatterChart) {\n            return {\n              isValid: true,\n              traceIndex,\n              type: hasLineShape && supportedScatterInLineChart(scatterData, validSchema.layout) ? 'line' : 'scatter',\n            };\n          }\n\n          if (!doesScatterNeedFallback(scatterData, validSchema.layout)) {\n            return { isValid: true, traceIndex, type: isAreaChart ? 'area' : 'line' };\n          }\n\n          // isScatterAreaChart and doesScatterNeedFallback cannot both return true for the\n          // same trace due to the validation logic in validateScatterData.\n          return { isValid: true, traceIndex, type: 'fallback' };\n        default:\n          return { isValid: false, errorMessage: `${UNSUPPORTED_MSG_PREFIX} ${traceData.type}` };\n      }\n    });\n\n    const noValidTrace = mappedTraces.every(trace => !trace.isValid);\n    if (noValidTrace) {\n      return {\n        isValid: false,\n        errorMessage: mappedTraces\n          .filter(trace => !trace.isValid)\n          .map(trace => trace.errorMessage)\n          .filter((msg, idx, arr) => msg && arr.indexOf(msg) === idx)\n          .join('; '),\n      };\n    }\n\n    // Filter invalid traces and render successfully even if 1 valid trace is present\n    mappedTraces = mappedTraces.filter(trace => trace.isValid);\n\n    const tracesInfo = mappedTraces.map(\n      trace =>\n        ({\n          index: trace.traceIndex!,\n          type: trace.type!,\n        } as TraceInfo),\n    );\n\n    const containsBars = mappedTraces.some(\n      trace => trace.type === 'groupedverticalbar' || trace.type === 'verticalstackedbar',\n    );\n    const containsLines = mappedTraces.some(trace => trace.type === 'line' || trace.type === 'fallback');\n    if (containsLines) {\n      if (containsBars) {\n        const shouldUseGVBC = !mappedTraces.some(trace => trace.type === 'verticalstackedbar');\n        return {\n          isValid: true,\n          type: shouldUseGVBC ? 'groupedverticalbar' : 'fallback',\n          validTracesInfo: tracesInfo,\n        };\n      }\n\n      if (mappedTraces.some(trace => trace.type === 'fallback')) {\n        return {\n          isValid: true,\n          type: 'fallback',\n          validTracesInfo: tracesInfo,\n        };\n      }\n    }\n\n    const uniqueTypes = new Set(mappedTraces.map(trace => trace.type));\n\n    if (uniqueTypes.size > 1) {\n      return {\n        isValid: true,\n        type: `composite`,\n        validTracesInfo: tracesInfo,\n      };\n    }\n    const chartType = Array.from(uniqueTypes)[0];\n    return {\n      isValid: true,\n      type: chartType,\n      validTracesInfo: tracesInfo,\n    };\n  } catch (error) {\n    return { isValid: false, errorMessage: `Invalid plotly schema: ${error}` };\n  }\n};\n\nconst canMapToGantt = (data: Partial<PlotData>) => {\n  return isDateArray(data.base) || isNumberArray(data.base);\n};\n\nexport const getAxisIds = (data: Partial<PlotData>): { x: number; y: number } => {\n  let xAxisId = 1;\n  if (typeof data.xaxis === 'string' && /^x\\d+$/.test(data.xaxis)) {\n    xAxisId = parseInt(data.xaxis.slice(1), 10);\n  }\n\n  let yAxisId = 1;\n  if (typeof data.yaxis === 'string' && /^y\\d+$/.test(data.yaxis)) {\n    yAxisId = parseInt(data.yaxis.slice(1), 10);\n  }\n\n  return {\n    x: xAxisId,\n    y: yAxisId,\n  };\n};\n\nexport const getAxisKey = (axLetter: 'x' | 'y', axId: number): keyof Layout => {\n  return `${axLetter}axis${axId > 1 ? axId : ''}` as keyof Layout;\n};\n\nexport const isScatterAreaChart = (data: Partial<PlotData>): boolean => {\n  return data.fill === 'tonexty' || data.fill === 'tozeroy' || !!data.stackgroup;\n};\n\nconst supportedScatterInLineChart = (data: Partial<PlotData>, layout: Partial<Layout> | undefined) => {\n  const isXDate = isDateArray(data.x);\n  const isXNumber = isNumberArray(data.x);\n  // Consider year as categorical variable not numeric continuous variable\n  // Also year is not considered a date variable as it is represented as a point\n  // in time and brings additional complexity of handling timezone and locale\n  // formatting given the current design of the charting library\n  const isXYear = isYearArray(data.x);\n  const isXMonth = isMonthArray(data.x);\n  const isYString = isStringArray(data.y);\n\n  const axisIds = getAxisIds(data);\n  const xAxisKey = getAxisKey('x', axisIds.x);\n  const isCatXAxis = layout?.[xAxisKey]?.type === 'category';\n\n  if ((isXDate || isXNumber || isXMonth) && !isXYear && !isYString && !isCatXAxis) {\n    return true;\n  }\n  return false;\n};\n\nconst doesScatterNeedFallback = (data: Partial<PlotData>, layout: Partial<Layout> | undefined) => {\n  if (isScatterMarkers(data.mode ?? '')) {\n    return false;\n  }\n  return !supportedScatterInLineChart(data, layout);\n};\n"]}